//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.  This method returns true if the
/// machine instruction was sufficiently described to print it, otherwise
/// it returns false.
void ARMAsmPrinter::printInstruction(const MachineInstr *MI) {
  static const unsigned OpInfo[] = {
    134217730U,	// PHI
    0U,	// INLINEASM
    0U,	// DBG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// DECLARE
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    268435466U,	// ADCSri
    268435466U,	// ADCSrr
    268435466U,	// ADCSrs
    404815888U,	// ADCri
    404881424U,	// ADCrr
    541065232U,	// ADCrs
    409141268U,	// ADDSri
    409141268U,	// ADDSrr
    543358996U,	// ADDSrs
    404815892U,	// ADDri
    404881428U,	// ADDrr
    541065236U,	// ADDrs
    276824088U,	// ADJCALLSTACKDOWN
    276824108U,	// ADJCALLSTACKUP
    404815934U,	// ANDri
    404881470U,	// ANDrr
    541065278U,	// ANDrs
    276824130U,	// B
    413401157U,	// BFC
    404815945U,	// BICri
    404881481U,	// BICrr
    541065289U,	// BICrs
    671088717U,	// BL
    276824145U,	// BLX
    276824145U,	// BLXr9
    816119894U,	// BL_pred
    671088717U,	// BLr9
    816119894U,	// BLr9_pred
    268435545U,	// BR_JTadd
    939524194U,	// BR_JTm
    281018475U,	// BR_JTr
    276824180U,	// BX
    1088422020U,	// BX_RET
    276824180U,	// BXr9
    816054407U,	// Bcc
    1218707593U,	// CLZ
    1218707597U,	// CMNri
    1218707597U,	// CMNrr
    1352925325U,	// CMNrs
    1218707597U,	// CMNzri
    1218707597U,	// CMNzrr
    1352925325U,	// CMNzrs
    1218707601U,	// CMPri
    1218707601U,	// CMPrr
    1352925329U,	// CMPrs
    1218707601U,	// CMPzri
    1218707601U,	// CMPzrr
    1352925329U,	// CMPzrs
    1476395009U,	// CONSTPOOL_ENTRY
    1610612885U,	// DWARF_LOC
    404816027U,	// EORri
    404881563U,	// EORrr
    541065371U,	// EORrs
    1218707615U,	// FABSD
    1218707621U,	// FABSS
    413401259U,	// FADDD
    413401265U,	// FADDS
    1218707639U,	// FCMPED
    1218707646U,	// FCMPES
    816054469U,	// FCMPEZD
    816054477U,	// FCMPEZS
    1218707669U,	// FCPYD
    413401301U,	// FCPYDcc
    1218707675U,	// FCPYS
    413401307U,	// FCPYScc
    1218707681U,	// FCVTDS
    1218707688U,	// FCVTSD
    413401327U,	// FDIVD
    413401333U,	// FDIVS
    413401339U,	// FLDD
    1761607936U,	// FLDMD
    1763705088U,	// FLDMS
    413401349U,	// FLDS
    1352925450U,	// FMACD
    1352925456U,	// FMACS
    413401366U,	// FMDRR
    413401372U,	// FMRRD
    1218707746U,	// FMRS
    1352925479U,	// FMSCD
    1352925485U,	// FMSCS
    1218707763U,	// FMSR
    1082130744U,	// FMSTAT
    413401407U,	// FMULD
    413401413U,	// FMULS
    1218707787U,	// FNEGD
    413401419U,	// FNEGDcc
    1218707793U,	// FNEGS
    413401425U,	// FNEGScc
    1352925527U,	// FNMACD
    1352925534U,	// FNMACS
    1352925541U,	// FNMSCD
    1352925548U,	// FNMSCS
    413401459U,	// FNMULD
    413401466U,	// FNMULS
    1218707841U,	// FSITOD
    1218707848U,	// FSITOS
    1218707855U,	// FSQRTD
    1218707862U,	// FSQRTS
    413401501U,	// FSTD
    1761608098U,	// FSTMD
    1763705250U,	// FSTMS
    413401511U,	// FSTS
    413401516U,	// FSUBD
    413401522U,	// FSUBS
    1218707896U,	// FTOSIZD
    1218707904U,	// FTOSIZS
    1218707912U,	// FTOUIZD
    1218707920U,	// FTOUIZS
    1218707928U,	// FUITOD
    1218707935U,	// FUITOS
    289407462U,	// Int_eh_sjlj_setjmp
    1231028720U,	// LDM
    1231028720U,	// LDM_RET
    1352925684U,	// LDR
    1367605748U,	// LDRB
    562299380U,	// LDRB_POST
    562299380U,	// LDRB_PRE
    564134388U,	// LDRD
    1371800052U,	// LDRH
    566493684U,	// LDRH_POST
    566493684U,	// LDRH_PRE
    1373831668U,	// LDRSB
    568721908U,	// LDRSB_POST
    568525300U,	// LDRSB_PRE
    1375928820U,	// LDRSH
    570819060U,	// LDRSH_POST
    570622452U,	// LDRSH_PRE
    547619316U,	// LDR_POST
    547619316U,	// LDR_PRE
    1352925684U,	// LDRcp
    1914700280U,	// LEApcrel
    1916797432U,	// LEApcrelJT
    1382023678U,	// MLA
    1352925698U,	// MLS
    413401606U,	// MOVCCi
    413401606U,	// MOVCCr
    547619334U,	// MOVCCs
    1250361862U,	// MOVi
    1218707974U,	// MOVi2pieces
    1249903110U,	// MOVr
    1249903110U,	// MOVrx
    1382547974U,	// MOVs
    1214841350U,	// MOVsra_flag
    1214906886U,	// MOVsrl_flag
    404881930U,	// MUL
    1250361870U,	// MVNi
    1249903118U,	// MVNr
    1382547982U,	// MVNs
    404816402U,	// ORRri
    404881938U,	// ORRrr
    541065746U,	// ORRrs
    2057306113U,	// PICADD
    2194341889U,	// PICLDR
    2194407425U,	// PICLDRB
    2194472961U,	// PICLDRH
    2194538497U,	// PICLDRSB
    2194604033U,	// PICLDRSH
    2196439041U,	// PICSTR
    2196504577U,	// PICSTRB
    2196570113U,	// PICSTRH
    1352925718U,	// PKHBT
    1352925724U,	// PKHTB
    1218708002U,	// REV
    1218708006U,	// REV16
    1218708012U,	// REVSH
    409141810U,	// RSBSri
    543359538U,	// RSBSrs
    404816434U,	// RSBri
    541065778U,	// RSBrs
    268436022U,	// RSCSri
    268436022U,	// RSCSrs
    404816444U,	// RSCri
    541065788U,	// RSCrs
    268436032U,	// SBCSri
    268436032U,	// SBCSrr
    268436032U,	// SBCSrs
    404816454U,	// SBCri
    404881990U,	// SBCrr
    541065798U,	// SBCrs
    1352925770U,	// SMLABB
    1352925777U,	// SMLABT
    1382023768U,	// SMLAL
    1352925790U,	// SMLATB
    1352925797U,	// SMLATT
    1352925804U,	// SMLAWB
    1352925811U,	// SMLAWT
    1352925818U,	// SMMLA
    1352925824U,	// SMMLS
    413401734U,	// SMMUL
    413401740U,	// SMULBB
    413401747U,	// SMULBT
    1382023834U,	// SMULL
    413401760U,	// SMULTB
    413401767U,	// SMULTT
    413401774U,	// SMULWB
    413401781U,	// SMULWT
    1231028924U,	// STM
    1352925888U,	// STR
    1367605952U,	// STRB
    562037440U,	// STRB_POST
    562037440U,	// STRB_PRE
    564134592U,	// STRD
    1371800256U,	// STRH
    566231744U,	// STRH_POST
    566231744U,	// STRH_PRE
    547357376U,	// STR_POST
    547357376U,	// STR_PRE
    409141956U,	// SUBSri
    409141956U,	// SUBSrr
    543359684U,	// SUBSrs
    404816580U,	// SUBri
    404882116U,	// SUBrr
    541065924U,	// SUBrs
    413401800U,	// SXTABrr
    1352925896U,	// SXTABrr_rot
    413401806U,	// SXTAHrr
    1352925902U,	// SXTAHrr_rot
    1218708180U,	// SXTBr
    413401812U,	// SXTBr_rot
    1218708185U,	// SXTHr
    413401817U,	// SXTHr_rot
    1218708190U,	// TEQri
    1218708190U,	// TEQrr
    1352925918U,	// TEQrs
    134218466U,	// TPsoft
    1218708213U,	// TSTri
    1218708213U,	// TSTrr
    1352925941U,	// TSTrs
    1352925945U,	// UMAAL
    1382023935U,	// UMLAL
    1382023941U,	// UMULL
    413401867U,	// UXTABrr
    1352925963U,	// UXTABrr_rot
    413401873U,	// UXTAHrr
    1352925969U,	// UXTAHrr_rot
    1218708247U,	// UXTB16r
    413401879U,	// UXTB16r_rot
    1218708254U,	// UXTBr
    413401886U,	// UXTBr_rot
    1218708259U,	// UXTHr
    413401891U,	// UXTHr_rot
    268567336U,	// VABALsv2i64
    268567347U,	// VABALsv4i32
    268567358U,	// VABALsv8i16
    268567368U,	// VABALuv2i64
    268567379U,	// VABALuv4i32
    268567390U,	// VABALuv8i16
    268567400U,	// VABAsv16i8
    268567409U,	// VABAsv2i32
    268567419U,	// VABAsv4i16
    268567409U,	// VABAsv4i32
    268567419U,	// VABAsv8i16
    268567400U,	// VABAsv8i8
    268567429U,	// VABAuv16i8
    268567438U,	// VABAuv2i32
    268567448U,	// VABAuv4i16
    268567438U,	// VABAuv4i32
    268567448U,	// VABAuv8i16
    268567429U,	// VABAuv8i8
    268436386U,	// VABDLsv2i64
    268436397U,	// VABDLsv4i32
    268436408U,	// VABDLsv8i16
    268436418U,	// VABDLuv2i64
    268436429U,	// VABDLuv4i32
    268436440U,	// VABDLuv8i16
    268436450U,	// VABDfd
    268436450U,	// VABDfq
    268436460U,	// VABDsv16i8
    268436469U,	// VABDsv2i32
    268436479U,	// VABDsv4i16
    268436469U,	// VABDsv4i32
    268436479U,	// VABDsv8i16
    268436460U,	// VABDsv8i8
    268436489U,	// VABDuv16i8
    268436498U,	// VABDuv2i32
    268436508U,	// VABDuv4i16
    268436498U,	// VABDuv4i32
    268436508U,	// VABDuv8i16
    268436489U,	// VABDuv8i8
    268436518U,	// VABSfd
    268436518U,	// VABSfd_sfp
    268436518U,	// VABSfq
    268436528U,	// VABSv16i8
    268436537U,	// VABSv2i32
    268436547U,	// VABSv4i16
    268436537U,	// VABSv4i32
    268436547U,	// VABSv8i16
    268436528U,	// VABSv8i8
    268436557U,	// VACGEd
    268436557U,	// VACGEq
    268436568U,	// VACGTd
    268436568U,	// VACGTq
    268436579U,	// VADDHNv2i32
    268436591U,	// VADDHNv4i16
    268436603U,	// VADDHNv8i8
    268436615U,	// VADDLsv2i64
    268436626U,	// VADDLsv4i32
    268436637U,	// VADDLsv8i16
    268436647U,	// VADDLuv2i64
    268436658U,	// VADDLuv4i32
    268436669U,	// VADDLuv8i16
    268436679U,	// VADDWsv2i64
    268436690U,	// VADDWsv4i32
    268436701U,	// VADDWsv8i16
    268436711U,	// VADDWuv2i64
    268436722U,	// VADDWuv4i32
    268436733U,	// VADDWuv8i16
    268436743U,	// VADDfd
    268436743U,	// VADDfd_sfp
    268436743U,	// VADDfq
    268436753U,	// VADDv16i8
    268436762U,	// VADDv1i64
    268436772U,	// VADDv2i32
    268436762U,	// VADDv2i64
    268436782U,	// VADDv4i16
    268436772U,	// VADDv4i32
    268436782U,	// VADDv8i16
    268436753U,	// VADDv8i8
    268436792U,	// VANDd
    268436792U,	// VANDq
    268436798U,	// VBICd
    268436798U,	// VBICq
    268567876U,	// VBSLd
    268567876U,	// VBSLq
    268436810U,	// VCEQfd
    268436810U,	// VCEQfq
    268436820U,	// VCEQv16i8
    268436829U,	// VCEQv2i32
    268436839U,	// VCEQv4i16
    268436829U,	// VCEQv4i32
    268436839U,	// VCEQv8i16
    268436820U,	// VCEQv8i8
    268436849U,	// VCGEfd
    268436849U,	// VCGEfq
    268436859U,	// VCGEsv16i8
    268436868U,	// VCGEsv2i32
    268436878U,	// VCGEsv4i16
    268436868U,	// VCGEsv4i32
    268436878U,	// VCGEsv8i16
    268436859U,	// VCGEsv8i8
    268436888U,	// VCGEuv16i8
    268436897U,	// VCGEuv2i32
    268436907U,	// VCGEuv4i16
    268436897U,	// VCGEuv4i32
    268436907U,	// VCGEuv8i16
    268436888U,	// VCGEuv8i8
    268436917U,	// VCGTfd
    268436917U,	// VCGTfq
    268436927U,	// VCGTsv16i8
    268436936U,	// VCGTsv2i32
    268436946U,	// VCGTsv4i16
    268436936U,	// VCGTsv4i32
    268436946U,	// VCGTsv8i16
    268436927U,	// VCGTsv8i8
    268436956U,	// VCGTuv16i8
    268436965U,	// VCGTuv2i32
    268436975U,	// VCGTuv4i16
    268436965U,	// VCGTuv4i32
    268436975U,	// VCGTuv8i16
    268436956U,	// VCGTuv8i8
    268436985U,	// VCLSv16i8
    268436994U,	// VCLSv2i32
    268437004U,	// VCLSv4i16
    268436994U,	// VCLSv4i32
    268437004U,	// VCLSv8i16
    268436985U,	// VCLSv8i8
    268437014U,	// VCLZv16i8
    268437023U,	// VCLZv2i32
    268437033U,	// VCLZv4i16
    268437023U,	// VCLZv4i32
    268437033U,	// VCLZv8i16
    268437014U,	// VCLZv8i8
    268437043U,	// VCNTd
    268437043U,	// VCNTq
    268437051U,	// VCVTf2sd
    268437051U,	// VCVTf2sd_sfp
    268437051U,	// VCVTf2sq
    268437065U,	// VCVTf2ud
    268437065U,	// VCVTf2ud_sfp
    268437065U,	// VCVTf2uq
    268437051U,	// VCVTf2xsd
    268437051U,	// VCVTf2xsq
    268437065U,	// VCVTf2xud
    268437065U,	// VCVTf2xuq
    268437079U,	// VCVTs2fd
    268437079U,	// VCVTs2fd_sfp
    268437079U,	// VCVTs2fq
    268437093U,	// VCVTu2fd
    268437093U,	// VCVTu2fd_sfp
    268437093U,	// VCVTu2fq
    268437079U,	// VCVTxs2fd
    268437079U,	// VCVTxs2fq
    268437093U,	// VCVTxu2fd
    268437093U,	// VCVTxu2fq
    1258489459U,	// VDUP16d
    1258489459U,	// VDUP16q
    1260586611U,	// VDUP32d
    1260586611U,	// VDUP32q
    1262683763U,	// VDUP8d
    1262683763U,	// VDUP8q
    268437112U,	// VDUPLN16d
    268437112U,	// VDUPLN16q
    268437121U,	// VDUPLN32d
    268437121U,	// VDUPLN32q
    268437130U,	// VDUPLN8d
    268437130U,	// VDUPLN8q
    268437121U,	// VDUPLNfd
    268437121U,	// VDUPLNfq
    1260586611U,	// VDUPfd
    269485697U,	// VDUPfdf
    1260586611U,	// VDUPfq
    269485697U,	// VDUPfqf
    268437138U,	// VEORd
    268437138U,	// VEORq
    268437144U,	// VEXTd16
    268437153U,	// VEXTd32
    268437162U,	// VEXTd8
    268437153U,	// VEXTdf
    268437144U,	// VEXTq16
    268437153U,	// VEXTq32
    268437162U,	// VEXTq8
    268437153U,	// VEXTqf
    455280306U,	// VGETLNi32
    459278002U,	// VGETLNs16
    461375154U,	// VGETLNs8
    463472306U,	// VGETLNu16
    465569458U,	// VGETLNu8
    268437175U,	// VHADDsv16i8
    268437185U,	// VHADDsv2i32
    268437196U,	// VHADDsv4i16
    268437185U,	// VHADDsv4i32
    268437196U,	// VHADDsv8i16
    268437175U,	// VHADDsv8i8
    268437207U,	// VHADDuv16i8
    268437217U,	// VHADDuv2i32
    268437228U,	// VHADDuv4i16
    268437217U,	// VHADDuv4i32
    268437228U,	// VHADDuv8i16
    268437207U,	// VHADDuv8i8
    268437239U,	// VHSUBsv16i8
    268437249U,	// VHSUBsv2i32
    268437260U,	// VHSUBsv4i16
    268437249U,	// VHSUBsv4i32
    268437260U,	// VHSUBsv8i16
    268437239U,	// VHSUBsv8i8
    268437271U,	// VHSUBuv16i8
    268437281U,	// VHSUBuv2i32
    268437292U,	// VHSUBuv4i16
    268437281U,	// VHSUBuv4i32
    268437292U,	// VHSUBuv8i16
    268437271U,	// VHSUBuv8i8
    334563127U,	// VLD1d16
    334563137U,	// VLD1d32
    334563147U,	// VLD1d64
    334563157U,	// VLD1d8
    334563137U,	// VLD1df
    2281703262U,	// VLD1q16
    2281703271U,	// VLD1q32
    2281703280U,	// VLD1q64
    2281703289U,	// VLD1q8
    2281703271U,	// VLD1qf
    335546241U,	// VLD2d16
    335546251U,	// VLD2d32
    335546261U,	// VLD2d8
    335546270U,	// VLD3d16
    335546280U,	// VLD3d32
    335546290U,	// VLD3d8
    335546299U,	// VLD4d16
    335546309U,	// VLD4d32
    335546319U,	// VLD4d8
    2415921112U,	// VLDRQ
    268437472U,	// VMAXfd
    268437472U,	// VMAXfq
    268437482U,	// VMAXsv16i8
    268437491U,	// VMAXsv2i32
    268437501U,	// VMAXsv4i16
    268437491U,	// VMAXsv4i32
    268437501U,	// VMAXsv8i16
    268437482U,	// VMAXsv8i8
    268437511U,	// VMAXuv16i8
    268437520U,	// VMAXuv2i32
    268437530U,	// VMAXuv4i16
    268437520U,	// VMAXuv4i32
    268437530U,	// VMAXuv8i16
    268437511U,	// VMAXuv8i8
    268437540U,	// VMINfd
    268437540U,	// VMINfq
    268437550U,	// VMINsv16i8
    268437559U,	// VMINsv2i32
    268437569U,	// VMINsv4i16
    268437559U,	// VMINsv4i32
    268437569U,	// VMINsv8i16
    268437550U,	// VMINsv8i8
    268437579U,	// VMINuv16i8
    268437588U,	// VMINuv2i32
    268437598U,	// VMINuv4i16
    268437588U,	// VMINuv4i32
    268437598U,	// VMINuv8i16
    268437579U,	// VMINuv8i8
    268568680U,	// VMLALsv2i64
    268568691U,	// VMLALsv4i32
    268568702U,	// VMLALsv8i16
    268568712U,	// VMLALuv2i64
    268568723U,	// VMLALuv4i32
    268568734U,	// VMLALuv8i16
    268568744U,	// VMLAfd
    268568744U,	// VMLAfd_sfp
    268568744U,	// VMLAfq
    268568754U,	// VMLAv16i8
    268568763U,	// VMLAv2i32
    268568773U,	// VMLAv4i16
    268568763U,	// VMLAv4i32
    268568773U,	// VMLAv8i16
    268568754U,	// VMLAv8i8
    268568783U,	// VMLSLsv2i64
    268568794U,	// VMLSLsv4i32
    268568805U,	// VMLSLsv8i16
    268568815U,	// VMLSLuv2i64
    268568826U,	// VMLSLuv4i32
    268568837U,	// VMLSLuv8i16
    268568847U,	// VMLSfd
    268568847U,	// VMLSfd_sfp
    268568847U,	// VMLSfq
    268568857U,	// VMLSv16i8
    268568866U,	// VMLSv2i32
    268568876U,	// VMLSv4i16
    268568866U,	// VMLSv4i32
    268568876U,	// VMLSv8i16
    268568857U,	// VMLSv8i8
    268437814U,	// VMOVD
    268437820U,	// VMOVLsv2i64
    268437831U,	// VMOVLsv4i32
    268437842U,	// VMOVLsv8i16
    268437852U,	// VMOVLuv2i64
    268437863U,	// VMOVLuv4i32
    268437874U,	// VMOVLuv8i16
    268437884U,	// VMOVNv2i32
    268437895U,	// VMOVNv4i16
    268437906U,	// VMOVNv8i8
    268437814U,	// VMOVQ
    268437917U,	// VMOVv16i8
    268437926U,	// VMOVv1i64
    268437936U,	// VMOVv2i32
    268437926U,	// VMOVv2i64
    268437946U,	// VMOVv4i16
    268437936U,	// VMOVv4i32
    268437946U,	// VMOVv8i16
    268437917U,	// VMOVv8i8
    268437956U,	// VMULLp
    268437966U,	// VMULLsv2i64
    268437977U,	// VMULLsv4i32
    268437988U,	// VMULLsv8i16
    268437998U,	// VMULLuv2i64
    268438009U,	// VMULLuv4i32
    268438020U,	// VMULLuv8i16
    268438030U,	// VMULfd
    268438030U,	// VMULfd_sfp
    268438030U,	// VMULfq
    268438040U,	// VMULpd
    268438040U,	// VMULpq
    268438049U,	// VMULv16i8
    268438058U,	// VMULv2i32
    268438068U,	// VMULv4i16
    268438058U,	// VMULv4i32
    268438068U,	// VMULv8i16
    268438049U,	// VMULv8i8
    268438078U,	// VMVNd
    268438078U,	// VMVNq
    268438084U,	// VNEGf32d
    268438084U,	// VNEGf32d_sfp
    268438084U,	// VNEGf32q
    268438094U,	// VNEGs16d
    268438094U,	// VNEGs16q
    268438104U,	// VNEGs32d
    268438104U,	// VNEGs32q
    268438114U,	// VNEGs8d
    268438114U,	// VNEGs8q
    268438123U,	// VORNd
    268438123U,	// VORNq
    268438129U,	// VORRd
    268438129U,	// VORRq
    268569207U,	// VPADALsv16i8
    268569218U,	// VPADALsv2i32
    268569230U,	// VPADALsv4i16
    268569218U,	// VPADALsv4i32
    268569230U,	// VPADALsv8i16
    268569207U,	// VPADALsv8i8
    268569242U,	// VPADALuv16i8
    268569253U,	// VPADALuv2i32
    268569265U,	// VPADALuv4i16
    268569253U,	// VPADALuv4i32
    268569265U,	// VPADALuv8i16
    268569242U,	// VPADALuv8i8
    268438205U,	// VPADDLsv16i8
    268438216U,	// VPADDLsv2i32
    268438228U,	// VPADDLsv4i16
    268438216U,	// VPADDLsv4i32
    268438228U,	// VPADDLsv8i16
    268438205U,	// VPADDLsv8i8
    268438240U,	// VPADDLuv16i8
    268438251U,	// VPADDLuv2i32
    268438263U,	// VPADDLuv4i16
    268438251U,	// VPADDLuv4i32
    268438263U,	// VPADDLuv8i16
    268438240U,	// VPADDLuv8i8
    268438275U,	// VPADDf
    268438286U,	// VPADDi16
    268438297U,	// VPADDi32
    268438308U,	// VPADDi8
    268438318U,	// VPMAXf
    268438329U,	// VPMAXs16
    268438340U,	// VPMAXs32
    268438351U,	// VPMAXs8
    268438361U,	// VPMAXu16
    268438372U,	// VPMAXu32
    268438383U,	// VPMAXu8
    268438393U,	// VPMINf
    268438404U,	// VPMINs16
    268438415U,	// VPMINs32
    268438426U,	// VPMINs8
    268438436U,	// VPMINu16
    268438447U,	// VPMINu32
    268438458U,	// VPMINu8
    268438468U,	// VQABSv16i8
    268438478U,	// VQABSv2i32
    268438489U,	// VQABSv4i16
    268438478U,	// VQABSv4i32
    268438489U,	// VQABSv8i16
    268438468U,	// VQABSv8i8
    268438500U,	// VQADDsv16i8
    268438510U,	// VQADDsv1i64
    268438521U,	// VQADDsv2i32
    268438510U,	// VQADDsv2i64
    268438532U,	// VQADDsv4i16
    268438521U,	// VQADDsv4i32
    268438532U,	// VQADDsv8i16
    268438500U,	// VQADDsv8i8
    268438543U,	// VQADDuv16i8
    268438553U,	// VQADDuv1i64
    268438564U,	// VQADDuv2i32
    268438553U,	// VQADDuv2i64
    268438575U,	// VQADDuv4i16
    268438564U,	// VQADDuv4i32
    268438575U,	// VQADDuv8i16
    268438543U,	// VQADDuv8i8
    268569658U,	// VQDMLALv2i64
    268569671U,	// VQDMLALv4i32
    268569684U,	// VQDMLSLv2i64
    268569697U,	// VQDMLSLv4i32
    268438638U,	// VQDMULHv2i32
    268438651U,	// VQDMULHv4i16
    268438638U,	// VQDMULHv4i32
    268438651U,	// VQDMULHv8i16
    268438664U,	// VQDMULLv2i64
    268438677U,	// VQDMULLv4i32
    268438690U,	// VQMOVNsuv2i32
    268438703U,	// VQMOVNsuv4i16
    268438716U,	// VQMOVNsuv8i8
    268438729U,	// VQMOVNsv2i32
    268438741U,	// VQMOVNsv4i16
    268438753U,	// VQMOVNsv8i8
    268438765U,	// VQMOVNuv2i32
    268438777U,	// VQMOVNuv4i16
    268438789U,	// VQMOVNuv8i8
    268438801U,	// VQNEGv16i8
    268438811U,	// VQNEGv2i32
    268438822U,	// VQNEGv4i16
    268438811U,	// VQNEGv4i32
    268438822U,	// VQNEGv8i16
    268438801U,	// VQNEGv8i8
    268438833U,	// VQRDMULHv2i32
    268438847U,	// VQRDMULHv4i16
    268438833U,	// VQRDMULHv4i32
    268438847U,	// VQRDMULHv8i16
    268438861U,	// VQRSHLsv16i8
    268438872U,	// VQRSHLsv1i64
    268438884U,	// VQRSHLsv2i32
    268438872U,	// VQRSHLsv2i64
    268438896U,	// VQRSHLsv4i16
    268438884U,	// VQRSHLsv4i32
    268438896U,	// VQRSHLsv8i16
    268438861U,	// VQRSHLsv8i8
    268438908U,	// VQRSHLuv16i8
    268438919U,	// VQRSHLuv1i64
    268438931U,	// VQRSHLuv2i32
    268438919U,	// VQRSHLuv2i64
    268438943U,	// VQRSHLuv4i16
    268438931U,	// VQRSHLuv4i32
    268438943U,	// VQRSHLuv8i16
    268438908U,	// VQRSHLuv8i8
    268438955U,	// VQRSHRNs16
    268438968U,	// VQRSHRNs32
    268438981U,	// VQRSHRNs64
    268438994U,	// VQRSHRNu16
    268439007U,	// VQRSHRNu32
    268439020U,	// VQRSHRNu64
    268439033U,	// VQRSHRUN16
    268439047U,	// VQRSHRUN32
    268439061U,	// VQRSHRUN64
    268439075U,	// VQSHLsiv16i8
    268439085U,	// VQSHLsiv1i64
    268439096U,	// VQSHLsiv2i32
    268439085U,	// VQSHLsiv2i64
    268439107U,	// VQSHLsiv4i16
    268439096U,	// VQSHLsiv4i32
    268439107U,	// VQSHLsiv8i16
    268439075U,	// VQSHLsiv8i8
    268439118U,	// VQSHLsuv16i8
    268439129U,	// VQSHLsuv1i64
    268439141U,	// VQSHLsuv2i32
    268439129U,	// VQSHLsuv2i64
    268439153U,	// VQSHLsuv4i16
    268439141U,	// VQSHLsuv4i32
    268439153U,	// VQSHLsuv8i16
    268439118U,	// VQSHLsuv8i8
    268439075U,	// VQSHLsv16i8
    268439085U,	// VQSHLsv1i64
    268439096U,	// VQSHLsv2i32
    268439085U,	// VQSHLsv2i64
    268439107U,	// VQSHLsv4i16
    268439096U,	// VQSHLsv4i32
    268439107U,	// VQSHLsv8i16
    268439075U,	// VQSHLsv8i8
    268439165U,	// VQSHLuiv16i8
    268439175U,	// VQSHLuiv1i64
    268439186U,	// VQSHLuiv2i32
    268439175U,	// VQSHLuiv2i64
    268439197U,	// VQSHLuiv4i16
    268439186U,	// VQSHLuiv4i32
    268439197U,	// VQSHLuiv8i16
    268439165U,	// VQSHLuiv8i8
    268439165U,	// VQSHLuv16i8
    268439175U,	// VQSHLuv1i64
    268439186U,	// VQSHLuv2i32
    268439175U,	// VQSHLuv2i64
    268439197U,	// VQSHLuv4i16
    268439186U,	// VQSHLuv4i32
    268439197U,	// VQSHLuv8i16
    268439165U,	// VQSHLuv8i8
    268439208U,	// VQSHRNs16
    268439220U,	// VQSHRNs32
    268439232U,	// VQSHRNs64
    268439244U,	// VQSHRNu16
    268439256U,	// VQSHRNu32
    268439268U,	// VQSHRNu64
    268439280U,	// VQSHRUN16
    268439293U,	// VQSHRUN32
    268439306U,	// VQSHRUN64
    268439319U,	// VQSUBsv16i8
    268439329U,	// VQSUBsv1i64
    268439340U,	// VQSUBsv2i32
    268439329U,	// VQSUBsv2i64
    268439351U,	// VQSUBsv4i16
    268439340U,	// VQSUBsv4i32
    268439351U,	// VQSUBsv8i16
    268439319U,	// VQSUBsv8i8
    268439362U,	// VQSUBuv16i8
    268439372U,	// VQSUBuv1i64
    268439383U,	// VQSUBuv2i32
    268439372U,	// VQSUBuv2i64
    268439394U,	// VQSUBuv4i16
    268439383U,	// VQSUBuv4i32
    268439394U,	// VQSUBuv8i16
    268439362U,	// VQSUBuv8i8
    268439405U,	// VRADDHNv2i32
    268439418U,	// VRADDHNv4i16
    268439431U,	// VRADDHNv8i8
    268439444U,	// VRECPEd
    268439456U,	// VRECPEfd
    268439456U,	// VRECPEfq
    268439444U,	// VRECPEq
    268439468U,	// VRECPSfd
    268439468U,	// VRECPSfq
    268439480U,	// VREV16d8
    268439480U,	// VREV16q8
    268439490U,	// VREV32d16
    268439501U,	// VREV32d8
    268439490U,	// VREV32q16
    268439501U,	// VREV32q8
    268439511U,	// VREV64d16
    268439522U,	// VREV64d32
    268439533U,	// VREV64d8
    268439522U,	// VREV64df
    268439511U,	// VREV64q16
    268439522U,	// VREV64q32
    268439533U,	// VREV64q8
    268439522U,	// VREV64qf
    268439543U,	// VRHADDsv16i8
    268439554U,	// VRHADDsv2i32
    268439566U,	// VRHADDsv4i16
    268439554U,	// VRHADDsv4i32
    268439566U,	// VRHADDsv8i16
    268439543U,	// VRHADDsv8i8
    268439578U,	// VRHADDuv16i8
    268439589U,	// VRHADDuv2i32
    268439601U,	// VRHADDuv4i16
    268439589U,	// VRHADDuv4i32
    268439601U,	// VRHADDuv8i16
    268439578U,	// VRHADDuv8i8
    268439613U,	// VRSHLsv16i8
    268439623U,	// VRSHLsv1i64
    268439634U,	// VRSHLsv2i32
    268439623U,	// VRSHLsv2i64
    268439645U,	// VRSHLsv4i16
    268439634U,	// VRSHLsv4i32
    268439645U,	// VRSHLsv8i16
    268439613U,	// VRSHLsv8i8
    268439656U,	// VRSHLuv16i8
    268439666U,	// VRSHLuv1i64
    268439677U,	// VRSHLuv2i32
    268439666U,	// VRSHLuv2i64
    268439688U,	// VRSHLuv4i16
    268439677U,	// VRSHLuv4i32
    268439688U,	// VRSHLuv8i16
    268439656U,	// VRSHLuv8i8
    268439699U,	// VRSHRN16
    268439711U,	// VRSHRN32
    268439723U,	// VRSHRN64
    268439735U,	// VRSHRsv16i8
    268439745U,	// VRSHRsv1i64
    268439756U,	// VRSHRsv2i32
    268439745U,	// VRSHRsv2i64
    268439767U,	// VRSHRsv4i16
    268439756U,	// VRSHRsv4i32
    268439767U,	// VRSHRsv8i16
    268439735U,	// VRSHRsv8i8
    268439778U,	// VRSHRuv16i8
    268439788U,	// VRSHRuv1i64
    268439799U,	// VRSHRuv2i32
    268439788U,	// VRSHRuv2i64
    268439810U,	// VRSHRuv4i16
    268439799U,	// VRSHRuv4i32
    268439810U,	// VRSHRuv8i16
    268439778U,	// VRSHRuv8i8
    268439821U,	// VRSQRTEd
    268439834U,	// VRSQRTEfd
    268439834U,	// VRSQRTEfq
    268439821U,	// VRSQRTEq
    268439847U,	// VRSQRTSfd
    268439847U,	// VRSQRTSfq
    268570932U,	// VRSRAsv16i8
    268570942U,	// VRSRAsv1i64
    268570953U,	// VRSRAsv2i32
    268570942U,	// VRSRAsv2i64
    268570964U,	// VRSRAsv4i16
    268570953U,	// VRSRAsv4i32
    268570964U,	// VRSRAsv8i16
    268570932U,	// VRSRAsv8i8
    268570975U,	// VRSRAuv16i8
    268570985U,	// VRSRAuv1i64
    268570996U,	// VRSRAuv2i32
    268570985U,	// VRSRAuv2i64
    268571007U,	// VRSRAuv4i16
    268570996U,	// VRSRAuv4i32
    268571007U,	// VRSRAuv8i16
    268570975U,	// VRSRAuv8i8
    268439946U,	// VRSUBHNv2i32
    268439959U,	// VRSUBHNv4i16
    268439972U,	// VRSUBHNv8i8
    1393690290U,	// VSETLNi16
    1395787442U,	// VSETLNi32
    1397884594U,	// VSETLNi8
    268439985U,	// VSHLLi16
    268439996U,	// VSHLLi32
    268440007U,	// VSHLLi8
    268440017U,	// VSHLLs16
    268440028U,	// VSHLLs32
    268440039U,	// VSHLLs8
    268440049U,	// VSHLLu16
    268440060U,	// VSHLLu32
    268440071U,	// VSHLLu8
    268440081U,	// VSHLiv16i8
    268440090U,	// VSHLiv1i64
    268440100U,	// VSHLiv2i32
    268440090U,	// VSHLiv2i64
    268440110U,	// VSHLiv4i16
    268440100U,	// VSHLiv4i32
    268440110U,	// VSHLiv8i16
    268440081U,	// VSHLiv8i8
    268440120U,	// VSHLsv16i8
    268440129U,	// VSHLsv1i64
    268440139U,	// VSHLsv2i32
    268440129U,	// VSHLsv2i64
    268440149U,	// VSHLsv4i16
    268440139U,	// VSHLsv4i32
    268440149U,	// VSHLsv8i16
    268440120U,	// VSHLsv8i8
    268440159U,	// VSHLuv16i8
    268440168U,	// VSHLuv1i64
    268440178U,	// VSHLuv2i32
    268440168U,	// VSHLuv2i64
    268440188U,	// VSHLuv4i16
    268440178U,	// VSHLuv4i32
    268440188U,	// VSHLuv8i16
    268440159U,	// VSHLuv8i8
    268440198U,	// VSHRN16
    268440209U,	// VSHRN32
    268440220U,	// VSHRN64
    268440231U,	// VSHRsv16i8
    268440240U,	// VSHRsv1i64
    268440250U,	// VSHRsv2i32
    268440240U,	// VSHRsv2i64
    268440260U,	// VSHRsv4i16
    268440250U,	// VSHRsv4i32
    268440260U,	// VSHRsv8i16
    268440231U,	// VSHRsv8i8
    268440270U,	// VSHRuv16i8
    268440279U,	// VSHRuv1i64
    268440289U,	// VSHRuv2i32
    268440279U,	// VSHRuv2i64
    268440299U,	// VSHRuv4i16
    268440289U,	// VSHRuv4i32
    268440299U,	// VSHRuv8i16
    268440270U,	// VSHRuv8i8
    268571381U,	// VSLIv16i8
    268571389U,	// VSLIv1i64
    268571398U,	// VSLIv2i32
    268571389U,	// VSLIv2i64
    268571407U,	// VSLIv4i16
    268571398U,	// VSLIv4i32
    268571407U,	// VSLIv8i16
    268571381U,	// VSLIv8i8
    268571416U,	// VSRAsv16i8
    268571425U,	// VSRAsv1i64
    268571435U,	// VSRAsv2i32
    268571425U,	// VSRAsv2i64
    268571445U,	// VSRAsv4i16
    268571435U,	// VSRAsv4i32
    268571445U,	// VSRAsv8i16
    268571416U,	// VSRAsv8i8
    268571455U,	// VSRAuv16i8
    268571464U,	// VSRAuv1i64
    268571474U,	// VSRAuv2i32
    268571464U,	// VSRAuv2i64
    268571484U,	// VSRAuv4i16
    268571474U,	// VSRAuv4i32
    268571484U,	// VSRAuv8i16
    268571455U,	// VSRAuv8i8
    268571494U,	// VSRIv16i8
    268571502U,	// VSRIv1i64
    268571511U,	// VSRIv2i32
    268571502U,	// VSRIv2i64
    268571520U,	// VSRIv4i16
    268571511U,	// VSRIv4i32
    268571520U,	// VSRIv8i16
    268571494U,	// VSRIv8i8
    2616398729U,	// VST1d16
    2616398739U,	// VST1d32
    2616398749U,	// VST1d64
    2616398759U,	// VST1d8
    2616398739U,	// VST1df
    2684359600U,	// VST1q16
    2684359609U,	// VST1q32
    2684359618U,	// VST1q64
    2684359627U,	// VST1q8
    2684359609U,	// VST1qf
    2618561491U,	// VST2d16
    2618561501U,	// VST2d32
    2618561511U,	// VST2d8
    2618561520U,	// VST3d16
    2618561530U,	// VST3d32
    2618561540U,	// VST3d8
    2618561549U,	// VST4d16
    2618561559U,	// VST4d32
    2618561569U,	// VST4d8
    2415924266U,	// VSTRQ
    268440626U,	// VSUBHNv2i32
    268440638U,	// VSUBHNv4i16
    268440650U,	// VSUBHNv8i8
    268440662U,	// VSUBLsv2i64
    268440673U,	// VSUBLsv4i32
    268440684U,	// VSUBLsv8i16
    268440694U,	// VSUBLuv2i64
    268440705U,	// VSUBLuv4i32
    268440716U,	// VSUBLuv8i16
    268440726U,	// VSUBWsv2i64
    268440737U,	// VSUBWsv4i32
    268440748U,	// VSUBWsv8i16
    268440758U,	// VSUBWuv2i64
    268440769U,	// VSUBWuv4i32
    268440780U,	// VSUBWuv8i16
    268440790U,	// VSUBfd
    268440790U,	// VSUBfd_sfp
    268440790U,	// VSUBfq
    268440800U,	// VSUBv16i8
    268440809U,	// VSUBv1i64
    268440819U,	// VSUBv2i32
    268440809U,	// VSUBv2i64
    268440829U,	// VSUBv4i16
    268440819U,	// VSUBv4i32
    268440829U,	// VSUBv8i16
    268440800U,	// VSUBv8i8
    337646855U,	// VTBL1
    337646855U,	// VTBL2
    337646855U,	// VTBL3
    337646855U,	// VTBL4
    337777935U,	// VTBX1
    337777935U,	// VTBX2
    337777935U,	// VTBX3
    337777935U,	// VTBX4
    268440855U,	// VTRNd16
    268440864U,	// VTRNd32
    268440873U,	// VTRNd8
    268440855U,	// VTRNq16
    268440864U,	// VTRNq32
    268440873U,	// VTRNq8
    268440881U,	// VTSTv16i8
    268440890U,	// VTSTv2i32
    268440900U,	// VTSTv4i16
    268440890U,	// VTSTv4i32
    268440900U,	// VTSTv8i16
    268440881U,	// VTSTv8i8
    268440910U,	// VUZPd16
    268440919U,	// VUZPd32
    268440928U,	// VUZPd8
    268440910U,	// VUZPq16
    268440919U,	// VUZPq32
    268440928U,	// VUZPq8
    268440936U,	// VZIPd16
    268440945U,	// VZIPd32
    268440954U,	// VZIPd8
    268440936U,	// VZIPq16
    268440945U,	// VZIPq32
    268440954U,	// VZIPq8
    268435466U,	// t2ADCSri
    268440962U,	// t2ADCSrr
    268440962U,	// t2ADCSrs
    2829320208U,	// t2ADCri
    2890072080U,	// t2ADCrr
    3024289808U,	// t2ADCrs
    474158474U,	// t2ADDSri
    474158474U,	// t2ADDSrr
    1413682570U,	// t2ADDSrs
    2890072084U,	// t2ADDrSPi
    413406607U,	// t2ADDrSPi12
    3024289812U,	// t2ADDrSPs
    2890072084U,	// t2ADDri
    2829325711U,	// t2ADDri12
    2890072084U,	// t2ADDrr
    3024289812U,	// t2ADDrs
    2829320254U,	// t2ANDri
    2890072126U,	// t2ANDrr
    3024289854U,	// t2ANDrs
    2890077588U,	// t2ASRri
    2890077588U,	// t2ASRrr
    276829592U,	// t2B
    413401157U,	// t2BFC
    2829320265U,	// t2BICri
    2890072137U,	// t2BICrr
    3024289865U,	// t2BICrs
    341835883U,	// t2BR_JT
    877985927U,	// t2Bcc
    1218707593U,	// t2CLZ
    1279459469U,	// t2CMNri
    1279459469U,	// t2CMNrr
    474153101U,	// t2CMNrs
    1279459469U,	// t2CMNzri
    1279459469U,	// t2CMNzrr
    474153101U,	// t2CMNzrs
    1279459473U,	// t2CMPri
    1279459473U,	// t2CMPrr
    474153105U,	// t2CMPrs
    1279459473U,	// t2CMPzri
    1279459473U,	// t2CMPzrr
    474153105U,	// t2CMPzrs
    2829320347U,	// t2EORri
    2890072219U,	// t2EORrr
    3024289947U,	// t2EORrs
    3087013277U,	// t2IT
    343938464U,	// t2Int_eh_sjlj_setjmp
    3298820592U,	// t2LDM
    3298820592U,	// t2LDM_RET
    1352930732U,	// t2LDRB_POST
    1352930732U,	// t2LDRB_PRE
    474158508U,	// t2LDRBi12
    413406636U,	// t2LDRBi8
    1279464876U,	// t2LDRBpci
    1413682604U,	// t2LDRBs
    413406641U,	// t2LDRDi8
    1218713009U,	// t2LDRDpci
    1352930742U,	// t2LDRH_POST
    1352930742U,	// t2LDRH_PRE
    474158518U,	// t2LDRHi12
    413406646U,	// t2LDRHi8
    1279464886U,	// t2LDRHpci
    1413682614U,	// t2LDRHs
    1352930747U,	// t2LDRSB_POST
    1352930747U,	// t2LDRSB_PRE
    474158523U,	// t2LDRSBi12
    413406651U,	// t2LDRSBi8
    1279464891U,	// t2LDRSBpci
    1413682619U,	// t2LDRSBs
    1352930753U,	// t2LDRSH_POST
    1352930753U,	// t2LDRSH_PRE
    474158529U,	// t2LDRSHi12
    413406657U,	// t2LDRSHi8
    1279464897U,	// t2LDRSHpci
    1413682625U,	// t2LDRSHs
    1352925684U,	// t2LDR_POST
    1352925684U,	// t2LDR_PRE
    474153460U,	// t2LDRi12
    413401588U,	// t2LDRi8
    1279459828U,	// t2LDRpci
    1413677556U,	// t2LDRs
    1280710087U,	// t2LEApcrel
    475403719U,	// t2LEApcrelJT
    2890077643U,	// t2LSLri
    2890077643U,	// t2LSLrr
    2890077647U,	// t2LSRri
    2890077647U,	// t2LSRrr
    1352925694U,	// t2MLA
    1352925698U,	// t2MLS
    1413682580U,	// t2MOVCCasr
    474153478U,	// t2MOVCCi
    1413682635U,	// t2MOVCClsl
    1413682639U,	// t2MOVCClsr
    474153478U,	// t2MOVCCr
    1413682643U,	// t2MOVCCror
    2829325783U,	// t2MOVTi16
    3436642822U,	// t2MOVi
    1218713052U,	// t2MOVi16
    3436642822U,	// t2MOVr
    3436647905U,	// t2MOVrx
    268441061U,	// t2MOVsra_flag
    268441069U,	// t2MOVsrl_flag
    413401610U,	// t2MUL
    3435856398U,	// t2MVNi
    1279459854U,	// t2MVNr
    474153486U,	// t2MVNs
    2829325813U,	// t2ORNri
    2829325813U,	// t2ORNrr
    2963543541U,	// t2ORNrs
    2829320722U,	// t2ORRri
    2890072594U,	// t2ORRrr
    3024290322U,	// t2ORRrs
    1352925718U,	// t2PKHBT
    1352925724U,	// t2PKHTB
    1279459874U,	// t2REV
    1279459878U,	// t2REV16
    1279459884U,	// t2REVSH
    2890077651U,	// t2RORri
    2890077651U,	// t2RORrr
    3489661490U,	// t2RSBSri
    3366191666U,	// t2RSBSrs
    474153522U,	// t2RSBri
    1352925746U,	// t2RSBrs
    268436032U,	// t2SBCSri
    268441081U,	// t2SBCSrr
    268441081U,	// t2SBCSrs
    2829320774U,	// t2SBCri
    2890072646U,	// t2SBCrr
    3024290374U,	// t2SBCrs
    1352925770U,	// t2SMLABB
    1352925777U,	// t2SMLABT
    1352925784U,	// t2SMLAL
    1352925790U,	// t2SMLATB
    1352925797U,	// t2SMLATT
    1352925804U,	// t2SMLAWB
    1352925811U,	// t2SMLAWT
    1352925818U,	// t2SMMLA
    1352925824U,	// t2SMMLS
    413401734U,	// t2SMMUL
    413401740U,	// t2SMULBB
    413401747U,	// t2SMULBT
    1352925850U,	// t2SMULL
    413401760U,	// t2SMULTB
    413401767U,	// t2SMULTT
    413401774U,	// t2SMULWB
    413401781U,	// t2SMULWT
    3298820796U,	// t2STM
    1352668673U,	// t2STRB_POST
    1352668673U,	// t2STRB_PRE
    474158593U,	// t2STRBi12
    413406721U,	// t2STRBi8
    1413682689U,	// t2STRBs
    413406726U,	// t2STRDi8
    1352668683U,	// t2STRH_POST
    1352668683U,	// t2STRH_PRE
    474158603U,	// t2STRHi12
    413406731U,	// t2STRHi8
    1413682699U,	// t2STRHs
    1352663744U,	// t2STR_POST
    1352663744U,	// t2STR_PRE
    474153664U,	// t2STRi12
    413401792U,	// t2STRi8
    1413677760U,	// t2STRs
    474158608U,	// t2SUBSri
    474158608U,	// t2SUBSrr
    1413682704U,	// t2SUBSrs
    2890072772U,	// t2SUBrSPi
    413406741U,	// t2SUBrSPi12
    268441114U,	// t2SUBrSPi12_
    268441122U,	// t2SUBrSPi_
    2963538628U,	// t2SUBrSPs
    268441131U,	// t2SUBrSPs_
    2890072772U,	// t2SUBri
    2829325845U,	// t2SUBri12
    2890072772U,	// t2SUBrr
    3024290500U,	// t2SUBrs
    413401800U,	// t2SXTABrr
    1352925896U,	// t2SXTABrr_rot
    413401806U,	// t2SXTAHrr
    1352925902U,	// t2SXTAHrr_rot
    1279460052U,	// t2SXTBr
    474153684U,	// t2SXTBr_rot
    1279460057U,	// t2SXTHr
    474153689U,	// t2SXTHr_rot
    3623884338U,	// t2TBB
    3623884343U,	// t2TBH
    1279460062U,	// t2TEQri
    1279460062U,	// t2TEQrr
    474153694U,	// t2TEQrs
    134218466U,	// t2TPsoft
    1279460085U,	// t2TSTri
    1279460085U,	// t2TSTrr
    474153717U,	// t2TSTrs
    1352925945U,	// t2UMAAL
    1352925951U,	// t2UMLAL
    1352925957U,	// t2UMULL
    413401867U,	// t2UXTABrr
    1352925963U,	// t2UXTABrr_rot
    413401873U,	// t2UXTAHrr
    1352925969U,	// t2UXTAHrr_rot
    1279460119U,	// t2UXTB16r
    474153751U,	// t2UXTB16r_rot
    1279460126U,	// t2UXTBr
    474153758U,	// t2UXTBr_rot
    1279460131U,	// t2UXTHr
    474153763U,	// t2UXTHr_rot
    3841458192U,	// tADC
    413401108U,	// tADDhirr
    3840016404U,	// tADDi3
    3841458196U,	// tADDi8
    352327228U,	// tADDrPCi
    268572220U,	// tADDrSP
    268441148U,	// tADDrSPi
    3840016404U,	// tADDrr
    268572220U,	// tADDspi
    268572220U,	// tADDspr
    268572225U,	// tADDspr_
    276829768U,	// tADJCALLSTACKDOWN
    276829789U,	// tADJCALLSTACKUP
    3841458238U,	// tAND
    268572272U,	// tANDsp
    3840021908U,	// tASRri
    3841463700U,	// tASRrr
    276829815U,	// tB
    3841458249U,	// tBIC
    671088717U,	// tBL
    671088721U,	// tBLXi
    671088721U,	// tBLXi_r9
    276824145U,	// tBLXr
    276824145U,	// tBLXr_r9
    671088717U,	// tBLr9
    354418795U,	// tBR_JTr
    276824180U,	// tBX
    134223484U,	// tBX_RET
    276829826U,	// tBX_RET_vararg
    276824180U,	// tBXr9
    894763143U,	// tBcc
    358613069U,	// tBfar
    1218707597U,	// tCMN
    1218707597U,	// tCMNZ
    1218707601U,	// tCMPhir
    1218707601U,	// tCMPi8
    1218707601U,	// tCMPr
    1218707601U,	// tCMPzhir
    1218707601U,	// tCMPzi8
    1218707601U,	// tCMPzr
    3841458331U,	// tEOR
    3233350128U,	// tLDM
    1352925684U,	// tLDR
    1352930732U,	// tLDRB
    1352930742U,	// tLDRH
    413406651U,	// tLDRSB
    413406657U,	// tLDRSH
    1218707956U,	// tLDRcp
    1296237044U,	// tLDRpci
    413401588U,	// tLDRspi
    1218713031U,	// tLEApcrel
    413406663U,	// tLEApcrelJT
    3840021963U,	// tLSLri
    3841463755U,	// tLSLrr
    3840021967U,	// tLSRri
    3841463759U,	// tLSRrr
    413401606U,	// tMOVCCi
    413401606U,	// tMOVCCr
    411047558U,	// tMOVCCr_pseudo
    268441233U,	// tMOVSr
    268441239U,	// tMOVgpr2gpr
    268441239U,	// tMOVgpr2tgpr
    3851747846U,	// tMOVi8
    268441239U,	// tMOVr
    268441239U,	// tMOVtgpr2gpr
    3841458698U,	// tMUL
    3851747854U,	// tMVN
    3841458706U,	// tORR
    2107637761U,	// tPICADD
    1085937308U,	// tPOP
    1085937308U,	// tPOP_RET
    1085937312U,	// tPUSH
    1218708002U,	// tREV
    1218708006U,	// tREV16
    1218708012U,	// tREVSH
    3841463763U,	// tROR
    3852141106U,	// tRSB
    413401588U,	// tRestore
    3841458758U,	// tSBC
    3233350332U,	// tSTM
    1352925888U,	// tSTR
    1352930817U,	// tSTRB
    1352930827U,	// tSTRH
    413401792U,	// tSTRspi
    3840017092U,	// tSUBi3
    3841458884U,	// tSUBi8
    3840017092U,	// tSUBrr
    268572325U,	// tSUBspi
    268572203U,	// tSUBspi_
    1218708180U,	// tSXTB
    1218708185U,	// tSXTH
    413401792U,	// tSpill
    134218466U,	// tTPsoft
    1218708213U,	// tTST
    1218708254U,	// tUXTB
    1218708259U,	// tUXTH
    0U
  };

  const char *AsmStrs = 
    "\000\000PHINODE\000adcs \000adc\000add\000@ ADJCALLSTACKDOWN \000@ ADJC"
    "ALLSTACKUP \000and\000b \000bfc\000bic\000bl \000blx \000bl\000add pc, "
    "\000ldr pc, \000mov pc, \000mov lr, pc\n\tbx \000bx\000b\000clz\000cmn\000"
    "cmp\000.loc \000eor\000fabsd\000fabss\000faddd\000fadds\000fcmped\000fc"
    "mpes\000fcmpezd\000fcmpezs\000fcpyd\000fcpys\000fcvtds\000fcvtsd\000fdi"
    "vd\000fdivs\000fldd\000fldm\000flds\000fmacd\000fmacs\000fmdrr\000fmrrd"
    "\000fmrs\000fmscd\000fmscs\000fmsr\000fmstat\000fmuld\000fmuls\000fnegd"
    "\000fnegs\000fnmacd\000fnmacs\000fnmscd\000fnmscs\000fnmuld\000fnmuls\000"
    "fsitod\000fsitos\000fsqrtd\000fsqrts\000fstd\000fstm\000fsts\000fsubd\000"
    "fsubs\000ftosizd\000ftosizs\000ftouizd\000ftouizs\000fuitod\000fuitos\000"
    "str sp, [\000ldm\000ldr\000.set \000mla\000mls\000mov\000mul\000mvn\000"
    "orr\000pkhbt\000pkhtb\000rev\000rev16\000revsh\000rsb\000rscs \000rsc\000"
    "sbcs \000sbc\000smlabb\000smlabt\000smlal\000smlatb\000smlatt\000smlawb"
    "\000smlawt\000smmla\000smmls\000smmul\000smulbb\000smulbt\000smull\000s"
    "multb\000smultt\000smulwb\000smulwt\000stm\000str\000sub\000sxtab\000sx"
    "tah\000sxtb\000sxth\000teq\000bl __aeabi_read_tp\000tst\000umaal\000uml"
    "al\000umull\000uxtab\000uxtah\000uxtb16\000uxtb\000uxth\000vabal.s32\t\000"
    "vabal.s16\t\000vabal.s8\t\000vabal.u32\t\000vabal.u16\t\000vabal.u8\t\000"
    "vaba.s8\t\000vaba.s32\t\000vaba.s16\t\000vaba.u8\t\000vaba.u32\t\000vab"
    "a.u16\t\000vabdl.s32\t\000vabdl.s16\t\000vabdl.s8\t\000vabdl.u32\t\000v"
    "abdl.u16\t\000vabdl.u8\t\000vabd.f32\t\000vabd.s8\t\000vabd.s32\t\000va"
    "bd.s16\t\000vabd.u8\t\000vabd.u32\t\000vabd.u16\t\000vabs.f32\t\000vabs"
    ".s8\t\000vabs.s32\t\000vabs.s16\t\000vacge.f32\t\000vacgt.f32\t\000vadd"
    "hn.i64\t\000vaddhn.i32\t\000vaddhn.i16\t\000vaddl.s32\t\000vaddl.s16\t\000"
    "vaddl.s8\t\000vaddl.u32\t\000vaddl.u16\t\000vaddl.u8\t\000vaddw.s32\t\000"
    "vaddw.s16\t\000vaddw.s8\t\000vaddw.u32\t\000vaddw.u16\t\000vaddw.u8\t\000"
    "vadd.f32\t\000vadd.i8\t\000vadd.i64\t\000vadd.i32\t\000vadd.i16\t\000va"
    "nd\t\000vbic\t\000vbsl\t\000vceq.f32\t\000vceq.i8\t\000vceq.i32\t\000vc"
    "eq.i16\t\000vcge.f32\t\000vcge.s8\t\000vcge.s32\t\000vcge.s16\t\000vcge"
    ".u8\t\000vcge.u32\t\000vcge.u16\t\000vcgt.f32\t\000vcgt.s8\t\000vcgt.s3"
    "2\t\000vcgt.s16\t\000vcgt.u8\t\000vcgt.u32\t\000vcgt.u16\t\000vcls.s8\t"
    "\000vcls.s32\t\000vcls.s16\t\000vclz.i8\t\000vclz.i32\t\000vclz.i16\t\000"
    "vcnt.8\t\000vcvt.s32.f32\t\000vcvt.u32.f32\t\000vcvt.f32.s32\t\000vcvt."
    "f32.u32\t\000vdup\000vdup.16\t\000vdup.32\t\000vdup.8\t\000veor\t\000ve"
    "xt.16\t\000vext.32\t\000vext.8\t\000vmov\000vhadd.s8\t\000vhadd.s32\t\000"
    "vhadd.s16\t\000vhadd.u8\t\000vhadd.u32\t\000vhadd.u16\t\000vhsub.s8\t\000"
    "vhsub.s32\t\000vhsub.s16\t\000vhsub.u8\t\000vhsub.u32\t\000vhsub.u16\t\000"
    "vld1.16\t{\000vld1.32\t{\000vld1.64\t{\000vld1.8\t{\000vld1.16\t\000vld"
    "1.32\t\000vld1.64\t\000vld1.8\t\000vld2.16\t{\000vld2.32\t{\000vld2.8\t"
    "{\000vld3.16\t{\000vld3.32\t{\000vld3.8\t{\000vld4.16\t{\000vld4.32\t{\000"
    "vld4.8\t{\000vldmia \000vmax.f32\t\000vmax.s8\t\000vmax.s32\t\000vmax.s"
    "16\t\000vmax.u8\t\000vmax.u32\t\000vmax.u16\t\000vmin.f32\t\000vmin.s8\t"
    "\000vmin.s32\t\000vmin.s16\t\000vmin.u8\t\000vmin.u32\t\000vmin.u16\t\000"
    "vmlal.s32\t\000vmlal.s16\t\000vmlal.s8\t\000vmlal.u32\t\000vmlal.u16\t\000"
    "vmlal.u8\t\000vmla.f32\t\000vmla.i8\t\000vmla.i32\t\000vmla.i16\t\000vm"
    "lsl.s32\t\000vmlsl.s16\t\000vmlsl.s8\t\000vmlsl.u32\t\000vmlsl.u16\t\000"
    "vmlsl.u8\t\000vmls.f32\t\000vmls.i8\t\000vmls.i32\t\000vmls.i16\t\000vm"
    "ov\t\000vmovl.s32\t\000vmovl.s16\t\000vmovl.s8\t\000vmovl.u32\t\000vmov"
    "l.u16\t\000vmovl.u8\t\000vmovn.i64\t\000vmovn.i32\t\000vmovn.i16\t\000v"
    "mov.i8\t\000vmov.i64\t\000vmov.i32\t\000vmov.i16\t\000vmull.p8\t\000vmu"
    "ll.s32\t\000vmull.s16\t\000vmull.s8\t\000vmull.u32\t\000vmull.u16\t\000"
    "vmull.u8\t\000vmul.f32\t\000vmul.p8\t\000vmul.i8\t\000vmul.i32\t\000vmu"
    "l.i16\t\000vmvn\t\000vneg.f32\t\000vneg.s16\t\000vneg.s32\t\000vneg.s8\t"
    "\000vorn\t\000vorr\t\000vpadal.s8\t\000vpadal.s32\t\000vpadal.s16\t\000"
    "vpadal.u8\t\000vpadal.u32\t\000vpadal.u16\t\000vpaddl.s8\t\000vpaddl.s3"
    "2\t\000vpaddl.s16\t\000vpaddl.u8\t\000vpaddl.u32\t\000vpaddl.u16\t\000v"
    "padd.f32\t\000vpadd.i16\t\000vpadd.i32\t\000vpadd.i8\t\000vpmax.f32\t\000"
    "vpmax.s16\t\000vpmax.s32\t\000vpmax.s8\t\000vpmax.u16\t\000vpmax.u32\t\000"
    "vpmax.u8\t\000vpmin.f32\t\000vpmin.s16\t\000vpmin.s32\t\000vpmin.s8\t\000"
    "vpmin.u16\t\000vpmin.u32\t\000vpmin.u8\t\000vqabs.s8\t\000vqabs.s32\t\000"
    "vqabs.s16\t\000vqadd.s8\t\000vqadd.s64\t\000vqadd.s32\t\000vqadd.s16\t\000"
    "vqadd.u8\t\000vqadd.u64\t\000vqadd.u32\t\000vqadd.u16\t\000vqdmlal.s32\t"
    "\000vqdmlal.s16\t\000vqdmlsl.s32\t\000vqdmlsl.s16\t\000vqdmulh.s32\t\000"
    "vqdmulh.s16\t\000vqdmull.s32\t\000vqdmull.s16\t\000vqmovun.s64\t\000vqm"
    "ovun.s32\t\000vqmovun.s16\t\000vqmovn.s64\t\000vqmovn.s32\t\000vqmovn.s"
    "16\t\000vqmovn.u64\t\000vqmovn.u32\t\000vqmovn.u16\t\000vqneg.s8\t\000v"
    "qneg.s32\t\000vqneg.s16\t\000vqrdmulh.s32\t\000vqrdmulh.s16\t\000vqrshl"
    ".s8\t\000vqrshl.s64\t\000vqrshl.s32\t\000vqrshl.s16\t\000vqrshl.u8\t\000"
    "vqrshl.u64\t\000vqrshl.u32\t\000vqrshl.u16\t\000vqrshrn.s16\t\000vqrshr"
    "n.s32\t\000vqrshrn.s64\t\000vqrshrn.u16\t\000vqrshrn.u32\t\000vqrshrn.u"
    "64\t\000vqrshrun.s16\t\000vqrshrun.s32\t\000vqrshrun.s64\t\000vqshl.s8\t"
    "\000vqshl.s64\t\000vqshl.s32\t\000vqshl.s16\t\000vqshlu.s8\t\000vqshlu."
    "s64\t\000vqshlu.s32\t\000vqshlu.s16\t\000vqshl.u8\t\000vqshl.u64\t\000v"
    "qshl.u32\t\000vqshl.u16\t\000vqshrn.s16\t\000vqshrn.s32\t\000vqshrn.s64"
    "\t\000vqshrn.u16\t\000vqshrn.u32\t\000vqshrn.u64\t\000vqshrun.s16\t\000"
    "vqshrun.s32\t\000vqshrun.s64\t\000vqsub.s8\t\000vqsub.s64\t\000vqsub.s3"
    "2\t\000vqsub.s16\t\000vqsub.u8\t\000vqsub.u64\t\000vqsub.u32\t\000vqsub"
    ".u16\t\000vraddhn.i64\t\000vraddhn.i32\t\000vraddhn.i16\t\000vrecpe.u32"
    "\t\000vrecpe.f32\t\000vrecps.f32\t\000vrev16.8\t\000vrev32.16\t\000vrev"
    "32.8\t\000vrev64.16\t\000vrev64.32\t\000vrev64.8\t\000vrhadd.s8\t\000vr"
    "hadd.s32\t\000vrhadd.s16\t\000vrhadd.u8\t\000vrhadd.u32\t\000vrhadd.u16"
    "\t\000vrshl.s8\t\000vrshl.s64\t\000vrshl.s32\t\000vrshl.s16\t\000vrshl."
    "u8\t\000vrshl.u64\t\000vrshl.u32\t\000vrshl.u16\t\000vrshrn.i16\t\000vr"
    "shrn.i32\t\000vrshrn.i64\t\000vrshr.s8\t\000vrshr.s64\t\000vrshr.s32\t\000"
    "vrshr.s16\t\000vrshr.u8\t\000vrshr.u64\t\000vrshr.u32\t\000vrshr.u16\t\000"
    "vrsqrte.u32\t\000vrsqrte.f32\t\000vrsqrts.f32\t\000vrsra.s8\t\000vrsra."
    "s64\t\000vrsra.s32\t\000vrsra.s16\t\000vrsra.u8\t\000vrsra.u64\t\000vrs"
    "ra.u32\t\000vrsra.u16\t\000vrsubhn.i64\t\000vrsubhn.i32\t\000vrsubhn.i1"
    "6\t\000vshll.i16\t\000vshll.i32\t\000vshll.i8\t\000vshll.s16\t\000vshll"
    ".s32\t\000vshll.s8\t\000vshll.u16\t\000vshll.u32\t\000vshll.u8\t\000vsh"
    "l.i8\t\000vshl.i64\t\000vshl.i32\t\000vshl.i16\t\000vshl.s8\t\000vshl.s"
    "64\t\000vshl.s32\t\000vshl.s16\t\000vshl.u8\t\000vshl.u64\t\000vshl.u32"
    "\t\000vshl.u16\t\000vshrn.i16\t\000vshrn.i32\t\000vshrn.i64\t\000vshr.s"
    "8\t\000vshr.s64\t\000vshr.s32\t\000vshr.s16\t\000vshr.u8\t\000vshr.u64\t"
    "\000vshr.u32\t\000vshr.u16\t\000vsli.8\t\000vsli.64\t\000vsli.32\t\000v"
    "sli.16\t\000vsra.s8\t\000vsra.s64\t\000vsra.s32\t\000vsra.s16\t\000vsra"
    ".u8\t\000vsra.u64\t\000vsra.u32\t\000vsra.u16\t\000vsri.8\t\000vsri.64\t"
    "\000vsri.32\t\000vsri.16\t\000vst1.16\t{\000vst1.32\t{\000vst1.64\t{\000"
    "vst1.8\t{\000vst1.16\t\000vst1.32\t\000vst1.64\t\000vst1.8\t\000vst2.16"
    "\t{\000vst2.32\t{\000vst2.8\t{\000vst3.16\t{\000vst3.32\t{\000vst3.8\t{"
    "\000vst4.16\t{\000vst4.32\t{\000vst4.8\t{\000vstmia \000vsubhn.i64\t\000"
    "vsubhn.i32\t\000vsubhn.i16\t\000vsubl.s32\t\000vsubl.s16\t\000vsubl.s8\t"
    "\000vsubl.u32\t\000vsubl.u16\t\000vsubl.u8\t\000vsubw.s32\t\000vsubw.s1"
    "6\t\000vsubw.s8\t\000vsubw.u32\t\000vsubw.u16\t\000vsubw.u8\t\000vsub.f"
    "32\t\000vsub.i8\t\000vsub.i64\t\000vsub.i32\t\000vsub.i16\t\000vtbl.8\t"
    "\000vtbx.8\t\000vtrn.16\t\000vtrn.32\t\000vtrn.8\t\000vtst.i8\t\000vtst"
    ".i32\t\000vtst.i16\t\000vuzp.16\t\000vuzp.32\t\000vuzp.8\t\000vzip.16\t"
    "\000vzip.32\t\000vzip.8\t\000adcs.w \000adds\000addw\000asr\000b.w \000"
    "it\000str.w sp, [\000ldrb\000ldrd\000ldrh\000ldrsb\000ldrsh\000adr\000l"
    "sl\000lsr\000ror\000movt\000movw\000rrx\000asrs.w \000lsrs.w \000orn\000"
    "sbcs.w \000strb\000strd\000strh\000subs\000subw\000@ subw \000@ sub.w \000"
    "@ sub \000tbb \000tbh \000add \000@ add \000@ tADJCALLSTACKDOWN \000@ t"
    "ADJCALLSTACKUP \000@ and \000b.n \000bx lr\000bx \000@ tMOVCCr \000movs"
    " \000mov \000pop\000push\000sub \000";

  processDebugLoc(MI->getDebugLoc());


#ifndef NO_ASM_WRITER_BOILERPLATE
  if (MI->getOpcode() == TargetInstrInfo::INLINEASM) {
    O << "\t";
    printInlineAsm(MI);
    return;
  } else if (MI->isLabel()) {
    printLabel(MI);
    return;
  } else if (MI->getOpcode() == TargetInstrInfo::DECLARE) {
    printDeclare(MI);
    return;
  } else if (MI->getOpcode() == TargetInstrInfo::IMPLICIT_DEF) {
    printImplicitDef(MI);
    return;
  }


#endif
  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 8191);


  // Fragment 0 encoded into 5 bits for 29 unique commands.
  switch ((Bits >> 27) & 31) {
  default:   // unreachable.
  case 0:
    return;
    break;
  case 1:
    // PHI, TPsoft, t2TPsoft, tBX_RET, tTPsoft
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // ADCSri, ADCSrr, ADCSrs, ADJCALLSTACKDOWN, ADJCALLSTACKUP, B, BLX, BLXr...
    printOperand(MI, 0); 
    break;
  case 3:
    // ADCri, ADCrr, ADDSri, ADDSrr, ADDri, ADDrr, ANDri, ANDrr, BFC, BICri, ...
    printPredicateOperand(MI, 3); 
    break;
  case 4:
    // ADCrs, ADDSrs, ADDrs, ANDrs, BICrs, EORrs, LDRB_POST, LDRB_PRE, LDRD, ...
    printPredicateOperand(MI, 5); 
    break;
  case 5:
    // BL, BLr9, tBL, tBLXi, tBLXi_r9, tBLr9
    printOperand(MI, 0, "call"); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 6:
    // BL_pred, BLr9_pred, Bcc, FCMPEZD, FCMPEZS, t2Bcc, tBcc
    printPredicateOperand(MI, 1); 
    break;
  case 7:
    // BR_JTm
    printAddrMode2Operand(MI, 0); 
    O << " \n"; 
    printJTBlockOperand(MI, 3); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 8:
    // BX_RET, FMSTAT, tPOP, tPOP_RET, tPUSH
    printPredicateOperand(MI, 0); 
    break;
  case 9:
    // CLZ, CMNri, CMNrr, CMNzri, CMNzrr, CMPri, CMPrr, CMPzri, CMPzrr, FABSD...
    printPredicateOperand(MI, 2); 
    break;
  case 10:
    // CMNrs, CMNzrs, CMPrs, CMPzrs, FMACD, FMACS, FMSCD, FMSCS, FNMACD, FNMA...
    printPredicateOperand(MI, 4); 
    break;
  case 11:
    // CONSTPOOL_ENTRY
    printCPInstOperand(MI, 0, "label"); 
    O << ' '; 
    printCPInstOperand(MI, 1, "cpentry"); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 12:
    // DWARF_LOC
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 13:
    // FLDMD, FLDMS, FSTMD, FSTMS
    printAddrMode5Operand(MI, 0, "submode"); 
    break;
  case 14:
    // LEApcrel, LEApcrelJT
    PrintSpecial(MI, "private"); 
    O << "PCRELV"; 
    PrintSpecial(MI, "uid"); 
    O << ", ("; 
    printOperand(MI, 1); 
    break;
  case 15:
    // PICADD, tPICADD
    printPCLabel(MI, 2); 
    break;
  case 16:
    // PICLDR, PICLDRB, PICLDRH, PICLDRSB, PICLDRSH, PICSTR, PICSTRB, PICSTRH
    printAddrModePCOperand(MI, 1, "label"); 
    break;
  case 17:
    // VLD1q16, VLD1q32, VLD1q64, VLD1q8, VLD1qf
    printOperand(MI, 0, "dregpair"); 
    O << ", "; 
    printAddrMode6Operand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 18:
    // VLDRQ, VSTRQ
    printAddrMode4Operand(MI, 1); 
    O << ", "; 
    printOperand(MI, 0, "dregpair"); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 19:
    // VST1d16, VST1d32, VST1d64, VST1d8, VST1df, VST2d16, VST2d32, VST2d8, V...
    printOperand(MI, 3); 
    break;
  case 20:
    // VST1q16, VST1q32, VST1q64, VST1q8, VST1qf
    printOperand(MI, 3, "dregpair"); 
    O << ", "; 
    printAddrMode6Operand(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 21:
    // t2ADCri, t2ADCrr, t2ADDrSPi, t2ADDri, t2ADDri12, t2ADDrr, t2ANDri, t2A...
    printSBitModifierOperand(MI, 5); 
    printPredicateOperand(MI, 3); 
    break;
  case 22:
    // t2ADCrs, t2ADDrSPs, t2ADDrs, t2ANDrs, t2BICrs, t2EORrs, t2ORNrs, t2ORR...
    printSBitModifierOperand(MI, 6); 
    printPredicateOperand(MI, 4); 
    break;
  case 23:
    // t2IT
    printThumbITMask(MI, 1); 
    O << ' '; 
    printPredicateOperand(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 24:
    // t2LDM, t2LDM_RET, t2STM, tLDM, tSTM
    printAddrMode4Operand(MI, 0, "submode"); 
    printPredicateOperand(MI, 2); 
    break;
  case 25:
    // t2MOVi, t2MOVr, t2MOVrx, t2MVNi, t2RSBSrs
    printSBitModifierOperand(MI, 4); 
    break;
  case 26:
    // t2RSBSri
    printSBitModifierOperand(MI, 3); 
    O << ".w "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 27:
    // t2TBB, t2TBH
    printTBAddrMode(MI, 0); 
    O << "\n"; 
    printJT2BlockOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 28:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printSBitModifierOperand(MI, 1); 
    break;
  }


  // Fragment 1 encoded into 6 bits for 46 unique commands.
  switch ((Bits >> 21) & 63) {
  default:   // unreachable.
  case 0:
    // ADCSri, ADCSrr, ADCSrs, BR_JTadd, RSCSri, RSCSrs, SBCSri, SBCSrr, SBCS...
    O << ", "; 
    break;
  case 1:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, BICri, BICrr, EORri, EORrr, ...
    printSBitModifierOperand(MI, 5); 
    O << ' '; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    break;
  case 2:
    // ADCrs, ADDrs, ANDrs, BICrs, EORrs, ORRrs, RSBrs, RSCrs, SBCrs, SUBrs
    printSBitModifierOperand(MI, 7); 
    O << ' '; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printSORegOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 3:
    // ADDSri, ADDSrr, ADDSrs, MOVsra_flag, MOVsrl_flag, RSBSri, RSBSrs, SUBS...
    O << "s "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    break;
  case 4:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, B, BLX, BLXr9, BX, BXr9, FMSTAT, t2B...
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 5:
    // BFC, BL_pred, BLr9_pred, Bcc, CLZ, CMNri, CMNrr, CMNrs, CMNzri, CMNzrr...
    O << ' '; 
    break;
  case 6:
    // BR_JTr
    O << " \n"; 
    printJTBlockOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 7:
    // BX_RET
    O << " lr"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 8:
    // FLDMD, FSTMD
    O << 'd'; 
    printPredicateOperand(MI, 2); 
    O << ' '; 
    printAddrMode5Operand(MI, 0, "base"); 
    O << ", "; 
    printRegisterList(MI, 4); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 9:
    // FLDMS, FSTMS
    O << 's'; 
    printPredicateOperand(MI, 2); 
    O << ' '; 
    printAddrMode5Operand(MI, 0, "base"); 
    O << ", "; 
    printRegisterList(MI, 4); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 10:
    // Int_eh_sjlj_setjmp
    O << ", #+8] @ eh_setjmp begin\n\tadd r12, pc, #8\n\tstr r12, ["; 
    printOperand(MI, 0); 
    O << ", #+4]\n\tmov r0, #0\n\tadd pc, pc, #0\n\tmov r0, #1 @ eh_setjmp end"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 11:
    // LDM, LDM_RET, STM
    printAddrMode4Operand(MI, 0, "submode"); 
    O << ' '; 
    printAddrMode4Operand(MI, 0); 
    O << ", "; 
    printRegisterList(MI, 4); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 12:
    // LDRB, LDRB_POST, LDRB_PRE, STRB, STRB_POST, STRB_PRE
    O << "b "; 
    break;
  case 13:
    // LDRD, STRD
    O << "d "; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrMode3Operand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 14:
    // LDRH, LDRH_POST, LDRH_PRE, STRH, STRH_POST, STRH_PRE
    O << "h "; 
    break;
  case 15:
    // LDRSB, LDRSB_POST, LDRSB_PRE
    O << "sb "; 
    printOperand(MI, 0); 
    break;
  case 16:
    // LDRSH, LDRSH_POST, LDRSH_PRE
    O << "sh "; 
    printOperand(MI, 0); 
    break;
  case 17:
    // LEApcrel
    O << "-("; 
    PrintSpecial(MI, "private"); 
    O << "PCRELL"; 
    PrintSpecial(MI, "uid"); 
    O << "+8))\n"; 
    PrintSpecial(MI, "private"); 
    O << "PCRELL"; 
    PrintSpecial(MI, "uid"); 
    O << ":\n\tadd"; 
    printPredicateOperand(MI, 2); 
    O << ' '; 
    printOperand(MI, 0); 
    O << ", pc, #"; 
    PrintSpecial(MI, "private"); 
    O << "PCRELV"; 
    PrintSpecial(MI, "uid"); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 18:
    // LEApcrelJT
    O << '_'; 
    printNoHashImmediate(MI, 2); 
    O << "-("; 
    PrintSpecial(MI, "private"); 
    O << "PCRELL"; 
    PrintSpecial(MI, "uid"); 
    O << "+8))\n"; 
    PrintSpecial(MI, "private"); 
    O << "PCRELL"; 
    PrintSpecial(MI, "uid"); 
    O << ":\n\tadd"; 
    printPredicateOperand(MI, 3); 
    O << ' '; 
    printOperand(MI, 0); 
    O << ", pc, #"; 
    PrintSpecial(MI, "private"); 
    O << "PCRELV"; 
    PrintSpecial(MI, "uid"); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 19:
    // MLA, MOVs, MVNs, SMLAL, SMULL, UMLAL, UMULL
    printSBitModifierOperand(MI, 6); 
    O << ' '; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 20:
    // MOVi, MOVr, MOVrx, MVNi, MVNr
    printSBitModifierOperand(MI, 4); 
    O << ' '; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 21:
    // PICADD
    O << ":\n\tadd"; 
    printPredicateOperand(MI, 3); 
    O << ' '; 
    printOperand(MI, 0); 
    O << ", pc, "; 
    printOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 22:
    // PICLDR, PICLDRB, PICLDRH, PICLDRSB, PICLDRSH
    O << ":\n\tldr"; 
    printPredicateOperand(MI, 3); 
    break;
  case 23:
    // PICSTR, PICSTRB, PICSTRH
    O << ":\n\tstr"; 
    printPredicateOperand(MI, 3); 
    break;
  case 24:
    // VDUP16d, VDUP16q, VSETLNi16
    O << ".16\t"; 
    printOperand(MI, 0); 
    break;
  case 25:
    // VDUP32d, VDUP32q, VDUPfd, VDUPfq, VGETLNi32, VSETLNi32
    O << ".32\t"; 
    printOperand(MI, 0); 
    break;
  case 26:
    // VDUP8d, VDUP8q, VSETLNi8
    O << ".8\t"; 
    printOperand(MI, 0); 
    break;
  case 27:
    // VGETLNs16
    O << ".s16\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << '['; 
    printNoHashImmediate(MI, 2); 
    O << ']'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 28:
    // VGETLNs8
    O << ".s8\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << '['; 
    printNoHashImmediate(MI, 2); 
    O << ']'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 29:
    // VGETLNu16
    O << ".u16\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << '['; 
    printNoHashImmediate(MI, 2); 
    O << ']'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 30:
    // VGETLNu8
    O << ".u8\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << '['; 
    printNoHashImmediate(MI, 2); 
    O << ']'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 31:
    // VLD1d16, VLD1d32, VLD1d64, VLD1d8, VLD1df, VST1d16, VST1d32, VST1d64, ...
    O << "}, "; 
    break;
  case 32:
    // VLD2d16, VLD2d32, VLD2d8, VLD3d16, VLD3d32, VLD3d8, VLD4d16, VLD4d32, ...
    O << ','; 
    break;
  case 33:
    // VTBL1, VTBL2, VTBL3, VTBL4, VTBX1, VTBX2, VTBX3, VTBX4
    O << ", {"; 
    break;
  case 34:
    // t2ADCrr, t2ADCrs, t2ADDSri, t2ADDSrr, t2ADDSrs, t2ADDrSPi, t2ADDrSPs, ...
    O << ".w "; 
    printOperand(MI, 0); 
    break;
  case 35:
    // t2BR_JT
    O << "\n"; 
    printJT2BlockOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 36:
    // t2Int_eh_sjlj_setjmp
    O << ", #+8] @ eh_setjmp begin\n\tadr r12, 0f\n\torr r12, #1\n\tstr.w r12, ["; 
    printOperand(MI, 0); 
    O << ", #+4]\n\tmovs r0, #0\n\tb 1f\n0:\tmovs r0, #1 @ eh_setjmp end\n1:"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 37:
    // t2LDM, t2LDM_RET, t2STM
    printAddrMode4Operand(MI, 0, "wide"); 
    O << ' '; 
    printAddrMode4Operand(MI, 0); 
    O << ", "; 
    printRegisterList(MI, 4); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 38:
    // t2MOVi, t2MOVr, t2MOVrx, t2MVNi
    printPredicateOperand(MI, 2); 
    break;
  case 39:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printPredicateOperand(MI, 4); 
    O << ' '; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 40:
    // tADDrPCi
    O << ", pc, "; 
    printOperand(MI, 1); 
    O << " * 4"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 41:
    // tBR_JTr
    O << "\n\t.align\t2\n"; 
    printJTBlockOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 42:
    // tBcc, tLDRpci
    O << ".n "; 
    printOperand(MI, 0); 
    break;
  case 43:
    // tBfar
    O << "\t@ far jump"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 44:
    // tMOVi8, tMVN, tRSB
    printPredicateOperand(MI, 3); 
    O << ' '; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 2); 
    break;
  case 45:
    // tPICADD
    O << ":\n\tadd "; 
    printOperand(MI, 0); 
    O << ", pc"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 28 unique commands.
  switch ((Bits >> 16) & 31) {
  default:   // unreachable.
  case 0:
    // ADCSri, ADCSrr, ADCSrs, BR_JTadd, MLA, MOVr, MOVrx, MVNr, RSCSri, RSCS...
    printOperand(MI, 1); 
    break;
  case 1:
    // ADCri, ADDri, ANDri, BICri, EORri, ORRri, RSBri, RSCri, SBCri, SUBri
    printSOImmOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // ADCrr, ADDrr, ANDrr, BICrr, EORrr, MUL, ORRrr, SBCrr, SUBrr, VABALsv2i...
    printOperand(MI, 2); 
    break;
  case 3:
    // ADDSri, ADDSrr, ADDSrs, LDRSB, LDRSB_PRE, LDRSH, LDRSH_PRE, RSBSri, RS...
    O << ", "; 
    break;
  case 4:
    // BFC, Bcc, CLZ, CMNri, CMNrr, CMNrs, CMNzri, CMNzrr, CMNzrs, CMPri, CMP...
    printOperand(MI, 0); 
    break;
  case 5:
    // BL_pred, BLr9_pred
    printOperand(MI, 0, "call"); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 6:
    // LDRSB_POST, LDRSH_POST
    O << ", ["; 
    printOperand(MI, 2); 
    O << "], "; 
    printAddrMode3OffsetOperand(MI, 3); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 7:
    // MOVi, MVNi
    printSOImmOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 8:
    // MOVs, MVNs
    printSORegOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 9:
    // MOVsra_flag
    O << ", asr #1"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 10:
    // MOVsrl_flag
    O << ", lsr #1"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 11:
    // PICLDR, PICSTR, t2MVNi
    O << ' '; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 12:
    // PICLDRB, PICSTRB
    O << "b "; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrModePCOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 13:
    // PICLDRH, PICSTRH
    O << "h "; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrModePCOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 14:
    // PICLDRSB
    O << "sb "; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrModePCOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 15:
    // PICLDRSH
    O << "sh "; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrModePCOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 16:
    // VDUPfdf, VDUPfqf
    printOperand(MI, 1, "lane"); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 17:
    // VLD1d16, VLD1d32, VLD1d64, VLD1d8, VLD1df
    printAddrMode6Operand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 18:
    // VSETLNi16, VSETLNi32, VSETLNi8
    O << '['; 
    printNoHashImmediate(MI, 3); 
    O << "], "; 
    printOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 19:
    // VST1d16, VST1d32, VST1d64, VST1d8, VST1df
    printAddrMode6Operand(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 20:
    // VST2d16, VST2d32, VST2d8, VST3d16, VST3d32, VST3d8, VST4d16, VST4d32, ...
    printOperand(MI, 4); 
    break;
  case 21:
    // t2Bcc, tBcc, tMOVi8, tMVN
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 22:
    // t2LEApcrel, t2LEApcrelJT
    O << ", #"; 
    printOperand(MI, 1); 
    break;
  case 23:
    // t2MOVi, t2MOVr, t2MOVrx
    O << ".w "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 24:
    // tADC, tADDi8, tAND, tASRrr, tBIC, tEOR, tLSLrr, tLSRrr, tMUL, tORR, tR...
    printOperand(MI, 3); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 25:
    // tLDM, tSTM
    printAddrMode4Operand(MI, 0); 
    O << ", "; 
    printRegisterList(MI, 4); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 26:
    // tPOP, tPOP_RET, tPUSH
    printRegisterList(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 27:
    // tRSB
    O << ", #0"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }

  switch (MI->getOpcode()) {
  case ARM::ADCSri:
  case ARM::ADCSrr:
  case ARM::ADCSrs:
  case ARM::BFC:
  case ARM::CLZ:
  case ARM::CMNri:
  case ARM::CMNrr:
  case ARM::CMNrs:
  case ARM::CMNzri:
  case ARM::CMNzrr:
  case ARM::CMNzrs:
  case ARM::CMPri:
  case ARM::CMPrr:
  case ARM::CMPrs:
  case ARM::CMPzri:
  case ARM::CMPzrr:
  case ARM::CMPzrs:
  case ARM::FABSD:
  case ARM::FABSS:
  case ARM::FCMPED:
  case ARM::FCMPES:
  case ARM::FCPYD:
  case ARM::FCPYDcc:
  case ARM::FCPYS:
  case ARM::FCPYScc:
  case ARM::FCVTDS:
  case ARM::FCVTSD:
  case ARM::FLDD:
  case ARM::FLDS:
  case ARM::FMRS:
  case ARM::FMSR:
  case ARM::FNEGD:
  case ARM::FNEGDcc:
  case ARM::FNEGS:
  case ARM::FNEGScc:
  case ARM::FSITOD:
  case ARM::FSITOS:
  case ARM::FSQRTD:
  case ARM::FSQRTS:
  case ARM::FSTD:
  case ARM::FSTS:
  case ARM::FTOSIZD:
  case ARM::FTOSIZS:
  case ARM::FTOUIZD:
  case ARM::FTOUIZS:
  case ARM::FUITOD:
  case ARM::FUITOS:
  case ARM::LDR:
  case ARM::LDRB:
  case ARM::LDRH:
  case ARM::LDRcp:
  case ARM::MOVCCi:
  case ARM::MOVCCr:
  case ARM::MOVCCs:
  case ARM::MOVi2pieces:
  case ARM::REV:
  case ARM::REV16:
  case ARM::REVSH:
  case ARM::RSCSri:
  case ARM::RSCSrs:
  case ARM::SBCSri:
  case ARM::SBCSrr:
  case ARM::SBCSrs:
  case ARM::STR:
  case ARM::STRB:
  case ARM::STRH:
  case ARM::SXTBr:
  case ARM::SXTHr:
  case ARM::TEQri:
  case ARM::TEQrr:
  case ARM::TEQrs:
  case ARM::TSTri:
  case ARM::TSTrr:
  case ARM::TSTrs:
  case ARM::UXTB16r:
  case ARM::UXTBr:
  case ARM::UXTHr:
  case ARM::VABALsv2i64:
  case ARM::VABALsv4i32:
  case ARM::VABALsv8i16:
  case ARM::VABALuv2i64:
  case ARM::VABALuv4i32:
  case ARM::VABALuv8i16:
  case ARM::VABAsv16i8:
  case ARM::VABAsv2i32:
  case ARM::VABAsv4i16:
  case ARM::VABAsv4i32:
  case ARM::VABAsv8i16:
  case ARM::VABAsv8i8:
  case ARM::VABAuv16i8:
  case ARM::VABAuv2i32:
  case ARM::VABAuv4i16:
  case ARM::VABAuv4i32:
  case ARM::VABAuv8i16:
  case ARM::VABAuv8i8:
  case ARM::VABDLsv2i64:
  case ARM::VABDLsv4i32:
  case ARM::VABDLsv8i16:
  case ARM::VABDLuv2i64:
  case ARM::VABDLuv4i32:
  case ARM::VABDLuv8i16:
  case ARM::VABDfd:
  case ARM::VABDfq:
  case ARM::VABDsv16i8:
  case ARM::VABDsv2i32:
  case ARM::VABDsv4i16:
  case ARM::VABDsv4i32:
  case ARM::VABDsv8i16:
  case ARM::VABDsv8i8:
  case ARM::VABDuv16i8:
  case ARM::VABDuv2i32:
  case ARM::VABDuv4i16:
  case ARM::VABDuv4i32:
  case ARM::VABDuv8i16:
  case ARM::VABDuv8i8:
  case ARM::VACGEd:
  case ARM::VACGEq:
  case ARM::VACGTd:
  case ARM::VACGTq:
  case ARM::VADDHNv2i32:
  case ARM::VADDHNv4i16:
  case ARM::VADDHNv8i8:
  case ARM::VADDLsv2i64:
  case ARM::VADDLsv4i32:
  case ARM::VADDLsv8i16:
  case ARM::VADDLuv2i64:
  case ARM::VADDLuv4i32:
  case ARM::VADDLuv8i16:
  case ARM::VADDWsv2i64:
  case ARM::VADDWsv4i32:
  case ARM::VADDWsv8i16:
  case ARM::VADDWuv2i64:
  case ARM::VADDWuv4i32:
  case ARM::VADDWuv8i16:
  case ARM::VADDfd:
  case ARM::VADDfd_sfp:
  case ARM::VADDfq:
  case ARM::VADDv16i8:
  case ARM::VADDv1i64:
  case ARM::VADDv2i32:
  case ARM::VADDv2i64:
  case ARM::VADDv4i16:
  case ARM::VADDv4i32:
  case ARM::VADDv8i16:
  case ARM::VADDv8i8:
  case ARM::VANDd:
  case ARM::VANDq:
  case ARM::VBICd:
  case ARM::VBICq:
  case ARM::VBSLd:
  case ARM::VBSLq:
  case ARM::VCEQfd:
  case ARM::VCEQfq:
  case ARM::VCEQv16i8:
  case ARM::VCEQv2i32:
  case ARM::VCEQv4i16:
  case ARM::VCEQv4i32:
  case ARM::VCEQv8i16:
  case ARM::VCEQv8i8:
  case ARM::VCGEfd:
  case ARM::VCGEfq:
  case ARM::VCGEsv16i8:
  case ARM::VCGEsv2i32:
  case ARM::VCGEsv4i16:
  case ARM::VCGEsv4i32:
  case ARM::VCGEsv8i16:
  case ARM::VCGEsv8i8:
  case ARM::VCGEuv16i8:
  case ARM::VCGEuv2i32:
  case ARM::VCGEuv4i16:
  case ARM::VCGEuv4i32:
  case ARM::VCGEuv8i16:
  case ARM::VCGEuv8i8:
  case ARM::VCGTfd:
  case ARM::VCGTfq:
  case ARM::VCGTsv16i8:
  case ARM::VCGTsv2i32:
  case ARM::VCGTsv4i16:
  case ARM::VCGTsv4i32:
  case ARM::VCGTsv8i16:
  case ARM::VCGTsv8i8:
  case ARM::VCGTuv16i8:
  case ARM::VCGTuv2i32:
  case ARM::VCGTuv4i16:
  case ARM::VCGTuv4i32:
  case ARM::VCGTuv8i16:
  case ARM::VCGTuv8i8:
  case ARM::VCVTf2xsd:
  case ARM::VCVTf2xsq:
  case ARM::VCVTf2xud:
  case ARM::VCVTf2xuq:
  case ARM::VCVTxs2fd:
  case ARM::VCVTxs2fq:
  case ARM::VCVTxu2fd:
  case ARM::VCVTxu2fq:
  case ARM::VEORd:
  case ARM::VEORq:
  case ARM::VHADDsv16i8:
  case ARM::VHADDsv2i32:
  case ARM::VHADDsv4i16:
  case ARM::VHADDsv4i32:
  case ARM::VHADDsv8i16:
  case ARM::VHADDsv8i8:
  case ARM::VHADDuv16i8:
  case ARM::VHADDuv2i32:
  case ARM::VHADDuv4i16:
  case ARM::VHADDuv4i32:
  case ARM::VHADDuv8i16:
  case ARM::VHADDuv8i8:
  case ARM::VHSUBsv16i8:
  case ARM::VHSUBsv2i32:
  case ARM::VHSUBsv4i16:
  case ARM::VHSUBsv4i32:
  case ARM::VHSUBsv8i16:
  case ARM::VHSUBsv8i8:
  case ARM::VHSUBuv16i8:
  case ARM::VHSUBuv2i32:
  case ARM::VHSUBuv4i16:
  case ARM::VHSUBuv4i32:
  case ARM::VHSUBuv8i16:
  case ARM::VHSUBuv8i8:
  case ARM::VMAXfd:
  case ARM::VMAXfq:
  case ARM::VMAXsv16i8:
  case ARM::VMAXsv2i32:
  case ARM::VMAXsv4i16:
  case ARM::VMAXsv4i32:
  case ARM::VMAXsv8i16:
  case ARM::VMAXsv8i8:
  case ARM::VMAXuv16i8:
  case ARM::VMAXuv2i32:
  case ARM::VMAXuv4i16:
  case ARM::VMAXuv4i32:
  case ARM::VMAXuv8i16:
  case ARM::VMAXuv8i8:
  case ARM::VMINfd:
  case ARM::VMINfq:
  case ARM::VMINsv16i8:
  case ARM::VMINsv2i32:
  case ARM::VMINsv4i16:
  case ARM::VMINsv4i32:
  case ARM::VMINsv8i16:
  case ARM::VMINsv8i8:
  case ARM::VMINuv16i8:
  case ARM::VMINuv2i32:
  case ARM::VMINuv4i16:
  case ARM::VMINuv4i32:
  case ARM::VMINuv8i16:
  case ARM::VMINuv8i8:
  case ARM::VMLALsv2i64:
  case ARM::VMLALsv4i32:
  case ARM::VMLALsv8i16:
  case ARM::VMLALuv2i64:
  case ARM::VMLALuv4i32:
  case ARM::VMLALuv8i16:
  case ARM::VMLAfd:
  case ARM::VMLAfd_sfp:
  case ARM::VMLAfq:
  case ARM::VMLAv16i8:
  case ARM::VMLAv2i32:
  case ARM::VMLAv4i16:
  case ARM::VMLAv4i32:
  case ARM::VMLAv8i16:
  case ARM::VMLAv8i8:
  case ARM::VMLSLsv2i64:
  case ARM::VMLSLsv4i32:
  case ARM::VMLSLsv8i16:
  case ARM::VMLSLuv2i64:
  case ARM::VMLSLuv4i32:
  case ARM::VMLSLuv8i16:
  case ARM::VMLSfd:
  case ARM::VMLSfd_sfp:
  case ARM::VMLSfq:
  case ARM::VMLSv16i8:
  case ARM::VMLSv2i32:
  case ARM::VMLSv4i16:
  case ARM::VMLSv4i32:
  case ARM::VMLSv8i16:
  case ARM::VMLSv8i8:
  case ARM::VMULLp:
  case ARM::VMULLsv2i64:
  case ARM::VMULLsv4i32:
  case ARM::VMULLsv8i16:
  case ARM::VMULLuv2i64:
  case ARM::VMULLuv4i32:
  case ARM::VMULLuv8i16:
  case ARM::VMULfd:
  case ARM::VMULfd_sfp:
  case ARM::VMULfq:
  case ARM::VMULpd:
  case ARM::VMULpq:
  case ARM::VMULv16i8:
  case ARM::VMULv2i32:
  case ARM::VMULv4i16:
  case ARM::VMULv4i32:
  case ARM::VMULv8i16:
  case ARM::VMULv8i8:
  case ARM::VORNd:
  case ARM::VORNq:
  case ARM::VORRd:
  case ARM::VORRq:
  case ARM::VPADDf:
  case ARM::VPADDi16:
  case ARM::VPADDi32:
  case ARM::VPADDi8:
  case ARM::VPMAXf:
  case ARM::VPMAXs16:
  case ARM::VPMAXs32:
  case ARM::VPMAXs8:
  case ARM::VPMAXu16:
  case ARM::VPMAXu32:
  case ARM::VPMAXu8:
  case ARM::VPMINf:
  case ARM::VPMINs16:
  case ARM::VPMINs32:
  case ARM::VPMINs8:
  case ARM::VPMINu16:
  case ARM::VPMINu32:
  case ARM::VPMINu8:
  case ARM::VQADDsv16i8:
  case ARM::VQADDsv1i64:
  case ARM::VQADDsv2i32:
  case ARM::VQADDsv2i64:
  case ARM::VQADDsv4i16:
  case ARM::VQADDsv4i32:
  case ARM::VQADDsv8i16:
  case ARM::VQADDsv8i8:
  case ARM::VQADDuv16i8:
  case ARM::VQADDuv1i64:
  case ARM::VQADDuv2i32:
  case ARM::VQADDuv2i64:
  case ARM::VQADDuv4i16:
  case ARM::VQADDuv4i32:
  case ARM::VQADDuv8i16:
  case ARM::VQADDuv8i8:
  case ARM::VQDMLALv2i64:
  case ARM::VQDMLALv4i32:
  case ARM::VQDMLSLv2i64:
  case ARM::VQDMLSLv4i32:
  case ARM::VQDMULHv2i32:
  case ARM::VQDMULHv4i16:
  case ARM::VQDMULHv4i32:
  case ARM::VQDMULHv8i16:
  case ARM::VQDMULLv2i64:
  case ARM::VQDMULLv4i32:
  case ARM::VQRDMULHv2i32:
  case ARM::VQRDMULHv4i16:
  case ARM::VQRDMULHv4i32:
  case ARM::VQRDMULHv8i16:
  case ARM::VQRSHLsv16i8:
  case ARM::VQRSHLsv1i64:
  case ARM::VQRSHLsv2i32:
  case ARM::VQRSHLsv2i64:
  case ARM::VQRSHLsv4i16:
  case ARM::VQRSHLsv4i32:
  case ARM::VQRSHLsv8i16:
  case ARM::VQRSHLsv8i8:
  case ARM::VQRSHLuv16i8:
  case ARM::VQRSHLuv1i64:
  case ARM::VQRSHLuv2i32:
  case ARM::VQRSHLuv2i64:
  case ARM::VQRSHLuv4i16:
  case ARM::VQRSHLuv4i32:
  case ARM::VQRSHLuv8i16:
  case ARM::VQRSHLuv8i8:
  case ARM::VQRSHRNs16:
  case ARM::VQRSHRNs32:
  case ARM::VQRSHRNs64:
  case ARM::VQRSHRNu16:
  case ARM::VQRSHRNu32:
  case ARM::VQRSHRNu64:
  case ARM::VQRSHRUN16:
  case ARM::VQRSHRUN32:
  case ARM::VQRSHRUN64:
  case ARM::VQSHLsiv16i8:
  case ARM::VQSHLsiv1i64:
  case ARM::VQSHLsiv2i32:
  case ARM::VQSHLsiv2i64:
  case ARM::VQSHLsiv4i16:
  case ARM::VQSHLsiv4i32:
  case ARM::VQSHLsiv8i16:
  case ARM::VQSHLsiv8i8:
  case ARM::VQSHLsuv16i8:
  case ARM::VQSHLsuv1i64:
  case ARM::VQSHLsuv2i32:
  case ARM::VQSHLsuv2i64:
  case ARM::VQSHLsuv4i16:
  case ARM::VQSHLsuv4i32:
  case ARM::VQSHLsuv8i16:
  case ARM::VQSHLsuv8i8:
  case ARM::VQSHLsv16i8:
  case ARM::VQSHLsv1i64:
  case ARM::VQSHLsv2i32:
  case ARM::VQSHLsv2i64:
  case ARM::VQSHLsv4i16:
  case ARM::VQSHLsv4i32:
  case ARM::VQSHLsv8i16:
  case ARM::VQSHLsv8i8:
  case ARM::VQSHLuiv16i8:
  case ARM::VQSHLuiv1i64:
  case ARM::VQSHLuiv2i32:
  case ARM::VQSHLuiv2i64:
  case ARM::VQSHLuiv4i16:
  case ARM::VQSHLuiv4i32:
  case ARM::VQSHLuiv8i16:
  case ARM::VQSHLuiv8i8:
  case ARM::VQSHLuv16i8:
  case ARM::VQSHLuv1i64:
  case ARM::VQSHLuv2i32:
  case ARM::VQSHLuv2i64:
  case ARM::VQSHLuv4i16:
  case ARM::VQSHLuv4i32:
  case ARM::VQSHLuv8i16:
  case ARM::VQSHLuv8i8:
  case ARM::VQSHRNs16:
  case ARM::VQSHRNs32:
  case ARM::VQSHRNs64:
  case ARM::VQSHRNu16:
  case ARM::VQSHRNu32:
  case ARM::VQSHRNu64:
  case ARM::VQSHRUN16:
  case ARM::VQSHRUN32:
  case ARM::VQSHRUN64:
  case ARM::VQSUBsv16i8:
  case ARM::VQSUBsv1i64:
  case ARM::VQSUBsv2i32:
  case ARM::VQSUBsv2i64:
  case ARM::VQSUBsv4i16:
  case ARM::VQSUBsv4i32:
  case ARM::VQSUBsv8i16:
  case ARM::VQSUBsv8i8:
  case ARM::VQSUBuv16i8:
  case ARM::VQSUBuv1i64:
  case ARM::VQSUBuv2i32:
  case ARM::VQSUBuv2i64:
  case ARM::VQSUBuv4i16:
  case ARM::VQSUBuv4i32:
  case ARM::VQSUBuv8i16:
  case ARM::VQSUBuv8i8:
  case ARM::VRADDHNv2i32:
  case ARM::VRADDHNv4i16:
  case ARM::VRADDHNv8i8:
  case ARM::VRECPSfd:
  case ARM::VRECPSfq:
  case ARM::VRHADDsv16i8:
  case ARM::VRHADDsv2i32:
  case ARM::VRHADDsv4i16:
  case ARM::VRHADDsv4i32:
  case ARM::VRHADDsv8i16:
  case ARM::VRHADDsv8i8:
  case ARM::VRHADDuv16i8:
  case ARM::VRHADDuv2i32:
  case ARM::VRHADDuv4i16:
  case ARM::VRHADDuv4i32:
  case ARM::VRHADDuv8i16:
  case ARM::VRHADDuv8i8:
  case ARM::VRSHLsv16i8:
  case ARM::VRSHLsv1i64:
  case ARM::VRSHLsv2i32:
  case ARM::VRSHLsv2i64:
  case ARM::VRSHLsv4i16:
  case ARM::VRSHLsv4i32:
  case ARM::VRSHLsv8i16:
  case ARM::VRSHLsv8i8:
  case ARM::VRSHLuv16i8:
  case ARM::VRSHLuv1i64:
  case ARM::VRSHLuv2i32:
  case ARM::VRSHLuv2i64:
  case ARM::VRSHLuv4i16:
  case ARM::VRSHLuv4i32:
  case ARM::VRSHLuv8i16:
  case ARM::VRSHLuv8i8:
  case ARM::VRSHRN16:
  case ARM::VRSHRN32:
  case ARM::VRSHRN64:
  case ARM::VRSHRsv16i8:
  case ARM::VRSHRsv1i64:
  case ARM::VRSHRsv2i32:
  case ARM::VRSHRsv2i64:
  case ARM::VRSHRsv4i16:
  case ARM::VRSHRsv4i32:
  case ARM::VRSHRsv8i16:
  case ARM::VRSHRsv8i8:
  case ARM::VRSHRuv16i8:
  case ARM::VRSHRuv1i64:
  case ARM::VRSHRuv2i32:
  case ARM::VRSHRuv2i64:
  case ARM::VRSHRuv4i16:
  case ARM::VRSHRuv4i32:
  case ARM::VRSHRuv8i16:
  case ARM::VRSHRuv8i8:
  case ARM::VRSQRTSfd:
  case ARM::VRSQRTSfq:
  case ARM::VRSRAsv16i8:
  case ARM::VRSRAsv1i64:
  case ARM::VRSRAsv2i32:
  case ARM::VRSRAsv2i64:
  case ARM::VRSRAsv4i16:
  case ARM::VRSRAsv4i32:
  case ARM::VRSRAsv8i16:
  case ARM::VRSRAsv8i8:
  case ARM::VRSRAuv16i8:
  case ARM::VRSRAuv1i64:
  case ARM::VRSRAuv2i32:
  case ARM::VRSRAuv2i64:
  case ARM::VRSRAuv4i16:
  case ARM::VRSRAuv4i32:
  case ARM::VRSRAuv8i16:
  case ARM::VRSRAuv8i8:
  case ARM::VRSUBHNv2i32:
  case ARM::VRSUBHNv4i16:
  case ARM::VRSUBHNv8i8:
  case ARM::VSHLLi16:
  case ARM::VSHLLi32:
  case ARM::VSHLLi8:
  case ARM::VSHLLs16:
  case ARM::VSHLLs32:
  case ARM::VSHLLs8:
  case ARM::VSHLLu16:
  case ARM::VSHLLu32:
  case ARM::VSHLLu8:
  case ARM::VSHLiv16i8:
  case ARM::VSHLiv1i64:
  case ARM::VSHLiv2i32:
  case ARM::VSHLiv2i64:
  case ARM::VSHLiv4i16:
  case ARM::VSHLiv4i32:
  case ARM::VSHLiv8i16:
  case ARM::VSHLiv8i8:
  case ARM::VSHLsv16i8:
  case ARM::VSHLsv1i64:
  case ARM::VSHLsv2i32:
  case ARM::VSHLsv2i64:
  case ARM::VSHLsv4i16:
  case ARM::VSHLsv4i32:
  case ARM::VSHLsv8i16:
  case ARM::VSHLsv8i8:
  case ARM::VSHLuv16i8:
  case ARM::VSHLuv1i64:
  case ARM::VSHLuv2i32:
  case ARM::VSHLuv2i64:
  case ARM::VSHLuv4i16:
  case ARM::VSHLuv4i32:
  case ARM::VSHLuv8i16:
  case ARM::VSHLuv8i8:
  case ARM::VSHRN16:
  case ARM::VSHRN32:
  case ARM::VSHRN64:
  case ARM::VSHRsv16i8:
  case ARM::VSHRsv1i64:
  case ARM::VSHRsv2i32:
  case ARM::VSHRsv2i64:
  case ARM::VSHRsv4i16:
  case ARM::VSHRsv4i32:
  case ARM::VSHRsv8i16:
  case ARM::VSHRsv8i8:
  case ARM::VSHRuv16i8:
  case ARM::VSHRuv1i64:
  case ARM::VSHRuv2i32:
  case ARM::VSHRuv2i64:
  case ARM::VSHRuv4i16:
  case ARM::VSHRuv4i32:
  case ARM::VSHRuv8i16:
  case ARM::VSHRuv8i8:
  case ARM::VSLIv16i8:
  case ARM::VSLIv1i64:
  case ARM::VSLIv2i32:
  case ARM::VSLIv2i64:
  case ARM::VSLIv4i16:
  case ARM::VSLIv4i32:
  case ARM::VSLIv8i16:
  case ARM::VSLIv8i8:
  case ARM::VSRAsv16i8:
  case ARM::VSRAsv1i64:
  case ARM::VSRAsv2i32:
  case ARM::VSRAsv2i64:
  case ARM::VSRAsv4i16:
  case ARM::VSRAsv4i32:
  case ARM::VSRAsv8i16:
  case ARM::VSRAsv8i8:
  case ARM::VSRAuv16i8:
  case ARM::VSRAuv1i64:
  case ARM::VSRAuv2i32:
  case ARM::VSRAuv2i64:
  case ARM::VSRAuv4i16:
  case ARM::VSRAuv4i32:
  case ARM::VSRAuv8i16:
  case ARM::VSRAuv8i8:
  case ARM::VSRIv16i8:
  case ARM::VSRIv1i64:
  case ARM::VSRIv2i32:
  case ARM::VSRIv2i64:
  case ARM::VSRIv4i16:
  case ARM::VSRIv4i32:
  case ARM::VSRIv8i16:
  case ARM::VSRIv8i8:
  case ARM::VSUBHNv2i32:
  case ARM::VSUBHNv4i16:
  case ARM::VSUBHNv8i8:
  case ARM::VSUBLsv2i64:
  case ARM::VSUBLsv4i32:
  case ARM::VSUBLsv8i16:
  case ARM::VSUBLuv2i64:
  case ARM::VSUBLuv4i32:
  case ARM::VSUBLuv8i16:
  case ARM::VSUBWsv2i64:
  case ARM::VSUBWsv4i32:
  case ARM::VSUBWsv8i16:
  case ARM::VSUBWuv2i64:
  case ARM::VSUBWuv4i32:
  case ARM::VSUBWuv8i16:
  case ARM::VSUBfd:
  case ARM::VSUBfd_sfp:
  case ARM::VSUBfq:
  case ARM::VSUBv16i8:
  case ARM::VSUBv1i64:
  case ARM::VSUBv2i32:
  case ARM::VSUBv2i64:
  case ARM::VSUBv4i16:
  case ARM::VSUBv4i32:
  case ARM::VSUBv8i16:
  case ARM::VSUBv8i8:
  case ARM::VTSTv16i8:
  case ARM::VTSTv2i32:
  case ARM::VTSTv4i16:
  case ARM::VTSTv4i32:
  case ARM::VTSTv8i16:
  case ARM::VTSTv8i8:
  case ARM::t2ADCSri:
  case ARM::t2ADCSrr:
  case ARM::t2ADCSrs:
  case ARM::t2BFC:
  case ARM::t2CLZ:
  case ARM::t2LDRBi8:
  case ARM::t2LDRDi8:
  case ARM::t2LDRDpci:
  case ARM::t2LDRHi8:
  case ARM::t2LDRSBi8:
  case ARM::t2LDRSHi8:
  case ARM::t2LDRi8:
  case ARM::t2MOVTi16:
  case ARM::t2MOVi16:
  case ARM::t2SBCSri:
  case ARM::t2SBCSrr:
  case ARM::t2SBCSrs:
  case ARM::t2STRBi8:
  case ARM::t2STRDi8:
  case ARM::t2STRHi8:
  case ARM::t2STRi8:
  case ARM::t2SUBrSPi12_:
  case ARM::t2SUBrSPi_:
  case ARM::t2SUBrSPs_:
  case ARM::tADDi3:
  case ARM::tADDrr:
  case ARM::tASRri:
  case ARM::tCMN:
  case ARM::tCMNZ:
  case ARM::tCMPhir:
  case ARM::tCMPi8:
  case ARM::tCMPr:
  case ARM::tCMPzhir:
  case ARM::tCMPzi8:
  case ARM::tCMPzr:
  case ARM::tLDR:
  case ARM::tLDRB:
  case ARM::tLDRH:
  case ARM::tLDRSB:
  case ARM::tLDRSH:
  case ARM::tLDRcp:
  case ARM::tLDRspi:
  case ARM::tLSLri:
  case ARM::tLSRri:
  case ARM::tMOVCCi:
  case ARM::tMOVCCr:
  case ARM::tREV:
  case ARM::tREV16:
  case ARM::tREVSH:
  case ARM::tRestore:
  case ARM::tSTR:
  case ARM::tSTRB:
  case ARM::tSTRH:
  case ARM::tSTRspi:
  case ARM::tSUBi3:
  case ARM::tSUBrr:
  case ARM::tSXTB:
  case ARM::tSXTH:
  case ARM::tSpill:
  case ARM::tTST:
  case ARM::tUXTB:
  case ARM::tUXTH:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADCSri: 
    case ARM::MOVCCi: 
    case ARM::RSCSri: 
    case ARM::SBCSri: printSOImmOperand(MI, 2); break;
    case ARM::ADCSrr: 
    case ARM::FCPYDcc: 
    case ARM::FCPYScc: 
    case ARM::FNEGDcc: 
    case ARM::FNEGScc: 
    case ARM::MOVCCr: 
    case ARM::SBCSrr: 
    case ARM::VABDLsv2i64: 
    case ARM::VABDLsv4i32: 
    case ARM::VABDLsv8i16: 
    case ARM::VABDLuv2i64: 
    case ARM::VABDLuv4i32: 
    case ARM::VABDLuv8i16: 
    case ARM::VABDfd: 
    case ARM::VABDfq: 
    case ARM::VABDsv16i8: 
    case ARM::VABDsv2i32: 
    case ARM::VABDsv4i16: 
    case ARM::VABDsv4i32: 
    case ARM::VABDsv8i16: 
    case ARM::VABDsv8i8: 
    case ARM::VABDuv16i8: 
    case ARM::VABDuv2i32: 
    case ARM::VABDuv4i16: 
    case ARM::VABDuv4i32: 
    case ARM::VABDuv8i16: 
    case ARM::VABDuv8i8: 
    case ARM::VACGEd: 
    case ARM::VACGEq: 
    case ARM::VACGTd: 
    case ARM::VACGTq: 
    case ARM::VADDHNv2i32: 
    case ARM::VADDHNv4i16: 
    case ARM::VADDHNv8i8: 
    case ARM::VADDLsv2i64: 
    case ARM::VADDLsv4i32: 
    case ARM::VADDLsv8i16: 
    case ARM::VADDLuv2i64: 
    case ARM::VADDLuv4i32: 
    case ARM::VADDLuv8i16: 
    case ARM::VADDWsv2i64: 
    case ARM::VADDWsv4i32: 
    case ARM::VADDWsv8i16: 
    case ARM::VADDWuv2i64: 
    case ARM::VADDWuv4i32: 
    case ARM::VADDWuv8i16: 
    case ARM::VADDfd: 
    case ARM::VADDfd_sfp: 
    case ARM::VADDfq: 
    case ARM::VADDv16i8: 
    case ARM::VADDv1i64: 
    case ARM::VADDv2i32: 
    case ARM::VADDv2i64: 
    case ARM::VADDv4i16: 
    case ARM::VADDv4i32: 
    case ARM::VADDv8i16: 
    case ARM::VADDv8i8: 
    case ARM::VANDd: 
    case ARM::VANDq: 
    case ARM::VBICd: 
    case ARM::VBICq: 
    case ARM::VCEQfd: 
    case ARM::VCEQfq: 
    case ARM::VCEQv16i8: 
    case ARM::VCEQv2i32: 
    case ARM::VCEQv4i16: 
    case ARM::VCEQv4i32: 
    case ARM::VCEQv8i16: 
    case ARM::VCEQv8i8: 
    case ARM::VCGEfd: 
    case ARM::VCGEfq: 
    case ARM::VCGEsv16i8: 
    case ARM::VCGEsv2i32: 
    case ARM::VCGEsv4i16: 
    case ARM::VCGEsv4i32: 
    case ARM::VCGEsv8i16: 
    case ARM::VCGEsv8i8: 
    case ARM::VCGEuv16i8: 
    case ARM::VCGEuv2i32: 
    case ARM::VCGEuv4i16: 
    case ARM::VCGEuv4i32: 
    case ARM::VCGEuv8i16: 
    case ARM::VCGEuv8i8: 
    case ARM::VCGTfd: 
    case ARM::VCGTfq: 
    case ARM::VCGTsv16i8: 
    case ARM::VCGTsv2i32: 
    case ARM::VCGTsv4i16: 
    case ARM::VCGTsv4i32: 
    case ARM::VCGTsv8i16: 
    case ARM::VCGTsv8i8: 
    case ARM::VCGTuv16i8: 
    case ARM::VCGTuv2i32: 
    case ARM::VCGTuv4i16: 
    case ARM::VCGTuv4i32: 
    case ARM::VCGTuv8i16: 
    case ARM::VCGTuv8i8: 
    case ARM::VCVTf2xsd: 
    case ARM::VCVTf2xsq: 
    case ARM::VCVTf2xud: 
    case ARM::VCVTf2xuq: 
    case ARM::VCVTxs2fd: 
    case ARM::VCVTxs2fq: 
    case ARM::VCVTxu2fd: 
    case ARM::VCVTxu2fq: 
    case ARM::VEORd: 
    case ARM::VEORq: 
    case ARM::VHADDsv16i8: 
    case ARM::VHADDsv2i32: 
    case ARM::VHADDsv4i16: 
    case ARM::VHADDsv4i32: 
    case ARM::VHADDsv8i16: 
    case ARM::VHADDsv8i8: 
    case ARM::VHADDuv16i8: 
    case ARM::VHADDuv2i32: 
    case ARM::VHADDuv4i16: 
    case ARM::VHADDuv4i32: 
    case ARM::VHADDuv8i16: 
    case ARM::VHADDuv8i8: 
    case ARM::VHSUBsv16i8: 
    case ARM::VHSUBsv2i32: 
    case ARM::VHSUBsv4i16: 
    case ARM::VHSUBsv4i32: 
    case ARM::VHSUBsv8i16: 
    case ARM::VHSUBsv8i8: 
    case ARM::VHSUBuv16i8: 
    case ARM::VHSUBuv2i32: 
    case ARM::VHSUBuv4i16: 
    case ARM::VHSUBuv4i32: 
    case ARM::VHSUBuv8i16: 
    case ARM::VHSUBuv8i8: 
    case ARM::VMAXfd: 
    case ARM::VMAXfq: 
    case ARM::VMAXsv16i8: 
    case ARM::VMAXsv2i32: 
    case ARM::VMAXsv4i16: 
    case ARM::VMAXsv4i32: 
    case ARM::VMAXsv8i16: 
    case ARM::VMAXsv8i8: 
    case ARM::VMAXuv16i8: 
    case ARM::VMAXuv2i32: 
    case ARM::VMAXuv4i16: 
    case ARM::VMAXuv4i32: 
    case ARM::VMAXuv8i16: 
    case ARM::VMAXuv8i8: 
    case ARM::VMINfd: 
    case ARM::VMINfq: 
    case ARM::VMINsv16i8: 
    case ARM::VMINsv2i32: 
    case ARM::VMINsv4i16: 
    case ARM::VMINsv4i32: 
    case ARM::VMINsv8i16: 
    case ARM::VMINsv8i8: 
    case ARM::VMINuv16i8: 
    case ARM::VMINuv2i32: 
    case ARM::VMINuv4i16: 
    case ARM::VMINuv4i32: 
    case ARM::VMINuv8i16: 
    case ARM::VMINuv8i8: 
    case ARM::VMULLp: 
    case ARM::VMULLsv2i64: 
    case ARM::VMULLsv4i32: 
    case ARM::VMULLsv8i16: 
    case ARM::VMULLuv2i64: 
    case ARM::VMULLuv4i32: 
    case ARM::VMULLuv8i16: 
    case ARM::VMULfd: 
    case ARM::VMULfd_sfp: 
    case ARM::VMULfq: 
    case ARM::VMULpd: 
    case ARM::VMULpq: 
    case ARM::VMULv16i8: 
    case ARM::VMULv2i32: 
    case ARM::VMULv4i16: 
    case ARM::VMULv4i32: 
    case ARM::VMULv8i16: 
    case ARM::VMULv8i8: 
    case ARM::VORNd: 
    case ARM::VORNq: 
    case ARM::VORRd: 
    case ARM::VORRq: 
    case ARM::VPADDf: 
    case ARM::VPADDi16: 
    case ARM::VPADDi32: 
    case ARM::VPADDi8: 
    case ARM::VPMAXf: 
    case ARM::VPMAXs16: 
    case ARM::VPMAXs32: 
    case ARM::VPMAXs8: 
    case ARM::VPMAXu16: 
    case ARM::VPMAXu32: 
    case ARM::VPMAXu8: 
    case ARM::VPMINf: 
    case ARM::VPMINs16: 
    case ARM::VPMINs32: 
    case ARM::VPMINs8: 
    case ARM::VPMINu16: 
    case ARM::VPMINu32: 
    case ARM::VPMINu8: 
    case ARM::VQADDsv16i8: 
    case ARM::VQADDsv1i64: 
    case ARM::VQADDsv2i32: 
    case ARM::VQADDsv2i64: 
    case ARM::VQADDsv4i16: 
    case ARM::VQADDsv4i32: 
    case ARM::VQADDsv8i16: 
    case ARM::VQADDsv8i8: 
    case ARM::VQADDuv16i8: 
    case ARM::VQADDuv1i64: 
    case ARM::VQADDuv2i32: 
    case ARM::VQADDuv2i64: 
    case ARM::VQADDuv4i16: 
    case ARM::VQADDuv4i32: 
    case ARM::VQADDuv8i16: 
    case ARM::VQADDuv8i8: 
    case ARM::VQDMULHv2i32: 
    case ARM::VQDMULHv4i16: 
    case ARM::VQDMULHv4i32: 
    case ARM::VQDMULHv8i16: 
    case ARM::VQDMULLv2i64: 
    case ARM::VQDMULLv4i32: 
    case ARM::VQRDMULHv2i32: 
    case ARM::VQRDMULHv4i16: 
    case ARM::VQRDMULHv4i32: 
    case ARM::VQRDMULHv8i16: 
    case ARM::VQRSHLsv16i8: 
    case ARM::VQRSHLsv1i64: 
    case ARM::VQRSHLsv2i32: 
    case ARM::VQRSHLsv2i64: 
    case ARM::VQRSHLsv4i16: 
    case ARM::VQRSHLsv4i32: 
    case ARM::VQRSHLsv8i16: 
    case ARM::VQRSHLsv8i8: 
    case ARM::VQRSHLuv16i8: 
    case ARM::VQRSHLuv1i64: 
    case ARM::VQRSHLuv2i32: 
    case ARM::VQRSHLuv2i64: 
    case ARM::VQRSHLuv4i16: 
    case ARM::VQRSHLuv4i32: 
    case ARM::VQRSHLuv8i16: 
    case ARM::VQRSHLuv8i8: 
    case ARM::VQRSHRNs16: 
    case ARM::VQRSHRNs32: 
    case ARM::VQRSHRNs64: 
    case ARM::VQRSHRNu16: 
    case ARM::VQRSHRNu32: 
    case ARM::VQRSHRNu64: 
    case ARM::VQRSHRUN16: 
    case ARM::VQRSHRUN32: 
    case ARM::VQRSHRUN64: 
    case ARM::VQSHLsiv16i8: 
    case ARM::VQSHLsiv1i64: 
    case ARM::VQSHLsiv2i32: 
    case ARM::VQSHLsiv2i64: 
    case ARM::VQSHLsiv4i16: 
    case ARM::VQSHLsiv4i32: 
    case ARM::VQSHLsiv8i16: 
    case ARM::VQSHLsiv8i8: 
    case ARM::VQSHLsuv16i8: 
    case ARM::VQSHLsuv1i64: 
    case ARM::VQSHLsuv2i32: 
    case ARM::VQSHLsuv2i64: 
    case ARM::VQSHLsuv4i16: 
    case ARM::VQSHLsuv4i32: 
    case ARM::VQSHLsuv8i16: 
    case ARM::VQSHLsuv8i8: 
    case ARM::VQSHLsv16i8: 
    case ARM::VQSHLsv1i64: 
    case ARM::VQSHLsv2i32: 
    case ARM::VQSHLsv2i64: 
    case ARM::VQSHLsv4i16: 
    case ARM::VQSHLsv4i32: 
    case ARM::VQSHLsv8i16: 
    case ARM::VQSHLsv8i8: 
    case ARM::VQSHLuiv16i8: 
    case ARM::VQSHLuiv1i64: 
    case ARM::VQSHLuiv2i32: 
    case ARM::VQSHLuiv2i64: 
    case ARM::VQSHLuiv4i16: 
    case ARM::VQSHLuiv4i32: 
    case ARM::VQSHLuiv8i16: 
    case ARM::VQSHLuiv8i8: 
    case ARM::VQSHLuv16i8: 
    case ARM::VQSHLuv1i64: 
    case ARM::VQSHLuv2i32: 
    case ARM::VQSHLuv2i64: 
    case ARM::VQSHLuv4i16: 
    case ARM::VQSHLuv4i32: 
    case ARM::VQSHLuv8i16: 
    case ARM::VQSHLuv8i8: 
    case ARM::VQSHRNs16: 
    case ARM::VQSHRNs32: 
    case ARM::VQSHRNs64: 
    case ARM::VQSHRNu16: 
    case ARM::VQSHRNu32: 
    case ARM::VQSHRNu64: 
    case ARM::VQSHRUN16: 
    case ARM::VQSHRUN32: 
    case ARM::VQSHRUN64: 
    case ARM::VQSUBsv16i8: 
    case ARM::VQSUBsv1i64: 
    case ARM::VQSUBsv2i32: 
    case ARM::VQSUBsv2i64: 
    case ARM::VQSUBsv4i16: 
    case ARM::VQSUBsv4i32: 
    case ARM::VQSUBsv8i16: 
    case ARM::VQSUBsv8i8: 
    case ARM::VQSUBuv16i8: 
    case ARM::VQSUBuv1i64: 
    case ARM::VQSUBuv2i32: 
    case ARM::VQSUBuv2i64: 
    case ARM::VQSUBuv4i16: 
    case ARM::VQSUBuv4i32: 
    case ARM::VQSUBuv8i16: 
    case ARM::VQSUBuv8i8: 
    case ARM::VRADDHNv2i32: 
    case ARM::VRADDHNv4i16: 
    case ARM::VRADDHNv8i8: 
    case ARM::VRECPSfd: 
    case ARM::VRECPSfq: 
    case ARM::VRHADDsv16i8: 
    case ARM::VRHADDsv2i32: 
    case ARM::VRHADDsv4i16: 
    case ARM::VRHADDsv4i32: 
    case ARM::VRHADDsv8i16: 
    case ARM::VRHADDsv8i8: 
    case ARM::VRHADDuv16i8: 
    case ARM::VRHADDuv2i32: 
    case ARM::VRHADDuv4i16: 
    case ARM::VRHADDuv4i32: 
    case ARM::VRHADDuv8i16: 
    case ARM::VRHADDuv8i8: 
    case ARM::VRSHLsv16i8: 
    case ARM::VRSHLsv1i64: 
    case ARM::VRSHLsv2i32: 
    case ARM::VRSHLsv2i64: 
    case ARM::VRSHLsv4i16: 
    case ARM::VRSHLsv4i32: 
    case ARM::VRSHLsv8i16: 
    case ARM::VRSHLsv8i8: 
    case ARM::VRSHLuv16i8: 
    case ARM::VRSHLuv1i64: 
    case ARM::VRSHLuv2i32: 
    case ARM::VRSHLuv2i64: 
    case ARM::VRSHLuv4i16: 
    case ARM::VRSHLuv4i32: 
    case ARM::VRSHLuv8i16: 
    case ARM::VRSHLuv8i8: 
    case ARM::VRSHRN16: 
    case ARM::VRSHRN32: 
    case ARM::VRSHRN64: 
    case ARM::VRSHRsv16i8: 
    case ARM::VRSHRsv1i64: 
    case ARM::VRSHRsv2i32: 
    case ARM::VRSHRsv2i64: 
    case ARM::VRSHRsv4i16: 
    case ARM::VRSHRsv4i32: 
    case ARM::VRSHRsv8i16: 
    case ARM::VRSHRsv8i8: 
    case ARM::VRSHRuv16i8: 
    case ARM::VRSHRuv1i64: 
    case ARM::VRSHRuv2i32: 
    case ARM::VRSHRuv2i64: 
    case ARM::VRSHRuv4i16: 
    case ARM::VRSHRuv4i32: 
    case ARM::VRSHRuv8i16: 
    case ARM::VRSHRuv8i8: 
    case ARM::VRSQRTSfd: 
    case ARM::VRSQRTSfq: 
    case ARM::VRSUBHNv2i32: 
    case ARM::VRSUBHNv4i16: 
    case ARM::VRSUBHNv8i8: 
    case ARM::VSHLLi16: 
    case ARM::VSHLLi32: 
    case ARM::VSHLLi8: 
    case ARM::VSHLLs16: 
    case ARM::VSHLLs32: 
    case ARM::VSHLLs8: 
    case ARM::VSHLLu16: 
    case ARM::VSHLLu32: 
    case ARM::VSHLLu8: 
    case ARM::VSHLiv16i8: 
    case ARM::VSHLiv1i64: 
    case ARM::VSHLiv2i32: 
    case ARM::VSHLiv2i64: 
    case ARM::VSHLiv4i16: 
    case ARM::VSHLiv4i32: 
    case ARM::VSHLiv8i16: 
    case ARM::VSHLiv8i8: 
    case ARM::VSHLsv16i8: 
    case ARM::VSHLsv1i64: 
    case ARM::VSHLsv2i32: 
    case ARM::VSHLsv2i64: 
    case ARM::VSHLsv4i16: 
    case ARM::VSHLsv4i32: 
    case ARM::VSHLsv8i16: 
    case ARM::VSHLsv8i8: 
    case ARM::VSHLuv16i8: 
    case ARM::VSHLuv1i64: 
    case ARM::VSHLuv2i32: 
    case ARM::VSHLuv2i64: 
    case ARM::VSHLuv4i16: 
    case ARM::VSHLuv4i32: 
    case ARM::VSHLuv8i16: 
    case ARM::VSHLuv8i8: 
    case ARM::VSHRN16: 
    case ARM::VSHRN32: 
    case ARM::VSHRN64: 
    case ARM::VSHRsv16i8: 
    case ARM::VSHRsv1i64: 
    case ARM::VSHRsv2i32: 
    case ARM::VSHRsv2i64: 
    case ARM::VSHRsv4i16: 
    case ARM::VSHRsv4i32: 
    case ARM::VSHRsv8i16: 
    case ARM::VSHRsv8i8: 
    case ARM::VSHRuv16i8: 
    case ARM::VSHRuv1i64: 
    case ARM::VSHRuv2i32: 
    case ARM::VSHRuv2i64: 
    case ARM::VSHRuv4i16: 
    case ARM::VSHRuv4i32: 
    case ARM::VSHRuv8i16: 
    case ARM::VSHRuv8i8: 
    case ARM::VSUBHNv2i32: 
    case ARM::VSUBHNv4i16: 
    case ARM::VSUBHNv8i8: 
    case ARM::VSUBLsv2i64: 
    case ARM::VSUBLsv4i32: 
    case ARM::VSUBLsv8i16: 
    case ARM::VSUBLuv2i64: 
    case ARM::VSUBLuv4i32: 
    case ARM::VSUBLuv8i16: 
    case ARM::VSUBWsv2i64: 
    case ARM::VSUBWsv4i32: 
    case ARM::VSUBWsv8i16: 
    case ARM::VSUBWuv2i64: 
    case ARM::VSUBWuv4i32: 
    case ARM::VSUBWuv8i16: 
    case ARM::VSUBfd: 
    case ARM::VSUBfd_sfp: 
    case ARM::VSUBfq: 
    case ARM::VSUBv16i8: 
    case ARM::VSUBv1i64: 
    case ARM::VSUBv2i32: 
    case ARM::VSUBv2i64: 
    case ARM::VSUBv4i16: 
    case ARM::VSUBv4i32: 
    case ARM::VSUBv8i16: 
    case ARM::VSUBv8i8: 
    case ARM::VTSTv16i8: 
    case ARM::VTSTv2i32: 
    case ARM::VTSTv4i16: 
    case ARM::VTSTv4i32: 
    case ARM::VTSTv8i16: 
    case ARM::VTSTv8i8: 
    case ARM::t2ADCSri: 
    case ARM::t2ADCSrr: 
    case ARM::t2MOVTi16: 
    case ARM::t2SBCSri: 
    case ARM::t2SBCSrr: 
    case ARM::t2SUBrSPi12_: 
    case ARM::t2SUBrSPi_: 
    case ARM::tMOVCCi: 
    case ARM::tMOVCCr: printOperand(MI, 2); break;
    case ARM::ADCSrs: 
    case ARM::MOVCCs: 
    case ARM::RSCSrs: 
    case ARM::SBCSrs: printSORegOperand(MI, 2); break;
    case ARM::BFC: 
    case ARM::t2BFC: printBitfieldInvMaskImmOperand(MI, 2); break;
    case ARM::CLZ: 
    case ARM::CMNrr: 
    case ARM::CMNzrr: 
    case ARM::CMPrr: 
    case ARM::CMPzrr: 
    case ARM::FABSD: 
    case ARM::FABSS: 
    case ARM::FCMPED: 
    case ARM::FCMPES: 
    case ARM::FCPYD: 
    case ARM::FCPYS: 
    case ARM::FCVTDS: 
    case ARM::FCVTSD: 
    case ARM::FMRS: 
    case ARM::FMSR: 
    case ARM::FNEGD: 
    case ARM::FNEGS: 
    case ARM::FSITOD: 
    case ARM::FSITOS: 
    case ARM::FSQRTD: 
    case ARM::FSQRTS: 
    case ARM::FTOSIZD: 
    case ARM::FTOSIZS: 
    case ARM::FTOUIZD: 
    case ARM::FTOUIZS: 
    case ARM::FUITOD: 
    case ARM::FUITOS: 
    case ARM::REV: 
    case ARM::REV16: 
    case ARM::REVSH: 
    case ARM::SXTBr: 
    case ARM::SXTHr: 
    case ARM::TEQrr: 
    case ARM::TSTrr: 
    case ARM::UXTB16r: 
    case ARM::UXTBr: 
    case ARM::UXTHr: 
    case ARM::t2CLZ: 
    case ARM::t2LDRDpci: 
    case ARM::t2MOVi16: 
    case ARM::tCMN: 
    case ARM::tCMNZ: 
    case ARM::tCMPhir: 
    case ARM::tCMPi8: 
    case ARM::tCMPr: 
    case ARM::tCMPzhir: 
    case ARM::tCMPzi8: 
    case ARM::tCMPzr: 
    case ARM::tLDRcp: 
    case ARM::tREV: 
    case ARM::tREV16: 
    case ARM::tREVSH: 
    case ARM::tSXTB: 
    case ARM::tSXTH: 
    case ARM::tTST: 
    case ARM::tUXTB: 
    case ARM::tUXTH: printOperand(MI, 1); break;
    case ARM::CMNri: 
    case ARM::CMNzri: 
    case ARM::CMPri: 
    case ARM::CMPzri: 
    case ARM::TEQri: 
    case ARM::TSTri: printSOImmOperand(MI, 1); break;
    case ARM::CMNrs: 
    case ARM::CMNzrs: 
    case ARM::CMPrs: 
    case ARM::CMPzrs: 
    case ARM::TEQrs: 
    case ARM::TSTrs: printSORegOperand(MI, 1); break;
    case ARM::FLDD: 
    case ARM::FLDS: 
    case ARM::FSTD: 
    case ARM::FSTS: printAddrMode5Operand(MI, 1); break;
    case ARM::LDR: 
    case ARM::LDRB: 
    case ARM::LDRcp: 
    case ARM::STR: 
    case ARM::STRB: printAddrMode2Operand(MI, 1); break;
    case ARM::LDRH: 
    case ARM::STRH: printAddrMode3Operand(MI, 1); break;
    case ARM::MOVi2pieces: printSOImm2PartOperand(MI, 1); break;
    case ARM::VABALsv2i64: 
    case ARM::VABALsv4i32: 
    case ARM::VABALsv8i16: 
    case ARM::VABALuv2i64: 
    case ARM::VABALuv4i32: 
    case ARM::VABALuv8i16: 
    case ARM::VABAsv16i8: 
    case ARM::VABAsv2i32: 
    case ARM::VABAsv4i16: 
    case ARM::VABAsv4i32: 
    case ARM::VABAsv8i16: 
    case ARM::VABAsv8i8: 
    case ARM::VABAuv16i8: 
    case ARM::VABAuv2i32: 
    case ARM::VABAuv4i16: 
    case ARM::VABAuv4i32: 
    case ARM::VABAuv8i16: 
    case ARM::VABAuv8i8: 
    case ARM::VBSLd: 
    case ARM::VBSLq: 
    case ARM::VMLALsv2i64: 
    case ARM::VMLALsv4i32: 
    case ARM::VMLALsv8i16: 
    case ARM::VMLALuv2i64: 
    case ARM::VMLALuv4i32: 
    case ARM::VMLALuv8i16: 
    case ARM::VMLAfd: 
    case ARM::VMLAfd_sfp: 
    case ARM::VMLAfq: 
    case ARM::VMLAv16i8: 
    case ARM::VMLAv2i32: 
    case ARM::VMLAv4i16: 
    case ARM::VMLAv4i32: 
    case ARM::VMLAv8i16: 
    case ARM::VMLAv8i8: 
    case ARM::VMLSLsv2i64: 
    case ARM::VMLSLsv4i32: 
    case ARM::VMLSLsv8i16: 
    case ARM::VMLSLuv2i64: 
    case ARM::VMLSLuv4i32: 
    case ARM::VMLSLuv8i16: 
    case ARM::VMLSfd: 
    case ARM::VMLSfd_sfp: 
    case ARM::VMLSfq: 
    case ARM::VMLSv16i8: 
    case ARM::VMLSv2i32: 
    case ARM::VMLSv4i16: 
    case ARM::VMLSv4i32: 
    case ARM::VMLSv8i16: 
    case ARM::VMLSv8i8: 
    case ARM::VQDMLALv2i64: 
    case ARM::VQDMLALv4i32: 
    case ARM::VQDMLSLv2i64: 
    case ARM::VQDMLSLv4i32: 
    case ARM::VRSRAsv16i8: 
    case ARM::VRSRAsv1i64: 
    case ARM::VRSRAsv2i32: 
    case ARM::VRSRAsv2i64: 
    case ARM::VRSRAsv4i16: 
    case ARM::VRSRAsv4i32: 
    case ARM::VRSRAsv8i16: 
    case ARM::VRSRAsv8i8: 
    case ARM::VRSRAuv16i8: 
    case ARM::VRSRAuv1i64: 
    case ARM::VRSRAuv2i32: 
    case ARM::VRSRAuv2i64: 
    case ARM::VRSRAuv4i16: 
    case ARM::VRSRAuv4i32: 
    case ARM::VRSRAuv8i16: 
    case ARM::VRSRAuv8i8: 
    case ARM::VSLIv16i8: 
    case ARM::VSLIv1i64: 
    case ARM::VSLIv2i32: 
    case ARM::VSLIv2i64: 
    case ARM::VSLIv4i16: 
    case ARM::VSLIv4i32: 
    case ARM::VSLIv8i16: 
    case ARM::VSLIv8i8: 
    case ARM::VSRAsv16i8: 
    case ARM::VSRAsv1i64: 
    case ARM::VSRAsv2i32: 
    case ARM::VSRAsv2i64: 
    case ARM::VSRAsv4i16: 
    case ARM::VSRAsv4i32: 
    case ARM::VSRAsv8i16: 
    case ARM::VSRAsv8i8: 
    case ARM::VSRAuv16i8: 
    case ARM::VSRAuv1i64: 
    case ARM::VSRAuv2i32: 
    case ARM::VSRAuv2i64: 
    case ARM::VSRAuv4i16: 
    case ARM::VSRAuv4i32: 
    case ARM::VSRAuv8i16: 
    case ARM::VSRAuv8i8: 
    case ARM::VSRIv16i8: 
    case ARM::VSRIv1i64: 
    case ARM::VSRIv2i32: 
    case ARM::VSRIv2i64: 
    case ARM::VSRIv4i16: 
    case ARM::VSRIv4i32: 
    case ARM::VSRIv8i16: 
    case ARM::VSRIv8i8: 
    case ARM::tADDi3: 
    case ARM::tADDrr: 
    case ARM::tASRri: 
    case ARM::tLSLri: 
    case ARM::tLSRri: 
    case ARM::tSUBi3: 
    case ARM::tSUBrr: printOperand(MI, 3); break;
    case ARM::t2ADCSrs: 
    case ARM::t2SBCSrs: 
    case ARM::t2SUBrSPs_: printT2SOOperand(MI, 2); break;
    case ARM::t2LDRBi8: 
    case ARM::t2LDRHi8: 
    case ARM::t2LDRSBi8: 
    case ARM::t2LDRSHi8: 
    case ARM::t2LDRi8: 
    case ARM::t2STRBi8: 
    case ARM::t2STRHi8: 
    case ARM::t2STRi8: printT2AddrModeImm8Operand(MI, 1); break;
    case ARM::t2LDRDi8: 
    case ARM::t2STRDi8: printT2AddrModeImm8s4Operand(MI, 1); break;
    case ARM::tLDR: 
    case ARM::tSTR: printThumbAddrModeS4Operand(MI, 1); break;
    case ARM::tLDRB: 
    case ARM::tSTRB: printThumbAddrModeS1Operand(MI, 1); break;
    case ARM::tLDRH: 
    case ARM::tSTRH: printThumbAddrModeS2Operand(MI, 1); break;
    case ARM::tLDRSB: 
    case ARM::tLDRSH: printThumbAddrModeRROperand(MI, 1); break;
    case ARM::tLDRspi: 
    case ARM::tRestore: 
    case ARM::tSTRspi: 
    case ARM::tSpill: printThumbAddrModeSPOperand(MI, 1); break;
    }
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::ADCrr:
  case ARM::ADDrr:
  case ARM::ANDrr:
  case ARM::BICrr:
  case ARM::Bcc:
  case ARM::EORrr:
  case ARM::FCMPEZD:
  case ARM::FCMPEZS:
  case ARM::MOVr:
  case ARM::MUL:
  case ARM::MVNr:
  case ARM::ORRrr:
  case ARM::SBCrr:
  case ARM::SUBrr:
  case ARM::VABSfd:
  case ARM::VABSfd_sfp:
  case ARM::VABSfq:
  case ARM::VABSv16i8:
  case ARM::VABSv2i32:
  case ARM::VABSv4i16:
  case ARM::VABSv4i32:
  case ARM::VABSv8i16:
  case ARM::VABSv8i8:
  case ARM::VCLSv16i8:
  case ARM::VCLSv2i32:
  case ARM::VCLSv4i16:
  case ARM::VCLSv4i32:
  case ARM::VCLSv8i16:
  case ARM::VCLSv8i8:
  case ARM::VCLZv16i8:
  case ARM::VCLZv2i32:
  case ARM::VCLZv4i16:
  case ARM::VCLZv4i32:
  case ARM::VCLZv8i16:
  case ARM::VCLZv8i8:
  case ARM::VCNTd:
  case ARM::VCNTq:
  case ARM::VCVTf2sd:
  case ARM::VCVTf2sd_sfp:
  case ARM::VCVTf2sq:
  case ARM::VCVTf2ud:
  case ARM::VCVTf2ud_sfp:
  case ARM::VCVTf2uq:
  case ARM::VCVTs2fd:
  case ARM::VCVTs2fd_sfp:
  case ARM::VCVTs2fq:
  case ARM::VCVTu2fd:
  case ARM::VCVTu2fd_sfp:
  case ARM::VCVTu2fq:
  case ARM::VMOVD:
  case ARM::VMOVLsv2i64:
  case ARM::VMOVLsv4i32:
  case ARM::VMOVLsv8i16:
  case ARM::VMOVLuv2i64:
  case ARM::VMOVLuv4i32:
  case ARM::VMOVLuv8i16:
  case ARM::VMOVNv2i32:
  case ARM::VMOVNv4i16:
  case ARM::VMOVNv8i8:
  case ARM::VMOVQ:
  case ARM::VMOVv16i8:
  case ARM::VMOVv1i64:
  case ARM::VMOVv2i32:
  case ARM::VMOVv2i64:
  case ARM::VMOVv4i16:
  case ARM::VMOVv4i32:
  case ARM::VMOVv8i16:
  case ARM::VMOVv8i8:
  case ARM::VMVNd:
  case ARM::VMVNq:
  case ARM::VNEGf32d:
  case ARM::VNEGf32d_sfp:
  case ARM::VNEGf32q:
  case ARM::VNEGs16d:
  case ARM::VNEGs16q:
  case ARM::VNEGs32d:
  case ARM::VNEGs32q:
  case ARM::VNEGs8d:
  case ARM::VNEGs8q:
  case ARM::VPADALsv16i8:
  case ARM::VPADALsv2i32:
  case ARM::VPADALsv4i16:
  case ARM::VPADALsv4i32:
  case ARM::VPADALsv8i16:
  case ARM::VPADALsv8i8:
  case ARM::VPADALuv16i8:
  case ARM::VPADALuv2i32:
  case ARM::VPADALuv4i16:
  case ARM::VPADALuv4i32:
  case ARM::VPADALuv8i16:
  case ARM::VPADALuv8i8:
  case ARM::VPADDLsv16i8:
  case ARM::VPADDLsv2i32:
  case ARM::VPADDLsv4i16:
  case ARM::VPADDLsv4i32:
  case ARM::VPADDLsv8i16:
  case ARM::VPADDLsv8i8:
  case ARM::VPADDLuv16i8:
  case ARM::VPADDLuv2i32:
  case ARM::VPADDLuv4i16:
  case ARM::VPADDLuv4i32:
  case ARM::VPADDLuv8i16:
  case ARM::VPADDLuv8i8:
  case ARM::VQABSv16i8:
  case ARM::VQABSv2i32:
  case ARM::VQABSv4i16:
  case ARM::VQABSv4i32:
  case ARM::VQABSv8i16:
  case ARM::VQABSv8i8:
  case ARM::VQMOVNsuv2i32:
  case ARM::VQMOVNsuv4i16:
  case ARM::VQMOVNsuv8i8:
  case ARM::VQMOVNsv2i32:
  case ARM::VQMOVNsv4i16:
  case ARM::VQMOVNsv8i8:
  case ARM::VQMOVNuv2i32:
  case ARM::VQMOVNuv4i16:
  case ARM::VQMOVNuv8i8:
  case ARM::VQNEGv16i8:
  case ARM::VQNEGv2i32:
  case ARM::VQNEGv4i16:
  case ARM::VQNEGv4i32:
  case ARM::VQNEGv8i16:
  case ARM::VQNEGv8i8:
  case ARM::VRECPEd:
  case ARM::VRECPEfd:
  case ARM::VRECPEfq:
  case ARM::VRECPEq:
  case ARM::VREV16d8:
  case ARM::VREV16q8:
  case ARM::VREV32d16:
  case ARM::VREV32d8:
  case ARM::VREV32q16:
  case ARM::VREV32q8:
  case ARM::VREV64d16:
  case ARM::VREV64d32:
  case ARM::VREV64d8:
  case ARM::VREV64df:
  case ARM::VREV64q16:
  case ARM::VREV64q32:
  case ARM::VREV64q8:
  case ARM::VREV64qf:
  case ARM::VRSQRTEd:
  case ARM::VRSQRTEfd:
  case ARM::VRSQRTEfq:
  case ARM::VRSQRTEq:
  case ARM::VTRNd16:
  case ARM::VTRNd32:
  case ARM::VTRNd8:
  case ARM::VTRNq16:
  case ARM::VTRNq32:
  case ARM::VTRNq8:
  case ARM::VUZPd16:
  case ARM::VUZPd32:
  case ARM::VUZPd8:
  case ARM::VUZPq16:
  case ARM::VUZPq32:
  case ARM::VUZPq8:
  case ARM::VZIPd16:
  case ARM::VZIPd32:
  case ARM::VZIPd8:
  case ARM::VZIPq16:
  case ARM::VZIPq32:
  case ARM::VZIPq8:
  case ARM::t2LEApcrel:
  case ARM::tADDrSP:
  case ARM::tADDspr:
  case ARM::tADDspr_:
  case ARM::tANDsp:
  case ARM::tMOVSr:
  case ARM::tMOVr:
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::ADDSri:
  case ARM::ADDSrr:
  case ARM::ADDSrs:
  case ARM::LDRSB:
  case ARM::LDRSH:
  case ARM::MOVrx:
  case ARM::PICLDR:
  case ARM::PICSTR:
  case ARM::RSBSri:
  case ARM::RSBSrs:
  case ARM::SUBSri:
  case ARM::SUBSrr:
  case ARM::SUBSrs:
  case ARM::VDUP16d:
  case ARM::VDUP16q:
  case ARM::VDUP32d:
  case ARM::VDUP32q:
  case ARM::VDUP8d:
  case ARM::VDUP8q:
  case ARM::VDUPfd:
  case ARM::VDUPfq:
  case ARM::t2CMNri:
  case ARM::t2CMNrr:
  case ARM::t2CMNrs:
  case ARM::t2CMNzri:
  case ARM::t2CMNzrr:
  case ARM::t2CMNzrs:
  case ARM::t2CMPri:
  case ARM::t2CMPrr:
  case ARM::t2CMPrs:
  case ARM::t2CMPzri:
  case ARM::t2CMPzrr:
  case ARM::t2CMPzrs:
  case ARM::t2LDRBi12:
  case ARM::t2LDRBpci:
  case ARM::t2LDRBs:
  case ARM::t2LDRHi12:
  case ARM::t2LDRHpci:
  case ARM::t2LDRHs:
  case ARM::t2LDRSBi12:
  case ARM::t2LDRSBpci:
  case ARM::t2LDRSBs:
  case ARM::t2LDRSHi12:
  case ARM::t2LDRSHpci:
  case ARM::t2LDRSHs:
  case ARM::t2LDRi12:
  case ARM::t2LDRpci:
  case ARM::t2LDRs:
  case ARM::t2MOVCCi:
  case ARM::t2MOVCCr:
  case ARM::t2MOVsra_flag:
  case ARM::t2MOVsrl_flag:
  case ARM::t2MVNi:
  case ARM::t2MVNr:
  case ARM::t2MVNs:
  case ARM::t2REV:
  case ARM::t2REV16:
  case ARM::t2REVSH:
  case ARM::t2STRBi12:
  case ARM::t2STRBs:
  case ARM::t2STRHi12:
  case ARM::t2STRHs:
  case ARM::t2STRi12:
  case ARM::t2STRs:
  case ARM::t2SXTBr:
  case ARM::t2SXTHr:
  case ARM::t2TEQri:
  case ARM::t2TEQrr:
  case ARM::t2TEQrs:
  case ARM::t2TSTri:
  case ARM::t2TSTrr:
  case ARM::t2TSTrs:
  case ARM::t2UXTB16r:
  case ARM::t2UXTBr:
  case ARM::t2UXTHr:
  case ARM::tADDspi:
  case ARM::tLDRpci:
  case ARM::tMOVgpr2gpr:
  case ARM::tMOVgpr2tgpr:
  case ARM::tMOVtgpr2gpr:
  case ARM::tSUBspi:
  case ARM::tSUBspi_:
    switch (MI->getOpcode()) {
    case ARM::ADDSri: 
    case ARM::RSBSri: 
    case ARM::SUBSri: printSOImmOperand(MI, 2); break;
    case ARM::ADDSrr: 
    case ARM::SUBSrr: 
    case ARM::t2MOVCCi: 
    case ARM::t2MOVCCr: printOperand(MI, 2); break;
    case ARM::ADDSrs: 
    case ARM::RSBSrs: 
    case ARM::SUBSrs: printSORegOperand(MI, 2); break;
    case ARM::LDRSB: 
    case ARM::LDRSH: printAddrMode3Operand(MI, 1); break;
    case ARM::MOVrx: O << ", rrx"; break;
    case ARM::PICLDR: 
    case ARM::PICSTR: printAddrModePCOperand(MI, 1); break;
    case ARM::VDUP16d: 
    case ARM::VDUP16q: 
    case ARM::VDUP32d: 
    case ARM::VDUP32q: 
    case ARM::VDUP8d: 
    case ARM::VDUP8q: 
    case ARM::VDUPfd: 
    case ARM::VDUPfq: 
    case ARM::t2CMNri: 
    case ARM::t2CMNrr: 
    case ARM::t2CMNzri: 
    case ARM::t2CMNzrr: 
    case ARM::t2CMPri: 
    case ARM::t2CMPrr: 
    case ARM::t2CMPzri: 
    case ARM::t2CMPzrr: 
    case ARM::t2LDRBpci: 
    case ARM::t2LDRHpci: 
    case ARM::t2LDRSBpci: 
    case ARM::t2LDRSHpci: 
    case ARM::t2LDRpci: 
    case ARM::t2MVNi: 
    case ARM::t2MVNr: 
    case ARM::t2REV: 
    case ARM::t2REV16: 
    case ARM::t2REVSH: 
    case ARM::t2SXTBr: 
    case ARM::t2SXTHr: 
    case ARM::t2TEQri: 
    case ARM::t2TEQrr: 
    case ARM::t2TSTri: 
    case ARM::t2TSTrr: 
    case ARM::t2UXTB16r: 
    case ARM::t2UXTBr: 
    case ARM::t2UXTHr: 
    case ARM::tLDRpci: printOperand(MI, 1); break;
    case ARM::t2CMNrs: 
    case ARM::t2CMNzrs: 
    case ARM::t2CMPrs: 
    case ARM::t2CMPzrs: 
    case ARM::t2MVNs: 
    case ARM::t2TEQrs: 
    case ARM::t2TSTrs: printT2SOOperand(MI, 1); break;
    case ARM::t2LDRBi12: 
    case ARM::t2LDRHi12: 
    case ARM::t2LDRSBi12: 
    case ARM::t2LDRSHi12: 
    case ARM::t2LDRi12: 
    case ARM::t2STRBi12: 
    case ARM::t2STRHi12: 
    case ARM::t2STRi12: printT2AddrModeImm12Operand(MI, 1); break;
    case ARM::t2LDRBs: 
    case ARM::t2LDRHs: 
    case ARM::t2LDRSBs: 
    case ARM::t2LDRSHs: 
    case ARM::t2LDRs: 
    case ARM::t2STRBs: 
    case ARM::t2STRHs: 
    case ARM::t2STRs: printT2AddrModeSoRegOperand(MI, 1); break;
    case ARM::t2MOVsra_flag: 
    case ARM::t2MOVsrl_flag: O << ", #1"; break;
    case ARM::tADDspi: 
    case ARM::tSUBspi: 
    case ARM::tSUBspi_: O << " * 4"; break;
    case ARM::tMOVgpr2gpr: O << "\t@ hir2hir"; break;
    case ARM::tMOVgpr2tgpr: O << "\t@ hir2lor"; break;
    case ARM::tMOVtgpr2gpr: O << "\t@ lor2hir"; break;
    }
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::BR_JTadd:
    O << " \n"; 
    printJTBlockOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::FADDD:
  case ARM::FADDS:
  case ARM::FDIVD:
  case ARM::FDIVS:
  case ARM::FMDRR:
  case ARM::FMRRD:
  case ARM::FMULD:
  case ARM::FMULS:
  case ARM::FNMULD:
  case ARM::FNMULS:
  case ARM::FSUBD:
  case ARM::FSUBS:
  case ARM::SMMUL:
  case ARM::SMULBB:
  case ARM::SMULBT:
  case ARM::SMULTB:
  case ARM::SMULTT:
  case ARM::SMULWB:
  case ARM::SMULWT:
  case ARM::SXTABrr:
  case ARM::SXTAHrr:
  case ARM::SXTBr_rot:
  case ARM::SXTHr_rot:
  case ARM::UXTABrr:
  case ARM::UXTAHrr:
  case ARM::UXTB16r_rot:
  case ARM::UXTBr_rot:
  case ARM::UXTHr_rot:
  case ARM::t2ADCri:
  case ARM::t2ADDrSPi12:
  case ARM::t2ADDri12:
  case ARM::t2ANDri:
  case ARM::t2BICri:
  case ARM::t2EORri:
  case ARM::t2MUL:
  case ARM::t2ORNri:
  case ARM::t2ORNrr:
  case ARM::t2ORRri:
  case ARM::t2SBCri:
  case ARM::t2SMMUL:
  case ARM::t2SMULBB:
  case ARM::t2SMULBT:
  case ARM::t2SMULTB:
  case ARM::t2SMULTT:
  case ARM::t2SMULWB:
  case ARM::t2SMULWT:
  case ARM::t2SUBrSPi12:
  case ARM::t2SUBri12:
  case ARM::t2SXTABrr:
  case ARM::t2SXTAHrr:
  case ARM::t2UXTABrr:
  case ARM::t2UXTAHrr:
    O << ", "; 
    printOperand(MI, 1); 
    switch (MI->getOpcode()) {
    case ARM::FADDD: 
    case ARM::FADDS: 
    case ARM::FDIVD: 
    case ARM::FDIVS: 
    case ARM::FMDRR: 
    case ARM::FMRRD: 
    case ARM::FMULD: 
    case ARM::FMULS: 
    case ARM::FNMULD: 
    case ARM::FNMULS: 
    case ARM::FSUBD: 
    case ARM::FSUBS: 
    case ARM::SMMUL: 
    case ARM::SMULBB: 
    case ARM::SMULBT: 
    case ARM::SMULTB: 
    case ARM::SMULTT: 
    case ARM::SMULWB: 
    case ARM::SMULWT: 
    case ARM::SXTABrr: 
    case ARM::SXTAHrr: 
    case ARM::UXTABrr: 
    case ARM::UXTAHrr: 
    case ARM::t2ADCri: 
    case ARM::t2ADDrSPi12: 
    case ARM::t2ADDri12: 
    case ARM::t2ANDri: 
    case ARM::t2BICri: 
    case ARM::t2EORri: 
    case ARM::t2MUL: 
    case ARM::t2ORNri: 
    case ARM::t2ORNrr: 
    case ARM::t2ORRri: 
    case ARM::t2SBCri: 
    case ARM::t2SMMUL: 
    case ARM::t2SMULBB: 
    case ARM::t2SMULBT: 
    case ARM::t2SMULTB: 
    case ARM::t2SMULTT: 
    case ARM::t2SMULWB: 
    case ARM::t2SMULWT: 
    case ARM::t2SUBrSPi12: 
    case ARM::t2SUBri12: 
    case ARM::t2SXTABrr: 
    case ARM::t2SXTAHrr: 
    case ARM::t2UXTABrr: 
    case ARM::t2UXTAHrr: O << ", "; break;
    case ARM::SXTBr_rot: 
    case ARM::SXTHr_rot: 
    case ARM::UXTB16r_rot: 
    case ARM::UXTBr_rot: 
    case ARM::UXTHr_rot: O << ", ror "; break;
    }
    printOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::FMACD:
  case ARM::FMACS:
  case ARM::FMSCD:
  case ARM::FMSCS:
  case ARM::FNMACD:
  case ARM::FNMACS:
  case ARM::FNMSCD:
  case ARM::FNMSCS:
  case ARM::MLA:
  case ARM::SMLAL:
  case ARM::SMULL:
  case ARM::UMLAL:
  case ARM::UMULL:
  case ARM::VEXTd16:
  case ARM::VEXTd32:
  case ARM::VEXTd8:
  case ARM::VEXTdf:
  case ARM::VEXTq16:
  case ARM::VEXTq32:
  case ARM::VEXTq8:
  case ARM::VEXTqf:
    O << ", "; 
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::LDRB_POST:
  case ARM::LDRH_POST:
  case ARM::LDR_POST:
  case ARM::STRB_POST:
  case ARM::STRH_POST:
  case ARM::STR_POST:
  case ARM::t2LDRB_POST:
  case ARM::t2LDRH_POST:
  case ARM::t2LDRSB_POST:
  case ARM::t2LDRSH_POST:
  case ARM::t2LDR_POST:
  case ARM::t2STRB_POST:
  case ARM::t2STRH_POST:
  case ARM::t2STR_POST:
    O << ", ["; 
    printOperand(MI, 2); 
    O << "], "; 
    switch (MI->getOpcode()) {
    case ARM::LDRB_POST: 
    case ARM::LDR_POST: 
    case ARM::STRB_POST: 
    case ARM::STR_POST: printAddrMode2OffsetOperand(MI, 3); break;
    case ARM::LDRH_POST: 
    case ARM::STRH_POST: printAddrMode3OffsetOperand(MI, 3); break;
    case ARM::t2LDRB_POST: 
    case ARM::t2LDRH_POST: 
    case ARM::t2LDRSB_POST: 
    case ARM::t2LDRSH_POST: 
    case ARM::t2LDR_POST: 
    case ARM::t2STRB_POST: 
    case ARM::t2STRH_POST: 
    case ARM::t2STR_POST: printT2AddrModeImm8OffsetOperand(MI, 3); break;
    }
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::LDRB_PRE:
  case ARM::LDRH_PRE:
  case ARM::LDR_PRE:
  case ARM::t2LDRB_PRE:
  case ARM::t2LDRH_PRE:
  case ARM::t2LDRSB_PRE:
  case ARM::t2LDRSH_PRE:
  case ARM::t2LDR_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRB_PRE: 
    case ARM::LDR_PRE: printAddrMode2Operand(MI, 2); break;
    case ARM::LDRH_PRE: printAddrMode3Operand(MI, 2); break;
    case ARM::t2LDRB_PRE: 
    case ARM::t2LDRH_PRE: 
    case ARM::t2LDRSB_PRE: 
    case ARM::t2LDRSH_PRE: 
    case ARM::t2LDR_PRE: printT2AddrModeImm8Operand(MI, 2); break;
    }
    O << '!'; 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::LDRSB_PRE:
  case ARM::LDRSH_PRE:
    printAddrMode3Operand(MI, 2); 
    O << '!'; 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::MLS:
  case ARM::PKHBT:
  case ARM::PKHTB:
  case ARM::SMLABB:
  case ARM::SMLABT:
  case ARM::SMLATB:
  case ARM::SMLATT:
  case ARM::SMLAWB:
  case ARM::SMLAWT:
  case ARM::SMMLA:
  case ARM::SMMLS:
  case ARM::SXTABrr_rot:
  case ARM::SXTAHrr_rot:
  case ARM::UMAAL:
  case ARM::UXTABrr_rot:
  case ARM::UXTAHrr_rot:
  case ARM::t2MLA:
  case ARM::t2MLS:
  case ARM::t2PKHBT:
  case ARM::t2PKHTB:
  case ARM::t2SMLABB:
  case ARM::t2SMLABT:
  case ARM::t2SMLAL:
  case ARM::t2SMLATB:
  case ARM::t2SMLATT:
  case ARM::t2SMLAWB:
  case ARM::t2SMLAWT:
  case ARM::t2SMMLA:
  case ARM::t2SMMLS:
  case ARM::t2SMULL:
  case ARM::t2SXTABrr_rot:
  case ARM::t2SXTAHrr_rot:
  case ARM::t2UMAAL:
  case ARM::t2UMLAL:
  case ARM::t2UMULL:
  case ARM::t2UXTABrr_rot:
  case ARM::t2UXTAHrr_rot:
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printOperand(MI, 2); 
    switch (MI->getOpcode()) {
    case ARM::MLS: 
    case ARM::SMLABB: 
    case ARM::SMLABT: 
    case ARM::SMLATB: 
    case ARM::SMLATT: 
    case ARM::SMLAWB: 
    case ARM::SMLAWT: 
    case ARM::SMMLA: 
    case ARM::SMMLS: 
    case ARM::UMAAL: 
    case ARM::t2MLA: 
    case ARM::t2MLS: 
    case ARM::t2SMLABB: 
    case ARM::t2SMLABT: 
    case ARM::t2SMLAL: 
    case ARM::t2SMLATB: 
    case ARM::t2SMLATT: 
    case ARM::t2SMLAWB: 
    case ARM::t2SMLAWT: 
    case ARM::t2SMMLA: 
    case ARM::t2SMMLS: 
    case ARM::t2SMULL: 
    case ARM::t2UMAAL: 
    case ARM::t2UMLAL: 
    case ARM::t2UMULL: O << ", "; break;
    case ARM::PKHBT: 
    case ARM::t2PKHBT: O << ", LSL "; break;
    case ARM::PKHTB: 
    case ARM::t2PKHTB: O << ", ASR "; break;
    case ARM::SXTABrr_rot: 
    case ARM::SXTAHrr_rot: 
    case ARM::UXTABrr_rot: 
    case ARM::UXTAHrr_rot: 
    case ARM::t2SXTABrr_rot: 
    case ARM::t2SXTAHrr_rot: 
    case ARM::t2UXTABrr_rot: 
    case ARM::t2UXTAHrr_rot: O << ", ror "; break;
    }
    printOperand(MI, 3); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::STRB_PRE:
  case ARM::STRH_PRE:
  case ARM::STR_PRE:
  case ARM::t2STRB_PRE:
  case ARM::t2STRH_PRE:
  case ARM::t2STR_PRE:
    O << ", ["; 
    printOperand(MI, 2); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::STRB_PRE: 
    case ARM::STR_PRE: printAddrMode2OffsetOperand(MI, 3); break;
    case ARM::STRH_PRE: printAddrMode3OffsetOperand(MI, 3); break;
    case ARM::t2STRB_PRE: 
    case ARM::t2STRH_PRE: 
    case ARM::t2STR_PRE: printT2AddrModeImm8OffsetOperand(MI, 3); break;
    }
    O << "]!"; 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::VDUPLN16d:
  case ARM::VDUPLN16q:
  case ARM::VDUPLN32d:
  case ARM::VDUPLN32q:
  case ARM::VDUPLN8d:
  case ARM::VDUPLN8q:
  case ARM::VDUPLNfd:
  case ARM::VDUPLNfq:
    O << '['; 
    printNoHashImmediate(MI, 2); 
    O << ']'; 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::VGETLNi32:
    printOperand(MI, 1); 
    O << '['; 
    printNoHashImmediate(MI, 2); 
    O << ']'; 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::VLD2d16:
  case ARM::VLD2d32:
  case ARM::VLD2d8:
  case ARM::VST2d16:
  case ARM::VST2d32:
  case ARM::VST2d8:
  case ARM::VTBL1:
  case ARM::VTBX1:
    O << "}, "; 
    switch (MI->getOpcode()) {
    case ARM::VLD2d16: 
    case ARM::VLD2d32: 
    case ARM::VLD2d8: printAddrMode6Operand(MI, 2); break;
    case ARM::VST2d16: 
    case ARM::VST2d32: 
    case ARM::VST2d8: printAddrMode6Operand(MI, 0); break;
    case ARM::VTBL1: printOperand(MI, 2); break;
    case ARM::VTBX1: printOperand(MI, 3); break;
    }
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::VLD3d16:
  case ARM::VLD3d32:
  case ARM::VLD3d8:
  case ARM::VTBL2:
    O << ','; 
    printOperand(MI, 2); 
    O << "}, "; 
    switch (MI->getOpcode()) {
    case ARM::VLD3d16: 
    case ARM::VLD3d32: 
    case ARM::VLD3d8: printAddrMode6Operand(MI, 3); break;
    case ARM::VTBL2: printOperand(MI, 3); break;
    }
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::VLD4d16:
  case ARM::VLD4d32:
  case ARM::VLD4d8:
  case ARM::VTBL3:
    O << ','; 
    printOperand(MI, 2); 
    O << ','; 
    printOperand(MI, 3); 
    O << "}, "; 
    switch (MI->getOpcode()) {
    case ARM::VLD4d16: 
    case ARM::VLD4d32: 
    case ARM::VLD4d8: printAddrMode6Operand(MI, 4); break;
    case ARM::VTBL3: printOperand(MI, 4); break;
    }
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::VST3d16:
  case ARM::VST3d32:
  case ARM::VST3d8:
    O << ','; 
    printOperand(MI, 5); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::VST4d16:
  case ARM::VST4d32:
  case ARM::VST4d8:
    O << ','; 
    printOperand(MI, 5); 
    O << ','; 
    printOperand(MI, 6); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::VTBL4:
    O << ','; 
    printOperand(MI, 2); 
    O << ','; 
    printOperand(MI, 3); 
    O << ','; 
    printOperand(MI, 4); 
    O << "}, "; 
    printOperand(MI, 5); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::VTBX2:
    O << ','; 
    printOperand(MI, 3); 
    O << "}, "; 
    printOperand(MI, 4); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::VTBX3:
    O << ','; 
    printOperand(MI, 3); 
    O << ','; 
    printOperand(MI, 4); 
    O << "}, "; 
    printOperand(MI, 5); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::VTBX4:
    O << ','; 
    printOperand(MI, 3); 
    O << ','; 
    printOperand(MI, 4); 
    O << ','; 
    printOperand(MI, 5); 
    O << "}, "; 
    printOperand(MI, 6); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::t2ADCrr:
  case ARM::t2ADCrs:
  case ARM::t2ADDSri:
  case ARM::t2ADDSrr:
  case ARM::t2ADDSrs:
  case ARM::t2ADDrSPi:
  case ARM::t2ADDrSPs:
  case ARM::t2ADDri:
  case ARM::t2ADDrr:
  case ARM::t2ADDrs:
  case ARM::t2ANDrr:
  case ARM::t2ANDrs:
  case ARM::t2ASRri:
  case ARM::t2ASRrr:
  case ARM::t2BICrr:
  case ARM::t2BICrs:
  case ARM::t2EORrr:
  case ARM::t2EORrs:
  case ARM::t2LSLri:
  case ARM::t2LSLrr:
  case ARM::t2LSRri:
  case ARM::t2LSRrr:
  case ARM::t2ORRrr:
  case ARM::t2ORRrs:
  case ARM::t2RORri:
  case ARM::t2RORrr:
  case ARM::t2RSBri:
  case ARM::t2SBCrr:
  case ARM::t2SBCrs:
  case ARM::t2SUBSri:
  case ARM::t2SUBSrr:
  case ARM::t2SUBSrs:
  case ARM::t2SUBrSPi:
  case ARM::t2SUBri:
  case ARM::t2SUBrr:
  case ARM::t2SUBrs:
    printOperand(MI, 1); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::t2ADCrr: 
    case ARM::t2ADDSri: 
    case ARM::t2ADDSrr: 
    case ARM::t2ADDrSPi: 
    case ARM::t2ADDri: 
    case ARM::t2ADDrr: 
    case ARM::t2ANDrr: 
    case ARM::t2ASRri: 
    case ARM::t2ASRrr: 
    case ARM::t2BICrr: 
    case ARM::t2EORrr: 
    case ARM::t2LSLri: 
    case ARM::t2LSLrr: 
    case ARM::t2LSRri: 
    case ARM::t2LSRrr: 
    case ARM::t2ORRrr: 
    case ARM::t2RORri: 
    case ARM::t2RORrr: 
    case ARM::t2RSBri: 
    case ARM::t2SBCrr: 
    case ARM::t2SUBSri: 
    case ARM::t2SUBSrr: 
    case ARM::t2SUBrSPi: 
    case ARM::t2SUBri: 
    case ARM::t2SUBrr: printOperand(MI, 2); break;
    case ARM::t2ADCrs: 
    case ARM::t2ADDSrs: 
    case ARM::t2ADDrSPs: 
    case ARM::t2ADDrs: 
    case ARM::t2ANDrs: 
    case ARM::t2BICrs: 
    case ARM::t2EORrs: 
    case ARM::t2ORRrs: 
    case ARM::t2SBCrs: 
    case ARM::t2SUBSrs: 
    case ARM::t2SUBrs: printT2SOOperand(MI, 2); break;
    }
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::t2LEApcrelJT:
    O << '_'; 
    printNoHashImmediate(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::t2MOVCCasr:
  case ARM::t2MOVCClsl:
  case ARM::t2MOVCClsr:
  case ARM::t2MOVCCror:
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::t2ORNrs:
  case ARM::t2RSBSrs:
  case ARM::t2RSBrs:
  case ARM::t2SUBrSPs:
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printT2SOOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::t2SXTBr_rot:
  case ARM::t2SXTHr_rot:
  case ARM::t2UXTB16r_rot:
  case ARM::t2UXTBr_rot:
  case ARM::t2UXTHr_rot:
    printOperand(MI, 1); 
    O << ", ror "; 
    printOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::tADDhirr:
  case ARM::tADDrSPi:
    O << ", "; 
    printOperand(MI, 2); 
    switch (MI->getOpcode()) {
    case ARM::tADDhirr: O << " @ addhirr"; break;
    case ARM::tADDrSPi: O << " * 4 @ addrspi"; break;
    }
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::tLEApcrel:
    O << ", #"; 
    printOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  case ARM::tLEApcrelJT:
    O << ", #"; 
    printOperand(MI, 1); 
    O << '_'; 
    printNoHashImmediate(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  }
  return;
  return;
}
