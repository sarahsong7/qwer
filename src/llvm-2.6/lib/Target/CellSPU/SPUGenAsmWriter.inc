//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.  This method returns true if the
/// machine instruction was sufficiently described to print it, otherwise
/// it returns false.
void SPUAsmPrinter::printInstruction(const MachineInstr *MI) {
  static const unsigned OpInfo[] = {
    536870914U,	// PHI
    0U,	// INLINEASM
    0U,	// DBG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// DECLARE
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1073741834U,	// ABSDB
    1073741841U,	// ADDXr32
    1073741841U,	// ADDXr64
    1073741841U,	// ADDXv2i64
    1073741841U,	// ADDXv4i32
    1677721601U,	// ADJCALLSTACKDOWN
    1744830465U,	// ADJCALLSTACKUP
    1073872919U,	// AHIr16
    1073872919U,	// AHIvec
    1073741852U,	// AHr16
    1073741852U,	// AHv8i16
    1073872928U,	// AIf32
    1073872928U,	// AIr32
    1073872928U,	// AIv4f32
    1073872928U,	// AIv4i32
    1074004004U,	// ANDBIr8
    1074004004U,	// ANDBIv16i8
    1073741867U,	// ANDCr128
    1073741867U,	// ANDCr16
    1073741867U,	// ANDCr32
    1073741867U,	// ANDCr64
    1073741867U,	// ANDCr8
    1073741867U,	// ANDCv16i8
    1073741867U,	// ANDCv16i8_conv
    1073741867U,	// ANDCv2i64
    1073741867U,	// ANDCv4i32
    1073741867U,	// ANDCv8i16
    1074004017U,	// ANDHIi8i16
    1074004017U,	// ANDHIr16
    1073872945U,	// ANDHIv8i16
    1073872952U,	// ANDIi16i32
    1073872952U,	// ANDIi8i32
    1073872952U,	// ANDIr32
    1073872952U,	// ANDIv4i32
    1073741886U,	// ANDfabs32
    1073741886U,	// ANDfabs64
    1073741886U,	// ANDfabsvec
    1073741886U,	// ANDi16i32
    1073741886U,	// ANDr128
    1073741886U,	// ANDr16
    1073741886U,	// ANDr32
    1073741886U,	// ANDr64
    1073741886U,	// ANDr8
    1073741886U,	// ANDv16i8
    1073741886U,	// ANDv2i64
    1073741886U,	// ANDv4i32
    1073741886U,	// ANDv8i16
    1073741891U,	// AVGB
    1073741897U,	// Ar32
    1073741897U,	// Av16i8
    1073741897U,	// Av4i32
    1073741900U,	// BGXvec
    1073741905U,	// BGr32
    1073741905U,	// BGr64
    1073741905U,	// BGv2i64
    1073741905U,	// BGv4i32
    1275068501U,	// BI
    1275068505U,	// BISL
    2147483748U,	// BISLED_00
    2147483748U,	// BISLED_0D
    2147483748U,	// BISLED_E0
    2147483748U,	// BISLED_ED
    2684354673U,	// BR
    2684354677U,	// BRA
    2147483770U,	// BRASL
    1342177414U,	// BRHNZr16
    1342177414U,	// BRHNZv8i16
    1342177421U,	// BRHZr16
    1342177421U,	// BRHZv8i16
    1342177427U,	// BRNZr32
    1342177427U,	// BRNZv4i32
    2684354713U,	// BRSL
    1342177444U,	// BRZr32
    1342177444U,	// BRZv4i32
    1077936297U,	// CBD
    1082130606U,	// CBX
    1077936307U,	// CDD
    1077936307U,	// CDDf64
    1082130616U,	// CDX
    1082130616U,	// CDXf64
    1073873085U,	// CEQBIr8
    1073873085U,	// CEQBIv16i8
    1073742020U,	// CEQBr8
    1073742020U,	// CEQBv16i8
    1073873098U,	// CEQHIr16
    1073873098U,	// CEQHIv8i16
    1073742033U,	// CEQHr16
    1073742033U,	// CEQHv8i16
    1073873111U,	// CEQIr32
    1073873111U,	// CEQIv4i32
    1073742045U,	// CEQr32
    1073742045U,	// CEQv4i32
    1074790626U,	// CFSif32
    1074790626U,	// CFSiv4f32
    1074790633U,	// CFUif32
    1074790633U,	// CFUiv4f32
    1073873136U,	// CGTBIr8
    1073873136U,	// CGTBIv16i8
    1073742071U,	// CGTBr8
    1073742071U,	// CGTBv16i8
    1073873149U,	// CGTHIr16
    1073873149U,	// CGTHIv8i16
    1073742084U,	// CGTHr16
    1073742084U,	// CGTHv8i16
    1073873162U,	// CGTIf32
    1073873162U,	// CGTIr32
    1073873162U,	// CGTIv4f32
    1073873162U,	// CGTIv4i32
    1073742096U,	// CGTr32
    1073742096U,	// CGTv4i32
    1073742101U,	// CGr32
    1073742101U,	// CGr64
    1073742101U,	// CGv2i64
    1073742101U,	// CGv4i32
    1077936409U,	// CHD
    1082130718U,	// CHX
    1073873187U,	// CLGTBIr8
    1073873187U,	// CLGTBIv16i8
    1073742123U,	// CLGTBr8
    1073742123U,	// CLGTBv16i8
    1073873202U,	// CLGTHIr16
    1073873202U,	// CLGTHIv8i16
    1073742138U,	// CLGTHr16
    1073742138U,	// CLGTHv8i16
    1073873217U,	// CLGTIr32
    1073873217U,	// CLGTIv4i32
    1073742152U,	// CLGTr32
    1073742152U,	// CLGTv4i32
    1075839310U,	// CLZr32
    1075839310U,	// CLZv4i32
    1075839315U,	// CNTBv16i8
    1075839315U,	// CNTBv4i32
    1075839315U,	// CNTBv8i16
    1074790745U,	// CSiFf32
    1074790745U,	// CSiFv4f32
    1074790752U,	// CUiFf32
    1074790752U,	// CUiFv4f32
    1077936487U,	// CWD
    1077936487U,	// CWDf32
    1082130796U,	// CWX
    1082130796U,	// CWXf32
    1073742193U,	// CellSDKa
    1073742196U,	// CellSDKaddx
    1073742202U,	// CellSDKah
    1086718334U,	// CellSDKahi
    1086718339U,	// CellSDKai
    1073742215U,	// CellSDKand
    1074004365U,	// CellSDKandbi
    1073742229U,	// CellSDKandc
    1073873308U,	// CellSDKandhi
    1073873316U,	// CellSDKandi
    1073742251U,	// CellSDKbg
    1073742255U,	// CellSDKbgx
    1073742260U,	// CellSDKceq
    1073742266U,	// CellSDKceqb
    1074004417U,	// CellSDKceqbi
    1073742281U,	// CellSDKceqh
    1073873360U,	// CellSDKceqhi
    1073873368U,	// CellSDKceqi
    1073742303U,	// CellSDKcg
    1073742307U,	// CellSDKcgt
    1073742313U,	// CellSDKcgtb
    1074004464U,	// CellSDKcgtbi
    1073742328U,	// CellSDKcgth
    1073873407U,	// CellSDKcgthi
    1073873415U,	// CellSDKcgti
    1073742350U,	// CellSDKcgx
    1073742355U,	// CellSDKclgt
    1073742362U,	// CellSDKclgtb
    1074004514U,	// CellSDKclgtbi
    1073742379U,	// CellSDKclgth
    1073873459U,	// CellSDKclgthi
    1073873468U,	// CellSDKclgti
    1073742404U,	// CellSDKdfa
    1073742410U,	// CellSDKdfm
    1073742416U,	// CellSDKdfma
    1073742423U,	// CellSDKdfms
    1073742430U,	// CellSDKdfnma
    1073742438U,	// CellSDKdfnms
    1073742446U,	// CellSDKdfs
    1073742452U,	// CellSDKfa
    1073742457U,	// CellSDKfceq
    1073742464U,	// CellSDKfcgt
    1073742471U,	// CellSDKfcmeq
    1073742479U,	// CellSDKfcmgt
    1073742487U,	// CellSDKfm
    1073808028U,	// CellSDKfma
    1073808034U,	// CellSDKfms
    1073808040U,	// CellSDKfnms
    1073742511U,	// CellSDKfs
    1073742516U,	// CellSDKmpy
    1073808057U,	// CellSDKmpya
    1073742527U,	// CellSDKmpyh
    1073742533U,	// CellSDKmpyhh
    1073742540U,	// CellSDKmpyhha
    1073742548U,	// CellSDKmpyhhau
    1073742557U,	// CellSDKmpyhhu
    1073873637U,	// CellSDKmpyi
    1073742571U,	// CellSDKmpys
    1073742577U,	// CellSDKmpyu
    1073873655U,	// CellSDKmpyui
    1073742590U,	// CellSDKnand
    1073742597U,	// CellSDKnor
    1073742603U,	// CellSDKor
    1074004752U,	// CellSDKorbi
    1073742615U,	// CellSDKorc
    1073873694U,	// CellSDKorhi
    1073873701U,	// CellSDKori
    1073742635U,	// CellSDKsf
    1073742639U,	// CellSDKsfh
    1086718772U,	// CellSDKsfhi
    1086718778U,	// CellSDKsfi
    1073742655U,	// CellSDKsfx
    1073742660U,	// CellSDKxor
    1074004810U,	// CellSDKxorbi
    1073873746U,	// CellSDKxorhi
    1073873754U,	// CellSDKxori
    1073742689U,	// DFNMSf64
    1073742689U,	// DFNMSv2f64
    3221226344U,	// DWARF_LOC
    536871790U,	// ENOP
    1073742707U,	// EQVr128
    1073742707U,	// EQVr128_1
    1073742707U,	// EQVr128_2
    1073742707U,	// EQVr128_3
    1073742707U,	// EQVr16
    1073742707U,	// EQVr16_1
    1073742707U,	// EQVr16_2
    1073742707U,	// EQVr16_3
    1073742707U,	// EQVr32
    1073742707U,	// EQVr32_1
    1073742707U,	// EQVr32_2
    1073742707U,	// EQVr32_3
    1073742707U,	// EQVr64
    1073742707U,	// EQVr64_1
    1073742707U,	// EQVr64_2
    1073742707U,	// EQVr64_3
    1073742707U,	// EQVr8
    1073742707U,	// EQVr8_1
    1073742707U,	// EQVr8_2
    1073742707U,	// EQVr8_3
    1073742707U,	// EQVv16i8
    1073742707U,	// EQVv16i8_1
    1073742707U,	// EQVv16i8_2
    1073742707U,	// EQVv16i8_3
    1073742707U,	// EQVv2i64
    1073742707U,	// EQVv2i64_1
    1073742707U,	// EQVv2i64_2
    1073742707U,	// EQVv2i64_3
    1073742707U,	// EQVv4i32
    1073742707U,	// EQVv4i32_1
    1073742707U,	// EQVv4i32_2
    1073742707U,	// EQVv4i32_3
    1073742707U,	// EQVv8i16
    1073742707U,	// EQVv8i16_1
    1073742707U,	// EQVv8i16_2
    1073742707U,	// EQVv8i16_3
    1073742712U,	// FAf32
    1073742716U,	// FAf64
    1073742716U,	// FAv2f64
    1073742712U,	// FAv4f32
    1073742721U,	// FCEQf32
    1073742727U,	// FCGTf32
    1073742733U,	// FCMEQf32
    1073742740U,	// FCMGTf32
    1075839899U,	// FESDf32
    1075839899U,	// FESDvec
    1073742753U,	// FIf32
    1073742753U,	// FIv4f32
    1073808293U,	// FMAf32
    1073742762U,	// FMAf64
    1073742762U,	// FMAv2f64
    1073808293U,	// FMAv4f32
    1073808304U,	// FMSf32
    1073742773U,	// FMSf64
    1073742773U,	// FMSv2f64
    1073808304U,	// FMSv4f32
    1073742779U,	// FMf32
    1073742783U,	// FMf64
    1073742783U,	// FMv2f64
    1073742779U,	// FMv4f32
    1073742788U,	// FNMAf64
    1073742788U,	// FNMAv2f64
    1073808331U,	// FNMSf32
    1073808331U,	// FNMSv4f32
    1075839953U,	// FRDSf64
    1075839959U,	// FRESTf32
    1075839959U,	// FRESTv4f32
    1275069406U,	// FSCRRf32
    3758097382U,	// FSCRWf32
    1075839982U,	// FSM64r16
    1075839982U,	// FSM64r32
    1090520051U,	// FSMBIv16i8
    1090520051U,	// FSMBIv2i64
    1090520051U,	// FSMBIv4i32
    1090520051U,	// FSMBIv8i16
    1075839994U,	// FSMBv16i8
    1075839994U,	// FSMBv16i8_r16
    1075840000U,	// FSMHv8i16
    1075840000U,	// FSMHv8i16_r16
    1075839982U,	// FSMr16
    1075839982U,	// FSMr32
    1075839982U,	// FSMv4i32
    1073742854U,	// FSf32
    1073742858U,	// FSf64
    1073742858U,	// FSv2f64
    1073742854U,	// FSv4f32
    1075840015U,	// GBBv16i8
    1075840015U,	// GBBv16i8_r16
    1075840015U,	// GBBv16i8_r32
    1075840020U,	// GBHv8i16
    1075840020U,	// GBHv8i16_r16
    1075840020U,	// GBHv8i16_r32
    1075840025U,	// GBv4i32
    1075840025U,	// GBv4i32_r16
    1075840025U,	// GBv4i32_r32
    1094714397U,	// HEQIr32
    1075840035U,	// HEQr32
    1094714408U,	// HGTIr32
    1075840046U,	// HGTr32
    1094714419U,	// HLGTIr32
    1075840058U,	// HLGTr32
    1098908736U,	// ILAf32
    1098908736U,	// ILAf64
    1103103040U,	// ILAhi
    1107297344U,	// ILAlo
    1111491648U,	// ILAlsa
    1098908736U,	// ILAr32
    1098908736U,	// ILAr64
    1098908736U,	// ILAv2i64
    1098908736U,	// ILAv4i32
    1090520133U,	// ILHUf32
    1103103045U,	// ILHUhi
    1090520133U,	// ILHUr32
    1090520133U,	// ILHUr64
    1090520133U,	// ILHUv2i64
    1090520133U,	// ILHUv4i32
    1115685963U,	// ILHr16
    1115685963U,	// ILHr8
    1115685963U,	// ILHv8i16
    1115685968U,	// ILf32
    1115685968U,	// ILf64
    1115685968U,	// ILr32
    1115685968U,	// ILr64
    1115685968U,	// ILv2i64
    1115685968U,	// ILv4i32
    1088422996U,	// IOHLf32
    1119880276U,	// IOHLlo
    1088422996U,	// IOHLr32
    1124074580U,	// IOHLv2i64
    1124074580U,	// IOHLv4i32
    536872026U,	// LNOP
    1128268895U,	// LQAf32
    1128268895U,	// LQAf64
    1128268895U,	// LQAr128
    1128268895U,	// LQAr16
    1128268895U,	// LQAr32
    1128268895U,	// LQAr64
    1128268895U,	// LQAr8
    1128268895U,	// LQAv16i8
    1128268895U,	// LQAv2f64
    1128268895U,	// LQAv2i32
    1128268895U,	// LQAv2i64
    1128268895U,	// LQAv4f32
    1128268895U,	// LQAv4i32
    1128268895U,	// LQAv8i16
    1132463204U,	// LQDf32
    1132463204U,	// LQDf64
    1132463204U,	// LQDr128
    1132463204U,	// LQDr16
    1132463204U,	// LQDr32
    1132463204U,	// LQDr64
    1132463204U,	// LQDr8
    1132463204U,	// LQDv16i8
    1132463204U,	// LQDv2f64
    1132463204U,	// LQDv2i32
    1132463204U,	// LQDv2i64
    1132463204U,	// LQDv4f32
    1132463204U,	// LQDv4i32
    1132463204U,	// LQDv8i16
    1082131561U,	// LQXf32
    1082131561U,	// LQXf64
    1082131561U,	// LQXr128
    1082131561U,	// LQXr16
    1082131561U,	// LQXr32
    1082131561U,	// LQXr64
    1082131561U,	// LQXr8
    1082131561U,	// LQXv16i8
    1082131561U,	// LQXv2f64
    1082131561U,	// LQXv2i32
    1082131561U,	// LQXv2i64
    1082131561U,	// LQXv4f32
    1082131561U,	// LQXv4i32
    1082131561U,	// LQXv8i16
    1075840110U,	// LRf32
    1075840110U,	// LRf64
    1075840110U,	// LRr128
    1075840110U,	// LRr16
    1075840110U,	// LRr32
    1075840110U,	// LRr64
    1075840110U,	// LRr8
    1075840110U,	// LRv16i8
    1075840110U,	// LRv2f64
    1075840110U,	// LRv2i64
    1075840110U,	// LRv4f32
    1075840110U,	// LRv4i32
    1075840110U,	// LRv8i16
    1073808498U,	// MPYAr32
    1073808498U,	// MPYAr32_sext
    1073808498U,	// MPYAr32_sextinreg
    1073808498U,	// MPYAv4i32
    1073742968U,	// MPYHHAUr32
    1073742968U,	// MPYHHAUvec
    1073742977U,	// MPYHHAr32
    1073742977U,	// MPYHHAvec
    1073742985U,	// MPYHHUr32
    1073742985U,	// MPYHHUv4i32
    1073742993U,	// MPYHHr32
    1073742993U,	// MPYHHv8i16
    1073743000U,	// MPYHr32
    1073743000U,	// MPYHv4i32
    1073874078U,	// MPYIr16
    1073874078U,	// MPYIvec
    1073743012U,	// MPYSr16
    1073743012U,	// MPYSv4i32
    1073874090U,	// MPYUIr16
    1073874090U,	// MPYUIvec
    1073743025U,	// MPYUr16
    1073743025U,	// MPYUr32
    1073743025U,	// MPYUv4i32
    1073743031U,	// MPYr16
    1073743031U,	// MPYv8i16
    1073743036U,	// NANDr128
    1073743036U,	// NANDr16
    1073743036U,	// NANDr32
    1073743036U,	// NANDr64
    1073743036U,	// NANDr8
    1073743036U,	// NANDv16i8
    1073743036U,	// NANDv2i64
    1073743036U,	// NANDv4i32
    1073743036U,	// NANDv8i16
    1073743042U,	// NORr128
    1073743042U,	// NORr16
    1073743042U,	// NORr32
    1073743042U,	// NORr64
    1073743042U,	// NORr8
    1073743042U,	// NORv16i8
    1073743042U,	// NORv2i64
    1073743042U,	// NORv4i32
    1073743042U,	// NORv8i16
    1074005191U,	// ORBIr8
    1074005191U,	// ORBIv16i8
    1073743053U,	// ORCr128
    1073743053U,	// ORCr16
    1073743053U,	// ORCr32
    1073743053U,	// ORCr64
    1073743053U,	// ORCr8
    1073743053U,	// ORCv16i8
    1073743053U,	// ORCv2i64
    1073743053U,	// ORCv4i32
    1073743053U,	// ORCv8i16
    1073874130U,	// ORHIi8i16
    1074005202U,	// ORHIr16
    1074005202U,	// ORHIv8i16
    1073874136U,	// ORIi16i32
    1073874136U,	// ORIi8i32
    1074005208U,	// ORIr32
    1074005208U,	// ORIv4i32
    1073743069U,	// ORXv4i32
    1073743074U,	// ORf32
    1074267362U,	// ORf32_r32
    1074267362U,	// ORf32_v4f32
    1073743074U,	// ORf64
    1074267362U,	// ORf64_r64
    1074267362U,	// ORf64_v2f64
    1074267362U,	// ORi128_vec
    1074267362U,	// ORi16_v8i16
    1074267362U,	// ORi32_v4i32
    1074267362U,	// ORi64_v2i64
    1074267362U,	// ORi8_v16i8
    1073743074U,	// ORr128
    1073743074U,	// ORr16
    1073743074U,	// ORr32
    1074267362U,	// ORr32_f32
    1074267362U,	// ORr32_r64
    1073743074U,	// ORr64
    1074267362U,	// ORr64_f64
    1074267362U,	// ORr64_r32
    1073743074U,	// ORr8
    1073743074U,	// ORv16i8
    1074267362U,	// ORv16i8_i8
    1073743074U,	// ORv2f64
    1074267362U,	// ORv2f64_f64
    1073743074U,	// ORv2i64
    1074267362U,	// ORv2i64_i64
    1073743074U,	// ORv4f32
    1074267362U,	// ORv4f32_f32
    1073743074U,	// ORv4i32
    1074267362U,	// ORv4i32_i32
    1073743074U,	// ORv8i16
    1074267362U,	// ORv8i16_i16
    1074267362U,	// ORvec_i128
    536872166U,	// RET
    1074398445U,	// ROTHIr16
    1074398445U,	// ROTHIr16_r32
    1074398445U,	// ROTHIv8i16
    1074529524U,	// ROTHMIr16
    1074529524U,	// ROTHMIv8i16
    1073743100U,	// ROTHMr16
    1073743100U,	// ROTHMv8i16
    1073743107U,	// ROTHr16
    1073743107U,	// ROTHr16_r32
    1073743107U,	// ROTHv8i16
    1074398473U,	// ROTIr32
    1074398473U,	// ROTIr32_i16
    1074398473U,	// ROTIr32_i8
    1074398473U,	// ROTIv4i32
    1074398473U,	// ROTIv4i32_i16
    1074398473U,	// ROTIv4i32_i8
    1074529551U,	// ROTMAHIr16
    1074529551U,	// ROTMAHIv8i16
    1073743128U,	// ROTMAHr16
    1073743128U,	// ROTMAHv8i16
    1074660640U,	// ROTMAIr32_i32
    1074660640U,	// ROTMAIr64_i32
    1074660640U,	// ROTMAIv2i64_i32
    1074660640U,	// ROTMAIv4i32_i32
    1073743144U,	// ROTMAr32
    1073743144U,	// ROTMAv4i32
    1074660655U,	// ROTMIr32
    1074660655U,	// ROTMIv4i32
    1073743158U,	// ROTMr32
    1073743158U,	// ROTMv4i32
    1074398524U,	// ROTQBIIr128
    1074398524U,	// ROTQBIIr64
    1074398524U,	// ROTQBIIv16i8
    1074398524U,	// ROTQBIIv2i64
    1074398524U,	// ROTQBIIv4i32
    1074398524U,	// ROTQBIIv8i16
    1073743173U,	// ROTQBIr128
    1073743173U,	// ROTQBIr64
    1073743173U,	// ROTQBIv16i8
    1073743173U,	// ROTQBIv2i64
    1073743173U,	// ROTQBIv4i32
    1073743173U,	// ROTQBIv8i16
    1073743181U,	// ROTQBYBIv16i8_r32
    1073743181U,	// ROTQBYBIv2i64_r32
    1073743181U,	// ROTQBYBIv4i32_r32
    1073743181U,	// ROTQBYBIv8i16_r32
    1074398551U,	// ROTQBYIv16i8
    1074398551U,	// ROTQBYIv2i64
    1074398551U,	// ROTQBYIv4f32
    1074398551U,	// ROTQBYIv4i32
    1074398551U,	// ROTQBYIv8i16
    1074398551U,	// ROTQBYIvfi64
    1073743200U,	// ROTQBYv16i8
    1073743200U,	// ROTQBYv2f64
    1073743200U,	// ROTQBYv2i64
    1073743200U,	// ROTQBYv4f32
    1073743200U,	// ROTQBYv4i32
    1073743200U,	// ROTQBYv8i16
    1074660712U,	// ROTQMBIIr128
    1074660712U,	// ROTQMBIIr64
    1074660712U,	// ROTQMBIIv16i8
    1074660712U,	// ROTQMBIIv2i64
    1074660712U,	// ROTQMBIIv4i32
    1074660712U,	// ROTQMBIIv8i16
    1073743218U,	// ROTQMBIr128
    1073743218U,	// ROTQMBIr64
    1073743218U,	// ROTQMBIv16i8
    1073743218U,	// ROTQMBIv2i64
    1073743218U,	// ROTQMBIv4i32
    1073743218U,	// ROTQMBIv8i16
    1073743227U,	// ROTQMBYBIv16i8
    1073743227U,	// ROTQMBYBIv2i64
    1073743227U,	// ROTQMBYBIv4i32
    1073743227U,	// ROTQMBYBIv8i16
    1074660742U,	// ROTQMBYIr128
    1074660742U,	// ROTQMBYIr128_zext_r16
    1074660742U,	// ROTQMBYIr128_zext_r32
    1074660742U,	// ROTQMBYIr128_zext_r64
    1074660742U,	// ROTQMBYIr128_zext_r8
    1074660742U,	// ROTQMBYIr64
    1074660742U,	// ROTQMBYIv16i8
    1074660742U,	// ROTQMBYIv2i64
    1074660742U,	// ROTQMBYIv4i32
    1074660742U,	// ROTQMBYIv8i16
    1073743248U,	// ROTQMBYr128
    1073743248U,	// ROTQMBYr64
    1073743248U,	// ROTQMBYv16i8
    1073743248U,	// ROTQMBYv2i64
    1073743248U,	// ROTQMBYv4i32
    1073743248U,	// ROTQMBYv8i16
    1073743257U,	// ROTr32
    1073743257U,	// ROTr32_r16_anyext
    1073743257U,	// ROTr32_r8_anyext
    1073743257U,	// ROTv4i32
    1073808798U,	// SELBf32_cond
    1073808798U,	// SELBf64_cond
    1073808798U,	// SELBr128
    1073808798U,	// SELBr16
    1073808798U,	// SELBr16_cond
    1073808798U,	// SELBr32
    1073808798U,	// SELBr32_cond
    1073808798U,	// SELBr64
    1073808798U,	// SELBr64_cond
    1073808798U,	// SELBr8
    1073808798U,	// SELBr8_cond
    1073808798U,	// SELBv16i8
    1073808798U,	// SELBv16i8_cond
    1073808798U,	// SELBv16i8_vcond
    1073808798U,	// SELBv2i64
    1073808798U,	// SELBv2i64_cond
    1073808798U,	// SELBv2i64_vcond
    1073808798U,	// SELBv4f32_cond
    1073808798U,	// SELBv4i32
    1073808798U,	// SELBv4i32_cond
    1073808798U,	// SELBv4i32_vcond
    1073808798U,	// SELBv8i16
    1073808798U,	// SELBv8i16_cond
    1073808798U,	// SELBv8i16_vcond
    1073874340U,	// SFHIr16
    1073874340U,	// SFHIvec
    1073743274U,	// SFHr16
    1073743274U,	// SFHvec
    1073874351U,	// SFIr32
    1073874351U,	// SFIvec
    1073743284U,	// SFXr32
    1073743284U,	// SFXr64
    1073743284U,	// SFXv2i64
    1073743284U,	// SFXv4i32
    1073743289U,	// SFr32
    1073743289U,	// SFvec
    1074398653U,	// SHLHIr16
    1074398653U,	// SHLHIv8i16
    1073743300U,	// SHLHr16
    1073743300U,	// SHLHr16_r32
    1073743300U,	// SHLHv8i16
    1074398666U,	// SHLIr32
    1074398666U,	// SHLIv4i32
    1074398672U,	// SHLQBIIv16i8
    1074398672U,	// SHLQBIIv2f64
    1074398672U,	// SHLQBIIv2i64
    1074398672U,	// SHLQBIIv4f32
    1074398672U,	// SHLQBIIv4i32
    1074398672U,	// SHLQBIIv8i16
    1073743321U,	// SHLQBIr128
    1073743321U,	// SHLQBIv16i8
    1073743321U,	// SHLQBIv2f64
    1073743321U,	// SHLQBIv2i64
    1073743321U,	// SHLQBIv4f32
    1073743321U,	// SHLQBIv4i32
    1073743321U,	// SHLQBIv8i16
    1073743329U,	// SHLQBYBIr128
    1073743329U,	// SHLQBYBIv16i8
    1073743329U,	// SHLQBYBIv2f64
    1073743329U,	// SHLQBYBIv2i64
    1073743329U,	// SHLQBYBIv4f32
    1073743329U,	// SHLQBYBIv4i32
    1073743329U,	// SHLQBYBIv8i16
    1074398699U,	// SHLQBYIr128
    1074398699U,	// SHLQBYIv16i8
    1074398699U,	// SHLQBYIv2f64
    1074398699U,	// SHLQBYIv2i64
    1074398699U,	// SHLQBYIv4f32
    1074398699U,	// SHLQBYIv4i32
    1074398699U,	// SHLQBYIv8i16
    1073743348U,	// SHLQBYr128
    1073743348U,	// SHLQBYv16i8
    1073743348U,	// SHLQBYv2f64
    1073743348U,	// SHLQBYv2i64
    1073743348U,	// SHLQBYv4f32
    1073743348U,	// SHLQBYv4i32
    1073743348U,	// SHLQBYv8i16
    1073743356U,	// SHLr32
    1073743356U,	// SHLv4i32
    1073808897U,	// SHUFBgprc
    1073808897U,	// SHUFBv16i8
    1073808897U,	// SHUFBv16i8_m32
    1073808897U,	// SHUFBv2f64
    1073808897U,	// SHUFBv2f64_m32
    1073808897U,	// SHUFBv2i64
    1073808897U,	// SHUFBv2i64_m32
    1073808897U,	// SHUFBv4f32
    1073808897U,	// SHUFBv4f32_m32
    1073808897U,	// SHUFBv4i32
    1073808897U,	// SHUFBv4i32_m32
    1073808897U,	// SHUFBv8i16
    1073808897U,	// SHUFBv8i16_m32
    1128269320U,	// STQAf32
    1128269320U,	// STQAf64
    1128269320U,	// STQAr128
    1128269320U,	// STQAr16
    1128269320U,	// STQAr32
    1128269320U,	// STQAr64
    1128269320U,	// STQAr8
    1128269320U,	// STQAv16i8
    1128269320U,	// STQAv2f64
    1128269320U,	// STQAv2i32
    1128269320U,	// STQAv2i64
    1128269320U,	// STQAv4f32
    1128269320U,	// STQAv4i32
    1128269320U,	// STQAv8i16
    1132463630U,	// STQDf32
    1132463630U,	// STQDf64
    1132463630U,	// STQDr128
    1132463630U,	// STQDr16
    1132463630U,	// STQDr32
    1132463630U,	// STQDr64
    1132463630U,	// STQDr8
    1132463630U,	// STQDv16i8
    1132463630U,	// STQDv2f64
    1132463630U,	// STQDv2i32
    1132463630U,	// STQDv2i64
    1132463630U,	// STQDv4f32
    1132463630U,	// STQDv4i32
    1132463630U,	// STQDv8i16
    1082131988U,	// STQXf32
    1082131988U,	// STQXf64
    1082131988U,	// STQXr128
    1082131988U,	// STQXr16
    1082131988U,	// STQXr32
    1082131988U,	// STQXr64
    1082131988U,	// STQXr8
    1082131988U,	// STQXv16i8
    1082131988U,	// STQXv2f64
    1082131988U,	// STQXv2i32
    1082131988U,	// STQXv2i64
    1082131988U,	// STQXv4f32
    1082131988U,	// STQXv4i32
    1082131988U,	// STQXv8i16
    1073743386U,	// SUMB
    1074005536U,	// XORBIr8
    1074005536U,	// XORBIv16i8
    1073874471U,	// XORHIr16
    1074005543U,	// XORHIv8i16
    1073874478U,	// XORIr32
    1073874478U,	// XORIv4i32
    1073743412U,	// XORfneg32
    1073743412U,	// XORfneg64
    1073743412U,	// XORfnegvec
    1073743412U,	// XORr128
    1073743412U,	// XORr16
    1073743412U,	// XORr32
    1073743412U,	// XORr64
    1073743412U,	// XORr8
    1073743412U,	// XORv16i8
    1073743412U,	// XORv2i64
    1073743412U,	// XORv4i32
    1073743412U,	// XORv8i16
    1075840569U,	// XSBHr16
    1075840569U,	// XSBHr32
    1075840569U,	// XSBHr64
    1075840569U,	// XSBHr8
    1075840569U,	// XSBHv16i8
    1075840575U,	// XSHWr16
    1075840575U,	// XSHWr32
    1075840575U,	// XSHWr64
    1075840575U,	// XSHWv4i32
    1075840581U,	// XSWDr64
    1075840581U,	// XSWDr64_inreg
    1075840581U,	// XSWDv2i64
    0U
  };

  const char *AsmStrs = 
    "\000\000PHINODE\000absdb\t\000addx\t\000ahi\t\000ah\t\000ai\t\000andbi\t"
    "\000andc\t\000andhi\t\000andi\t\000and\t\000avgb\t\000a\t\000bgx\t\000b"
    "g\t\000bi\t\000bisl\t$lr, \000bisled\t$lr, \000br\t\000bra\t\000brasl\t"
    "$lr, \000brhnz\t\000brhz\t\000brnz\t\000brsl\t$lr, \000brz\t\000cbd\t\000"
    "cbx\t\000cdd\t\000cdx\t\000ceqbi\t\000ceqb\t\000ceqhi\t\000ceqh\t\000ce"
    "qi\t\000ceq\t\000cflts\t\000cfltu\t\000cgtbi\t\000cgtb\t\000cgthi\t\000"
    "cgth\t\000cgti\t\000cgt\t\000cg\t\000chd\t\000chx\t\000clgtbi\t\000clgt"
    "b\t\000clgthi\t\000clgth\t\000clgti\t\000clgt\t\000clz\t\000cntb\t\000c"
    "sflt\t\000cuflt\t\000cwd\t\000cwx\t\000a \000addx \000ah \000ahi \000ai"
    " \000and\t \000andbi\t \000andc\t \000andhi\t \000andi\t \000bg \000bgx"
    " \000ceq\t \000ceqb\t \000ceqbi\t \000ceqh\t \000ceqhi\t \000ceqi\t \000"
    "cg \000cgt\t \000cgtb\t \000cgtbi\t \000cgth\t \000cgthi\t \000cgti\t \000"
    "cgx \000clgt\t \000clgtb\t \000clgtbi\t \000clgth\t \000clgthi\t \000cl"
    "gti\t \000dfa\t \000dfm\t \000dfma\t \000dfms\t \000dfnma\t \000dfnms\t"
    " \000dfs\t \000fa\t \000fceq\t \000fcgt\t \000fcmeq\t \000fcmgt\t \000f"
    "m\t \000fma\t \000fms\t \000fnms\t \000fs\t \000mpy \000mpya \000mpyh \000"
    "mpyhh \000mpyhha \000mpyhhau \000mpyhhu \000mpyi \000mpys \000mpyu \000"
    "mpyui \000nand\t \000nor\t \000or\t \000orbi\t \000addc\t \000orhi\t \000"
    "ori\t \000sf \000sfh \000sfhi \000sfi \000sfx \000xor\t \000xorbi\t \000"
    "xorhi\t \000xori\t \000dfnms\t\000.loc \000enop\000eqv\t\000fa\t\000dfa"
    "\t\000fceq\t\000fcgt\t\000fcmeq\t\000fcmgt\t\000fesd\t\000fi\t\000fma\t"
    "\000dfma\t\000fms\t\000dfms\t\000fm\t\000dfm\t\000dfnma\t\000fnms\t\000"
    "frds\t\000frest\t\000fscrrd\t\000fscrwr\t\000fsm\t\000fsmbi\t\000fsmb\t"
    "\000fsmh\t\000fs\t\000dfs\t\000gbb\t\000gbh\t\000gb\t\000heqi\t\000heq\t"
    "\000hgti\t\000hgt\t\000hlgti\t\000hlgt\t\000ila\t\000ilhu\t\000ilh\t\000"
    "il\t\000iohl\t\000lnop\000lqa\t\000lqd\t\000lqx\t\000lr\t\000mpya\t\000"
    "mpyhhau\t\000mpyhha\t\000mpyhhu\t\000mpyhh\t\000mpyh\t\000mpyi\t\000mpy"
    "s\t\000mpyui\t\000mpyu\t\000mpy\t\000nand\t\000nor\t\000orbi\t\000orc\t"
    "\000orhi\t\000ori\t\000orx\t\000or\t\000bi\t$lr\000rothi\t\000rothmi\t\000"
    "rothm\t\000roth\t\000roti\t\000rotmahi\t\000rotmah\t\000rotmai\t\000rot"
    "ma\t\000rotmi\t\000rotm\t\000rotqbii\t\000rotqbi\t\000rotqbybi\t\000rot"
    "qbyi\t\000rotqby\t\000rotqmbii\t\000rotqmbi\t\000rotqmbybi\t\000rotqmby"
    "i\t\000rotqmby\t\000rot\t\000selb\t\000sfhi\t\000sfh\t\000sfi\t\000sfx\t"
    "\000sf\t\000shlhi\t\000shlh\t\000shli\t\000shlqbii\t\000shlqbi\t\000shl"
    "qbybi\t\000shlqbyi\t\000shlqby\t\000shl\t\000shufb\t\000stqa\t\000stqd\t"
    "\000stqx\t\000sumb\t\000xorbi\t\000xorhi\t\000xori\t\000xor\t\000xsbh\t"
    "\000xshw\t\000xswd\t\000";

  processDebugLoc(MI->getDebugLoc());


#ifndef NO_ASM_WRITER_BOILERPLATE
  if (MI->getOpcode() == TargetInstrInfo::INLINEASM) {
    O << "\t";
    printInlineAsm(MI);
    return;
  } else if (MI->isLabel()) {
    printLabel(MI);
    return;
  } else if (MI->getOpcode() == TargetInstrInfo::DECLARE) {
    printDeclare(MI);
    return;
  } else if (MI->getOpcode() == TargetInstrInfo::IMPLICIT_DEF) {
    printImplicitDef(MI);
    return;
  }


#endif
  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047);


  // Fragment 0 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    return;
    break;
  case 1:
    // PHI, ENOP, LNOP, RET
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    printOperand(MI, 0); 
    break;
  case 3:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    PrintSpecial(MI, "comment"); 
    break;
  case 4:
    // BISLED_00, BISLED_0D, BISLED_E0, BISLED_ED, BRASL
    printCallOperand(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 5:
    // BR, BRA, BRSL
    printPCRelativeOperand(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 6:
    // DWARF_LOC
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 7:
    // FSCRWf32
    printOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }


  // Fragment 1 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 26) & 7) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN
    O << " ADJCALLSTACKDOWN"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // ADJCALLSTACKUP
    O << " ADJCALLSTACKUP"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 3:
    // BI, BISL, FSCRRf32
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 4:
    // BRHNZr16, BRHNZv8i16, BRHZr16, BRHZv8i16, BRNZr32, BRNZv4i32, BRZr32, ...
    O << ','; 
    printPCRelativeOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 22) & 15) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    printOperand(MI, 1); 
    break;
  case 1:
    // CBD, CDD, CDDf64, CHD, CWD, CWDf32
    printShufAddr(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // CBX, CDX, CDXf64, CHX, CWX, CWXf32, LQXf32, LQXf64, LQXr128, LQXr16, L...
    printMemRegReg(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 3:
    // CellSDKahi, CellSDKai, CellSDKsfhi, CellSDKsfi, IOHLf32, IOHLr32
    printOperand(MI, 2); 
    break;
  case 4:
    // FSMBIv16i8, FSMBIv2i64, FSMBIv4i32, FSMBIv8i16, ILHUf32, ILHUr32, ILHU...
    printU16ImmOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 5:
    // HEQIr32, HGTIr32, HLGTIr32
    printS10ImmOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 6:
    // ILAf32, ILAf64, ILAr32, ILAr64, ILAv2i64, ILAv4i32
    printU18ImmOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 7:
    // ILAhi, ILHUhi
    printSymbolHi(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 8:
    // ILAlo
    printSymbolLo(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 9:
    // ILAlsa
    printSymbolLSA(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 10:
    // ILHr16, ILHr8, ILHv8i16, ILf32, ILf64, ILr32, ILr64, ILv2i64, ILv4i32
    printS16ImmOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 11:
    // IOHLlo
    printSymbolLo(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 12:
    // IOHLv2i64, IOHLv4i32
    printU16ImmOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 13:
    // LQAf32, LQAf64, LQAr128, LQAr16, LQAr32, LQAr64, LQAr8, LQAv16i8, LQAv...
    printAddr256K(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 14:
    // LQDf32, LQDf64, LQDr128, LQDr16, LQDr32, LQDr64, LQDr8, LQDv16i8, LQDv...
    printDFormAddr(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 20) & 3) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    O << ", "; 
    break;
  case 1:
    // CFSif32, CFSiv4f32, CFUif32, CFUiv4f32, CSiFf32, CSiFv4f32, CUiFf32, C...
    O << ", 0"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // CLZr32, CLZv4i32, CNTBv16i8, CNTBv4i32, CNTBv8i16, FESDf32, FESDvec, F...
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 17) & 7) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHr16, AHv8i16, ANDCr12...
    printOperand(MI, 2); 
    break;
  case 1:
    // AHIr16, AHIvec, AIf32, AIr32, AIv4f32, AIv4i32, ANDHIv8i16, ANDIi16i32...
    printS10ImmOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // ANDBIr8, ANDBIv16i8, ANDHIi8i16, ANDHIr16, CellSDKandbi, CellSDKceqbi,...
    printU10ImmOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 3:
    // CellSDKahi, CellSDKai, CellSDKsfhi, CellSDKsfi
    printS10ImmOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 4:
    // ORf32_r32, ORf32_v4f32, ORf64_r64, ORf64_v2f64, ORi128_vec, ORi16_v8i1...
    printOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 5:
    // ROTHIr16, ROTHIr16_r32, ROTHIv8i16, ROTIr32, ROTIr32_i16, ROTIr32_i8, ...
    printU7ImmOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 6:
    // ROTHMIr16, ROTHMIv8i16, ROTMAHIr16, ROTMAHIv8i16
    printROTHNeg7Imm(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 7:
    // ROTMAIr32_i32, ROTMAIr64_i32, ROTMAIv2i64_i32, ROTMAIv4i32_i32, ROTMIr...
    printROTNeg7Imm(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 16) & 1) {
    // CellSDKfma, CellSDKfms, CellSDKfnms, CellSDKmpya, FMAf32, FMAv4f32, FM...
    O << ", "; 
    printOperand(MI, 3); 
    EmitComments(*MI);

    O << "\n"; 
    return;
  } else {
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHr16, AHv8i16, ANDCr12...
    EmitComments(*MI);

    O << "\n"; 
    return;
  }

  return;
}
