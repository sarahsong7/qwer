//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Target Instruction Enum Values
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

namespace llvm {

namespace BF {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    DBG_LABEL	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    DECLARE	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    ABORT	= 11,
    ADD	= 12,
    ADD16	= 13,
    ADD_RND20	= 14,
    ADDimm7	= 15,
    ADDpp	= 16,
    ADDpp_imm7	= 17,
    ADJCALLSTACKDOWN	= 18,
    ADJCALLSTACKUP	= 19,
    ALIGN16	= 20,
    ALIGN24	= 21,
    ALIGN8	= 22,
    AND	= 23,
    BITCLR	= 24,
    BITSET	= 25,
    BITTGL	= 26,
    BITTST	= 27,
    CALLa	= 28,
    CALLp	= 29,
    CLI	= 30,
    CSYNC	= 31,
    DISALGNEXCPT	= 32,
    EMUEXCPT	= 33,
    EXCPT	= 34,
    IDLE	= 35,
    JUMPa	= 36,
    JUMPcc	= 37,
    JUMPp	= 38,
    LINK	= 39,
    LOAD16fi	= 40,
    LOAD16i	= 41,
    LOAD16i_d16	= 42,
    LOAD16pi	= 43,
    LOAD16s32p_dec	= 44,
    LOAD16s32p_inc	= 45,
    LOAD16s32p_post	= 46,
    LOAD16z32p_dec	= 47,
    LOAD16z32p_inc	= 48,
    LOAD16z32p_post	= 49,
    LOAD32fi	= 50,
    LOAD32fp_nimm7m4	= 51,
    LOAD32i	= 52,
    LOAD32i_dec	= 53,
    LOAD32i_inc	= 54,
    LOAD32i_post	= 55,
    LOAD32imm	= 56,
    LOAD32p	= 57,
    LOAD32p_16s	= 58,
    LOAD32p_16z	= 59,
    LOAD32p_8s	= 60,
    LOAD32p_8z	= 61,
    LOAD32p_dec	= 62,
    LOAD32p_imm16_8s	= 63,
    LOAD32p_imm16_8z	= 64,
    LOAD32p_imm17m2_16s	= 65,
    LOAD32p_imm17m2_16z	= 66,
    LOAD32p_imm18m4	= 67,
    LOAD32p_inc	= 68,
    LOAD32p_post	= 69,
    LOAD32p_uimm5m2_16s	= 70,
    LOAD32p_uimm5m2_16z	= 71,
    LOAD32p_uimm6m4	= 72,
    LOAD32sym	= 73,
    LOAD8fi	= 74,
    LOAD8s32p_dec	= 75,
    LOAD8s32p_inc	= 76,
    LOAD8z32p_dec	= 77,
    LOAD8z32p_inc	= 78,
    LOADhi_dec	= 79,
    LOADhi_inc	= 80,
    LOADhp_post	= 81,
    LOADimm16	= 82,
    LOADimm7	= 83,
    LOADuimm16	= 84,
    MNOP	= 85,
    MOVE	= 86,
    MOVECC_nz	= 87,
    MOVECC_zext	= 88,
    MOVENCC_z	= 89,
    MOVE_cc_ac0	= 90,
    MOVE_ccncc	= 91,
    MOVE_ncccc	= 92,
    MOVEcc	= 93,
    MOVEsext	= 94,
    MOVEsext8	= 95,
    MOVEzext	= 96,
    MOVEzext8	= 97,
    MUL16	= 98,
    MUL32	= 99,
    MULHS16	= 100,
    MULhh32s	= 101,
    MULhh32u	= 102,
    NBITTST	= 103,
    NEG	= 104,
    NOP	= 105,
    NOT	= 106,
    ONES	= 107,
    OR	= 108,
    OR_ac0_cc	= 109,
    POP	= 110,
    PUSH	= 111,
    RAISE	= 112,
    RTS	= 113,
    SETEQdd	= 114,
    SETEQpp	= 115,
    SETEQri	= 116,
    SETEQri_not	= 117,
    SETLEdd	= 118,
    SETLEpp	= 119,
    SETLEri	= 120,
    SETLEri_not	= 121,
    SETLTdd	= 122,
    SETLTpp	= 123,
    SETLTri	= 124,
    SETLTri_not	= 125,
    SETNEdd	= 126,
    SETULEdd	= 127,
    SETULEpp	= 128,
    SETULEri	= 129,
    SETULEri_not	= 130,
    SETULTdd	= 131,
    SETULTpp	= 132,
    SETULTri	= 133,
    SETULTri_not	= 134,
    SLA16r	= 135,
    SLAr16	= 136,
    SLL16i	= 137,
    SLL16r	= 138,
    SLLi	= 139,
    SLLr	= 140,
    SLLr16	= 141,
    SRA16i	= 142,
    SRAi	= 143,
    SRAr	= 144,
    SRL16i	= 145,
    SRLi	= 146,
    SRLr	= 147,
    SSYNC	= 148,
    STI	= 149,
    STORE16fi	= 150,
    STORE16i_dec	= 151,
    STORE16i_inc	= 152,
    STORE16p_post	= 153,
    STORE16pi	= 154,
    STORE32fi	= 155,
    STORE32fp_nimm7m4	= 156,
    STORE32i	= 157,
    STORE32i_dec	= 158,
    STORE32i_inc	= 159,
    STORE32i_post	= 160,
    STORE32p	= 161,
    STORE32p_dec	= 162,
    STORE32p_imm18m4	= 163,
    STORE32p_inc	= 164,
    STORE32p_post	= 165,
    STORE32p_uimm6m4	= 166,
    STORE8fi	= 167,
    STORE8p	= 168,
    STORE8p_dec	= 169,
    STORE8p_imm16	= 170,
    STORE8p_inc	= 171,
    SUB	= 172,
    SUB16	= 173,
    UNLINK	= 174,
    XOR	= 175,
    INSTRUCTION_LIST_END = 176
  };
}
} // End llvm namespace 
