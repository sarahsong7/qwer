//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.  This method returns true if the
/// machine instruction was sufficiently described to print it, otherwise
/// it returns false.
void PPCAsmPrinter::printInstruction(const MachineInstr *MI) {
  static const unsigned OpInfo[] = {
    268435458U,	// PHI
    0U,	// INLINEASM
    0U,	// DBG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// DECLARE
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    536870922U,	// ADD4
    536870922U,	// ADD8
    536870927U,	// ADDC
    536870927U,	// ADDC8
    536870933U,	// ADDE
    536870933U,	// ADDE8
    536875035U,	// ADDI
    536875035U,	// ADDI8
    536875041U,	// ADDIC
    536875048U,	// ADDICo
    536879152U,	// ADDIS
    536879152U,	// ADDIS8
    536903735U,	// ADDME
    536903735U,	// ADDME8
    536903742U,	// ADDZE
    536903742U,	// ADDZE8
    809500673U,	// ADJCALLSTACKDOWN
    813694977U,	// ADJCALLSTACKUP
    536870981U,	// AND
    536870981U,	// AND8
    536870986U,	// ANDC
    536870986U,	// ANDC8
    536883280U,	// ANDISo
    536883280U,	// ANDISo8
    536883288U,	// ANDIo
    536883288U,	// ANDIo8
    817889281U,	// ATOMIC_CMP_SWAP_I16
    822083585U,	// ATOMIC_CMP_SWAP_I32
    826277889U,	// ATOMIC_CMP_SWAP_I64
    830472193U,	// ATOMIC_CMP_SWAP_I8
    834666497U,	// ATOMIC_LOAD_ADD_I16
    838860801U,	// ATOMIC_LOAD_ADD_I32
    843055105U,	// ATOMIC_LOAD_ADD_I64
    847249409U,	// ATOMIC_LOAD_ADD_I8
    851443713U,	// ATOMIC_LOAD_AND_I16
    855638017U,	// ATOMIC_LOAD_AND_I32
    859832321U,	// ATOMIC_LOAD_AND_I64
    864026625U,	// ATOMIC_LOAD_AND_I8
    868220929U,	// ATOMIC_LOAD_NAND_I16
    872415233U,	// ATOMIC_LOAD_NAND_I32
    876609537U,	// ATOMIC_LOAD_NAND_I64
    880803841U,	// ATOMIC_LOAD_NAND_I8
    884998145U,	// ATOMIC_LOAD_OR_I16
    889192449U,	// ATOMIC_LOAD_OR_I32
    893386753U,	// ATOMIC_LOAD_OR_I64
    897581057U,	// ATOMIC_LOAD_OR_I8
    901775361U,	// ATOMIC_LOAD_SUB_I16
    905969665U,	// ATOMIC_LOAD_SUB_I32
    910163969U,	// ATOMIC_LOAD_SUB_I64
    914358273U,	// ATOMIC_LOAD_SUB_I8
    918552577U,	// ATOMIC_LOAD_XOR_I16
    922746881U,	// ATOMIC_LOAD_XOR_I32
    926941185U,	// ATOMIC_LOAD_XOR_I64
    931135489U,	// ATOMIC_LOAD_XOR_I8
    935329793U,	// ATOMIC_SWAP_I16
    939524097U,	// ATOMIC_SWAP_I32
    943718401U,	// ATOMIC_SWAP_I64
    947912705U,	// ATOMIC_SWAP_I8
    1073741919U,	// B
    1489240162U,	// BCC
    268435556U,	// BCTR
    268435561U,	// BCTRL8_Darwin
    268435561U,	// BCTRL8_ELF
    268435561U,	// BCTRL_Darwin
    268435561U,	// BCTRL_SVR4
    1761607791U,	// BL8_Darwin
    1761607791U,	// BL8_ELF
    2030043251U,	// BLA8_Darwin
    2030043251U,	// BLA8_ELF
    2030043251U,	// BLA_Darwin
    2030043251U,	// BLA_SVR4
    1497366626U,	// BLR
    1761607791U,	// BL_Darwin
    1761607791U,	// BL_SVR4
    536871032U,	// CMPD
    536875134U,	// CMPDI
    536871045U,	// CMPLD
    536883340U,	// CMPLDI
    536871060U,	// CMPLW
    536883355U,	// CMPLWI
    536871075U,	// CMPW
    536875177U,	// CMPWI
    536903856U,	// CNTLZD
    536903864U,	// CNTLZW
    536871104U,	// CREQV
    536871111U,	// CROR
    537395392U,	// CRSET
    2147483853U,	// DCBA
    2147483859U,	// DCBF
    2147483865U,	// DCBI
    2147483871U,	// DCBST
    2147483878U,	// DCBT
    2147483884U,	// DCBTST
    2147483892U,	// DCBZ
    2147483898U,	// DCBZL
    536871169U,	// DIVD
    536871175U,	// DIVDU
    536871182U,	// DIVW
    536871188U,	// DIVWU
    2415919387U,	// DSS
    268435744U,	// DSSALL
    2684354855U,	// DST
    2684354855U,	// DST64
    2684354860U,	// DSTST
    2684354860U,	// DSTST64
    2684354867U,	// DSTSTT
    2684354867U,	// DSTSTT64
    2684354875U,	// DSTT
    2684354875U,	// DSTT64
    964689921U,	// DWARF_LOC
    968884225U,	// DYNALLOC
    973078529U,	// DYNALLOC8
    536871233U,	// EQV
    536871233U,	// EQV8
    536904006U,	// EXTSB
    536904006U,	// EXTSB8
    536904013U,	// EXTSH
    536904013U,	// EXTSH8
    536904020U,	// EXTSW
    536904020U,	// EXTSW_32
    536904020U,	// EXTSW_32_64
    536904027U,	// FABSD
    536904027U,	// FABSS
    536871265U,	// FADD
    536871271U,	// FADDS
    536871265U,	// FADDrtz
    536904046U,	// FCFID
    536871285U,	// FCMPUD
    536871285U,	// FCMPUS
    536904060U,	// FCTIDZ
    536904068U,	// FCTIWZ
    536871308U,	// FDIV
    536871314U,	// FDIVS
    536871321U,	// FMADD
    536871328U,	// FMADDS
    536904104U,	// FMRD
    536904104U,	// FMRS
    536904104U,	// FMRSD
    536871341U,	// FMSUB
    536871348U,	// FMSUBS
    536871356U,	// FMUL
    536871362U,	// FMULS
    536904137U,	// FNABSD
    536904137U,	// FNABSS
    536904144U,	// FNEGD
    536904144U,	// FNEGS
    536871382U,	// FNMADD
    536871390U,	// FNMADDS
    536871399U,	// FNMSUB
    536871407U,	// FNMSUBS
    536904184U,	// FRSP
    536871422U,	// FSELD
    536871422U,	// FSELS
    536904196U,	// FSQRT
    536904203U,	// FSQRTS
    536871443U,	// FSUB
    536871449U,	// FSUBS
    537723424U,	// LA
    537920036U,	// LBZ
    537920036U,	// LBZ8
    538182185U,	// LBZU
    538182185U,	// LBZU8
    538444335U,	// LBZX
    538444335U,	// LBZX8
    538706485U,	// LD
    538444345U,	// LDARX
    538968640U,	// LDU
    538444357U,	// LDX
    539230773U,	// LDtoc
    537920074U,	// LFD
    538182218U,	// LFDU
    538444367U,	// LFDX
    537920085U,	// LFS
    538182229U,	// LFSU
    538444378U,	// LFSX
    537920096U,	// LHA
    537920096U,	// LHA8
    538182245U,	// LHAU
    537756261U,	// LHAU8
    538444395U,	// LHAX
    538444395U,	// LHAX8
    538444401U,	// LHBRX
    537920120U,	// LHZ
    537920120U,	// LHZ8
    538182269U,	// LHZU
    538182269U,	// LHZU8
    538444419U,	// LHZX
    538444419U,	// LHZX8
    539493001U,	// LI
    539493001U,	// LI8
    539755149U,	// LIS
    539755149U,	// LIS8
    538444434U,	// LVEBX
    538444441U,	// LVEHX
    538444448U,	// LVEWX
    538444455U,	// LVSL
    538444461U,	// LVSR
    538444467U,	// LVX
    538444472U,	// LVXL
    538706622U,	// LWA
    538444483U,	// LWARX
    538444490U,	// LWAX
    538444496U,	// LWBRX
    537920215U,	// LWZ
    537920215U,	// LWZ8
    538182364U,	// LWZU
    538182364U,	// LWZU8
    538444514U,	// LWZX
    538444514U,	// LWZX8
    536904424U,	// MCRF
    687866606U,	// MFCR
    687866612U,	// MFCTR
    687866612U,	// MFCTR8
    687866619U,	// MFFS
    687866625U,	// MFLR
    687866625U,	// MFLR8
    540017390U,	// MFOCRF
    708838151U,	// MFVRSAVE
    687866638U,	// MFVSCR
    2952790806U,	// MTCRF
    687866653U,	// MTCTR
    687866653U,	// MTCTR8
    3221226276U,	// MTFSB0
    3221226284U,	// MTFSB1
    3665822516U,	// MTFSF
    687866683U,	// MTLR
    687866683U,	// MTLR8
    687866689U,	// MTVRSAVE
    687866701U,	// MTVSCR
    536871765U,	// MULHD
    536871772U,	// MULHDU
    536871780U,	// MULHW
    536871787U,	// MULHWU
    536871795U,	// MULLD
    536875898U,	// MULLI
    536871809U,	// MULLW
    3758096495U,	// MovePCtoLR
    3758096495U,	// MovePCtoLR8
    536871816U,	// NAND
    536871816U,	// NAND8
    536904590U,	// NEG
    536904590U,	// NEG8
    268436371U,	// NOP
    536871831U,	// NOR
    536871831U,	// NOR8
    536871836U,	// OR
    536871836U,	// OR4To8
    536871836U,	// OR8
    536871836U,	// OR8To4
    536871840U,	// ORC
    536871840U,	// ORC8
    536884133U,	// ORI
    536884133U,	// ORI8
    536884138U,	// ORIS
    536884138U,	// ORIS8
    536871856U,	// RLDCL
    536888247U,	// RLDICL
    536888255U,	// RLDICR
    540410823U,	// RLDIMI
    540443599U,	// RLWIMI
    536892375U,	// RLWINM
    536892383U,	// RLWINMo
    536871912U,	// RLWNM
    985661441U,	// SELECT_CC_F4
    985661441U,	// SELECT_CC_F8
    985661441U,	// SELECT_CC_I4
    985661441U,	// SELECT_CC_I8
    985661441U,	// SELECT_CC_VRRC
    536871919U,	// SLD
    536871924U,	// SLW
    989855745U,	// SPILL_CR
    536871929U,	// SRAD
    536888319U,	// SRADI
    536871942U,	// SRAW
    536892428U,	// SRAWI
    536871955U,	// SRD
    536871960U,	// SRW
    537920541U,	// STB
    537920541U,	// STB8
    3678405666U,	// STBU
    3678405666U,	// STBU8
    538444840U,	// STBX
    538444840U,	// STBX8
    538706990U,	// STD
    538444851U,	// STDCX
    3682599995U,	// STDU
    538444865U,	// STDUX
    538444872U,	// STDX
    538444872U,	// STDX_32
    538706990U,	// STD_32
    537920590U,	// STFD
    3678405716U,	// STFDU
    538444891U,	// STFDX
    538444898U,	// STFIWX
    537920618U,	// STFS
    3678405744U,	// STFSU
    538444919U,	// STFSX
    537920638U,	// STH
    537920638U,	// STH8
    538444931U,	// STHBRX
    3678405771U,	// STHU
    3678405771U,	// STHU8
    538444945U,	// STHX
    538444945U,	// STHX8
    538444951U,	// STVEBX
    538444959U,	// STVEHX
    538444967U,	// STVEWX
    538444975U,	// STVX
    538444981U,	// STVXL
    537920700U,	// STW
    537920700U,	// STW8
    538444993U,	// STWBRX
    538445001U,	// STWCX
    3678405841U,	// STWU
    3678405841U,	// STWU8
    536872151U,	// STWUX
    538445022U,	// STWX
    538445022U,	// STWX8
    536872164U,	// SUBF
    536872164U,	// SUBF8
    536872170U,	// SUBFC
    536872170U,	// SUBFC8
    536872177U,	// SUBFE
    536872177U,	// SUBFE8
    536876280U,	// SUBFIC
    536876280U,	// SUBFIC8
    536904960U,	// SUBFME
    536904960U,	// SUBFME8
    536904968U,	// SUBFZE
    536904968U,	// SUBFZE8
    268436752U,	// SYNC
    1761607775U,	// TAILB
    1761607775U,	// TAILB8
    2030044437U,	// TAILBA
    2030044437U,	// TAILBA8
    268435556U,	// TAILBCTR
    268435556U,	// TAILBCTR8
    2025882905U,	// TCRETURNai
    2025882918U,	// TCRETURNai8
    1757447476U,	// TCRETURNdi
    1757447489U,	// TCRETURNdi8
    683705679U,	// TCRETURNri
    683705692U,	// TCRETURNri8
    268436842U,	// TRAP
    536905071U,	// UPDATE_VRSAVE
    536872318U,	// VADDCUW
    536872327U,	// VADDFP
    536872335U,	// VADDSBS
    536872344U,	// VADDSHS
    536872353U,	// VADDSWS
    536872362U,	// VADDUBM
    536872371U,	// VADDUBS
    536872380U,	// VADDUHM
    536872389U,	// VADDUHS
    536872398U,	// VADDUWM
    536872407U,	// VADDUWS
    536872416U,	// VAND
    536872422U,	// VANDC
    536872429U,	// VAVGSB
    536872437U,	// VAVGSH
    536872445U,	// VAVGSW
    536872453U,	// VAVGUB
    536872461U,	// VAVGUH
    536872469U,	// VAVGUW
    540476957U,	// VCFSX
    540476964U,	// VCFUX
    536872491U,	// VCMPBFP
    536872500U,	// VCMPBFPo
    536872510U,	// VCMPEQFP
    536872520U,	// VCMPEQFPo
    536872531U,	// VCMPEQUB
    536872541U,	// VCMPEQUBo
    536872552U,	// VCMPEQUH
    536872562U,	// VCMPEQUHo
    536872573U,	// VCMPEQUW
    536872583U,	// VCMPEQUWo
    536872594U,	// VCMPGEFP
    536872604U,	// VCMPGEFPo
    536872615U,	// VCMPGTFP
    536872625U,	// VCMPGTFPo
    536872636U,	// VCMPGTSB
    536872646U,	// VCMPGTSBo
    536872657U,	// VCMPGTSH
    536872667U,	// VCMPGTSHo
    536872678U,	// VCMPGTSW
    536872688U,	// VCMPGTSWo
    536872699U,	// VCMPGTUB
    536872709U,	// VCMPGTUBo
    536872720U,	// VCMPGTUH
    536872730U,	// VCMPGTUHo
    536872741U,	// VCMPGTUW
    536872751U,	// VCMPGTUWo
    540477242U,	// VCTSXS
    540477250U,	// VCTUXS
    536905546U,	// VEXPTEFP
    536905556U,	// VLOGEFP
    536872797U,	// VMADDFP
    536872806U,	// VMAXFP
    536872814U,	// VMAXSB
    536872822U,	// VMAXSH
    536872830U,	// VMAXSW
    536872838U,	// VMAXUB
    536872846U,	// VMAXUH
    536872854U,	// VMAXUW
    536872862U,	// VMHADDSHS
    536872873U,	// VMHRADDSHS
    536872885U,	// VMINFP
    536872893U,	// VMINSB
    536872901U,	// VMINSH
    536872909U,	// VMINSW
    536872917U,	// VMINUB
    536872925U,	// VMINUH
    536872933U,	// VMINUW
    536872941U,	// VMLADDUHM
    536872952U,	// VMRGHB
    536872960U,	// VMRGHH
    536872968U,	// VMRGHW
    536872976U,	// VMRGLB
    536872984U,	// VMRGLH
    536872992U,	// VMRGLW
    536873000U,	// VMSUMMBM
    536873010U,	// VMSUMSHM
    536873020U,	// VMSUMSHS
    536873030U,	// VMSUMUBM
    536873040U,	// VMSUMUHM
    536873050U,	// VMSUMUHS
    536873060U,	// VMULESB
    536873069U,	// VMULESH
    536873078U,	// VMULEUB
    536873087U,	// VMULEUH
    536873096U,	// VMULOSB
    536873105U,	// VMULOSH
    536873114U,	// VMULOUB
    536873123U,	// VMULOUH
    536873132U,	// VNMSUBFP
    536873142U,	// VNOR
    536873148U,	// VOR
    536873153U,	// VPERM
    536873160U,	// VPKPX
    536873167U,	// VPKSHSS
    536873176U,	// VPKSHUS
    536873185U,	// VPKSWSS
    536873194U,	// VPKSWUS
    536873203U,	// VPKUHUM
    536873212U,	// VPKUHUS
    536873221U,	// VPKUWUM
    536873230U,	// VPKUWUS
    536906007U,	// VREFP
    536906014U,	// VRFIM
    536906021U,	// VRFIN
    536906028U,	// VRFIP
    536906035U,	// VRFIZ
    536873274U,	// VRLB
    536873280U,	// VRLH
    536873286U,	// VRLW
    536906060U,	// VRSQRTEFP
    536873303U,	// VSEL
    536873309U,	// VSL
    536873314U,	// VSLB
    536873320U,	// VSLDOI
    536873328U,	// VSLH
    536873334U,	// VSLO
    536873340U,	// VSLW
    540477826U,	// VSPLTB
    540477834U,	// VSPLTH
    540543378U,	// VSPLTISB
    540543388U,	// VSPLTISH
    540543398U,	// VSPLTISW
    540477872U,	// VSPLTW
    536873400U,	// VSR
    536873405U,	// VSRAB
    536873412U,	// VSRAH
    536873419U,	// VSRAW
    536873426U,	// VSRB
    536873432U,	// VSRH
    536873438U,	// VSRO
    536873444U,	// VSRW
    536873450U,	// VSUBCUW
    536873459U,	// VSUBFP
    536873467U,	// VSUBSBS
    536873476U,	// VSUBSHS
    536873485U,	// VSUBSWS
    536873494U,	// VSUBUBM
    536873503U,	// VSUBUBS
    536873512U,	// VSUBUHM
    536873521U,	// VSUBUHS
    536873530U,	// VSUBUWM
    536873539U,	// VSUBUWS
    536873548U,	// VSUM2SWS
    536873558U,	// VSUM4SBS
    536873568U,	// VSUM4SHS
    536873578U,	// VSUM4UBS
    536873588U,	// VSUMSWS
    536906365U,	// VUPKHPX
    536906374U,	// VUPKHSB
    536906383U,	// VUPKHSH
    536906392U,	// VUPKLPX
    536906401U,	// VUPKLSB
    536906410U,	// VUPKLSH
    536873651U,	// VXOR
    537397939U,	// V_SET0
    536873657U,	// XOR
    536873657U,	// XOR8
    536885950U,	// XORI
    536885950U,	// XORI8
    536885956U,	// XORIS
    536885956U,	// XORIS8
    0U
  };

  const char *AsmStrs = 
    "\000\000PHINODE\000add \000addc \000adde \000addi \000addic \000addic. "
    "\000addis \000addme \000addze \000and \000andc \000andis. \000andi. \000"
    "b \000b\000bctr\000bctrl\000bl \000bla \000cmpd \000cmpdi \000cmpld \000"
    "cmpldi \000cmplw \000cmplwi \000cmpw \000cmpwi \000cntlzd \000cntlzw \000"
    "creqv \000cror \000dcba \000dcbf \000dcbi \000dcbst \000dcbt \000dcbtst"
    " \000dcbz \000dcbzl \000divd \000divdu \000divw \000divwu \000dss \000d"
    "ssall\000dst \000dstst \000dststt \000dstt \000eqv \000extsb \000extsh "
    "\000extsw \000fabs \000fadd \000fadds \000fcfid \000fcmpu \000fctidz \000"
    "fctiwz \000fdiv \000fdivs \000fmadd \000fmadds \000fmr \000fmsub \000fm"
    "subs \000fmul \000fmuls \000fnabs \000fneg \000fnmadd \000fnmadds \000f"
    "nmsub \000fnmsubs \000frsp \000fsel \000fsqrt \000fsqrts \000fsub \000f"
    "subs \000la \000lbz \000lbzu \000lbzx \000ld \000ldarx \000ldu \000ldx "
    "\000lfd \000lfdx \000lfs \000lfsx \000lha \000lhau \000lhax \000lhbrx \000"
    "lhz \000lhzu \000lhzx \000li \000lis \000lvebx \000lvehx \000lvewx \000"
    "lvsl \000lvsr \000lvx \000lvxl \000lwa \000lwarx \000lwax \000lwbrx \000"
    "lwz \000lwzu \000lwzx \000mcrf \000mfcr \000mfctr \000mffs \000mflr \000"
    "mfspr \000mfvscr \000mtcrf \000mtctr \000mtfsb0 \000mtfsb1 \000mtfsf \000"
    "mtlr \000mtspr 256, \000mtvscr \000mulhd \000mulhdu \000mulhw \000mulhw"
    "u \000mulld \000mulli \000mullw \000nand \000neg \000nop\000nor \000or "
    "\000orc \000ori \000oris \000rldcl \000rldicl \000rldicr \000rldimi \000"
    "rlwimi \000rlwinm \000rlwinm. \000rlwnm \000sld \000slw \000srad \000sr"
    "adi \000sraw \000srawi \000srd \000srw \000stb \000stbu \000stbx \000st"
    "d \000stdcx. \000stdu \000stdux \000stdx \000stfd \000stfdu \000stfdx \000"
    "stfiwx \000stfs \000stfsu \000stfsx \000sth \000sthbrx \000sthu \000sth"
    "x \000stvebx \000stvehx \000stvewx \000stvx \000stvxl \000stw \000stwbr"
    "x \000stwcx. \000stwu \000stwux \000stwx \000subf \000subfc \000subfe \000"
    "subfic \000subfme \000subfze \000sync\000ba \000#TC_RETURNa \000#TC_RET"
    "URNa8 \000#TC_RETURNd \000#TC_RETURNd8 \000#TC_RETURNr \000#TC_RETURNr8"
    " \000trap\000UPDATE_VRSAVE \000vaddcuw \000vaddfp \000vaddsbs \000vadds"
    "hs \000vaddsws \000vaddubm \000vaddubs \000vadduhm \000vadduhs \000vadd"
    "uwm \000vadduws \000vand \000vandc \000vavgsb \000vavgsh \000vavgsw \000"
    "vavgub \000vavguh \000vavguw \000vcfsx \000vcfux \000vcmpbfp \000vcmpbf"
    "p. \000vcmpeqfp \000vcmpeqfp. \000vcmpequb \000vcmpequb. \000vcmpequh \000"
    "vcmpequh. \000vcmpequw \000vcmpequw. \000vcmpgefp \000vcmpgefp. \000vcm"
    "pgtfp \000vcmpgtfp. \000vcmpgtsb \000vcmpgtsb. \000vcmpgtsh \000vcmpgts"
    "h. \000vcmpgtsw \000vcmpgtsw. \000vcmpgtub \000vcmpgtub. \000vcmpgtuh \000"
    "vcmpgtuh. \000vcmpgtuw \000vcmpgtuw. \000vctsxs \000vctuxs \000vexptefp"
    " \000vlogefp \000vmaddfp \000vmaxfp \000vmaxsb \000vmaxsh \000vmaxsw \000"
    "vmaxub \000vmaxuh \000vmaxuw \000vmhaddshs \000vmhraddshs \000vminfp \000"
    "vminsb \000vminsh \000vminsw \000vminub \000vminuh \000vminuw \000vmlad"
    "duhm \000vmrghb \000vmrghh \000vmrghw \000vmrglb \000vmrglh \000vmrglw "
    "\000vmsummbm \000vmsumshm \000vmsumshs \000vmsumubm \000vmsumuhm \000vm"
    "sumuhs \000vmulesb \000vmulesh \000vmuleub \000vmuleuh \000vmulosb \000"
    "vmulosh \000vmuloub \000vmulouh \000vnmsubfp \000vnor \000vor \000vperm"
    " \000vpkpx \000vpkshss \000vpkshus \000vpkswss \000vpkswus \000vpkuhum "
    "\000vpkuhus \000vpkuwum \000vpkuwus \000vrefp \000vrfim \000vrfin \000v"
    "rfip \000vrfiz \000vrlb \000vrlh \000vrlw \000vrsqrtefp \000vsel \000vs"
    "l \000vslb \000vsldoi \000vslh \000vslo \000vslw \000vspltb \000vsplth "
    "\000vspltisb \000vspltish \000vspltisw \000vspltw \000vsr \000vsrab \000"
    "vsrah \000vsraw \000vsrb \000vsrh \000vsro \000vsrw \000vsubcuw \000vsu"
    "bfp \000vsubsbs \000vsubshs \000vsubsws \000vsububm \000vsububs \000vsu"
    "buhm \000vsubuhs \000vsubuwm \000vsubuws \000vsum2sws \000vsum4sbs \000"
    "vsum4shs \000vsum4ubs \000vsumsws \000vupkhpx \000vupkhsb \000vupkhsh \000"
    "vupklpx \000vupklsb \000vupklsh \000vxor \000xor \000xori \000xoris \000";

  processDebugLoc(MI->getDebugLoc());


#ifndef NO_ASM_WRITER_BOILERPLATE
  if (MI->getOpcode() == TargetInstrInfo::INLINEASM) {
    O << "\t";
    printInlineAsm(MI);
    return;
  } else if (MI->isLabel()) {
    printLabel(MI);
    return;
  } else if (MI->getOpcode() == TargetInstrInfo::DECLARE) {
    printDeclare(MI);
    return;
  } else if (MI->getOpcode() == TargetInstrInfo::IMPLICIT_DEF) {
    printImplicitDef(MI);
    return;
  }


#endif
  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095);


  // Fragment 0 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 28) & 15) {
  default:   // unreachable.
  case 0:
    return;
    break;
  case 1:
    // PHI, BCTR, BCTRL8_Darwin, BCTRL8_ELF, BCTRL_Darwin, BCTRL_SVR4, DSSALL...
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDICo, ADDI...
    printOperand(MI, 0); 
    break;
  case 3:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP...
    PrintSpecial(MI, "comment"); 
    break;
  case 4:
    // B
    printBranchOperand(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 5:
    // BCC, BLR
    printPredicateOperand(MI, 0, "cc"); 
    break;
  case 6:
    // BL8_Darwin, BL8_ELF, BL_Darwin, BL_SVR4, TAILB, TAILB8, TCRETURNdi, TC...
    printCallOperand(MI, 0); 
    break;
  case 7:
    // BLA8_Darwin, BLA8_ELF, BLA_Darwin, BLA_SVR4, TAILBA, TAILBA8, TCRETURN...
    printAbsAddrOperand(MI, 0); 
    break;
  case 8:
    // DCBA, DCBF, DCBI, DCBST, DCBT, DCBTST, DCBZ, DCBZL
    printMemRegReg(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 9:
    // DSS
    printU5ImmOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 10:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    O << ", "; 
    printU5ImmOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 11:
    // MTCRF
    printcrbitm(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 12:
    // MTFSB0, MTFSB1
    printU5ImmOperand(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 13:
    // MTFSF, STBU, STBU8, STDU, STFDU, STFSU, STHU, STHU8, STWU, STWU8
    printOperand(MI, 1); 
    O << ", "; 
    break;
  case 14:
    // MovePCtoLR, MovePCtoLR8
    printPICLabel(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }


  // Fragment 1 encoded into 6 bits for 47 unique commands.
  switch ((Bits >> 22) & 63) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDICo, ADDI...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN
    O << " ADJCALLSTACKDOWN"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // ADJCALLSTACKUP
    O << " ADJCALLSTACKUP"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 3:
    // ATOMIC_CMP_SWAP_I16
    O << " ATOMIC_CMP_SWAP_I16 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 4:
    // ATOMIC_CMP_SWAP_I32
    O << " ATOMIC_CMP_SWAP_I32 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 5:
    // ATOMIC_CMP_SWAP_I64
    O << " ATOMIC_CMP_SWAP_I64 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 6:
    // ATOMIC_CMP_SWAP_I8
    O << " ATOMIC_CMP_SWAP_I8 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 7:
    // ATOMIC_LOAD_ADD_I16
    O << " ATOMIC_LOAD_ADD_I16 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 8:
    // ATOMIC_LOAD_ADD_I32
    O << " ATOMIC_LOAD_ADD_I32 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 9:
    // ATOMIC_LOAD_ADD_I64
    O << " ATOMIC_LOAD_ADD_I64 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 10:
    // ATOMIC_LOAD_ADD_I8
    O << " ATOMIC_LOAD_ADD_I8 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 11:
    // ATOMIC_LOAD_AND_I16
    O << " ATOMIC_LOAD_AND_I16 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 12:
    // ATOMIC_LOAD_AND_I32
    O << " ATOMIC_LOAD_AND_I32 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 13:
    // ATOMIC_LOAD_AND_I64
    O << " ATOMIC_LOAD_AND_I64 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 14:
    // ATOMIC_LOAD_AND_I8
    O << " ATOMIC_LOAD_AND_I8 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 15:
    // ATOMIC_LOAD_NAND_I16
    O << " ATOMIC_LOAD_NAND_I16 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 16:
    // ATOMIC_LOAD_NAND_I32
    O << " ATOMIC_LOAD_NAND_I32 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 17:
    // ATOMIC_LOAD_NAND_I64
    O << " ATOMIC_LOAD_NAND_I64 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 18:
    // ATOMIC_LOAD_NAND_I8
    O << " ATOMIC_LOAD_NAND_I8 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 19:
    // ATOMIC_LOAD_OR_I16
    O << " ATOMIC_LOAD_OR_I16 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 20:
    // ATOMIC_LOAD_OR_I32
    O << " ATOMIC_LOAD_OR_I32 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 21:
    // ATOMIC_LOAD_OR_I64
    O << " ATOMIC_LOAD_OR_I64 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 22:
    // ATOMIC_LOAD_OR_I8
    O << " ATOMIC_LOAD_OR_I8 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 23:
    // ATOMIC_LOAD_SUB_I16
    O << " ATOMIC_LOAD_SUB_I16 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 24:
    // ATOMIC_LOAD_SUB_I32
    O << " ATOMIC_LOAD_SUB_I32 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 25:
    // ATOMIC_LOAD_SUB_I64
    O << " ATOMIC_LOAD_SUB_I64 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 26:
    // ATOMIC_LOAD_SUB_I8
    O << " ATOMIC_LOAD_SUB_I8 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 27:
    // ATOMIC_LOAD_XOR_I16
    O << " ATOMIC_LOAD_XOR_I16 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 28:
    // ATOMIC_LOAD_XOR_I32
    O << " ATOMIC_LOAD_XOR_I32 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 29:
    // ATOMIC_LOAD_XOR_I64
    O << " ATOMIC_LOAD_XOR_I64 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 30:
    // ATOMIC_LOAD_XOR_I8
    O << " ATOMIC_LOAD_XOR_I8 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 31:
    // ATOMIC_SWAP_I16
    O << " ATOMIC_SWAP_I16 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 32:
    // ATOMIC_SWAP_I32
    O << " ATOMIC_SWAP_I32 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 33:
    // ATOMIC_SWAP_I64
    O << " ATOMIC_SWAP_I64 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 34:
    // ATOMIC_SWAP_I8
    O << " ATOMIC_SWAP_I8 PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 35:
    // BCC, TCRETURNai, TCRETURNai8, TCRETURNdi, TCRETURNdi8, TCRETURNri, TCR...
    O << ' '; 
    break;
  case 36:
    // BL8_Darwin, BL8_ELF, BLA8_Darwin, BLA8_ELF, BLA_Darwin, BLA_SVR4, BL_D...
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 37:
    // BLR
    O << "lr "; 
    printPredicateOperand(MI, 0, "reg"); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 38:
    // DWARF_LOC
    O << " .loc "; 
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 39:
    // DYNALLOC
    O << " DYNALLOC "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printMemRegImm(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 40:
    // DYNALLOC8
    O << " DYNALLOC8 "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printMemRegImm(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 41:
    // MFVRSAVE
    O << ", 256"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 42:
    // MTFSF
    printOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 43:
    // SELECT_CC_F4, SELECT_CC_F8, SELECT_CC_I4, SELECT_CC_I8, SELECT_CC_VRRC
    O << " SELECT_CC PSEUDO!"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 44:
    // SPILL_CR
    O << " SPILL_CR "; 
    printOperand(MI, 0); 
    O << ' '; 
    printMemRegImm(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 45:
    // STBU, STBU8, STFDU, STFSU, STHU, STHU8, STWU, STWU8
    printSymbolLo(MI, 2); 
    O << '('; 
    printOperand(MI, 3); 
    O << ')'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 46:
    // STDU
    printS16X4ImmOperand(MI, 2); 
    O << '('; 
    printOperand(MI, 3); 
    O << ')'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 18) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDICo, ADDI...
    printOperand(MI, 1); 
    break;
  case 1:
    // BCC
    printPredicateOperand(MI, 0, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // CRSET, V_SET0
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 3:
    // LA, LHAU8
    printSymbolLo(MI, 2); 
    O << '('; 
    break;
  case 4:
    // LBZ, LBZ8, LFD, LFS, LHA, LHA8, LHZ, LHZ8, LWZ, LWZ8, STB, STB8, STFD,...
    printMemRegImm(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 5:
    // LBZU, LBZU8, LFDU, LFSU, LHAU, LHZU, LHZU8, LWZU, LWZU8
    printMemRegImm(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 6:
    // LBZX, LBZX8, LDARX, LDX, LFDX, LFSX, LHAX, LHAX8, LHBRX, LHZX, LHZX8, ...
    printMemRegReg(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 7:
    // LD, LWA, STD, STD_32
    printMemRegImmShifted(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 8:
    // LDU
    printMemRegImmShifted(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 9:
    // LDtoc
    printTOCEntryLabel(MI, 1); 
    O << '('; 
    printOperand(MI, 2); 
    O << ')'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 10:
    // LI, LI8
    printSymbolLo(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 11:
    // LIS, LIS8
    printSymbolHi(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 12:
    // MFOCRF
    printcrbitm(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 13:
    // RLDIMI, RLWIMI, VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printOperand(MI, 2); 
    O << ", "; 
    break;
  case 14:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 15) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDICo, ADDI...
    O << ", "; 
    break;
  case 1:
    // ADDME, ADDME8, ADDZE, ADDZE8, CNTLZD, CNTLZW, EXTSB, EXTSB8, EXTSH, EX...
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // LA
    printOperand(MI, 1); 
    O << ')'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 3:
    // LHAU8
    printOperand(MI, 3); 
    O << ')'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 4:
    // RLDIMI
    printU6ImmOperand(MI, 3); 
    O << ", "; 
    printU6ImmOperand(MI, 4); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 5:
    // RLWIMI
    printU5ImmOperand(MI, 3); 
    O << ", "; 
    printU5ImmOperand(MI, 4); 
    O << ", "; 
    printU5ImmOperand(MI, 5); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 6:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printU5ImmOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 12) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, AND, AND8, ANDC, ANDC8, CMPD, CM...
    printOperand(MI, 2); 
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDICo, CMPDI, CMPWI, MULLI, SUBFIC, SUBFIC8
    printS16ImmOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // ADDIS, ADDIS8
    printSymbolHi(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 3:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 4:
    // RLDICL, RLDICR, SRADI
    printU6ImmOperand(MI, 2); 
    break;
  case 5:
    // RLWINM, RLWINMo, SRAWI
    printU5ImmOperand(MI, 2); 
    break;
  }

  switch (MI->getOpcode()) {
  case PPC::ADD4:
  case PPC::ADD8:
  case PPC::ADDC:
  case PPC::ADDC8:
  case PPC::ADDE:
  case PPC::ADDE8:
  case PPC::AND:
  case PPC::AND8:
  case PPC::ANDC:
  case PPC::ANDC8:
  case PPC::CMPD:
  case PPC::CMPLD:
  case PPC::CMPLW:
  case PPC::CMPW:
  case PPC::CREQV:
  case PPC::CROR:
  case PPC::DIVD:
  case PPC::DIVDU:
  case PPC::DIVW:
  case PPC::DIVWU:
  case PPC::EQV:
  case PPC::EQV8:
  case PPC::FADD:
  case PPC::FADDS:
  case PPC::FADDrtz:
  case PPC::FCMPUD:
  case PPC::FCMPUS:
  case PPC::FDIV:
  case PPC::FDIVS:
  case PPC::FMUL:
  case PPC::FMULS:
  case PPC::FSUB:
  case PPC::FSUBS:
  case PPC::MULHD:
  case PPC::MULHDU:
  case PPC::MULHW:
  case PPC::MULHWU:
  case PPC::MULLD:
  case PPC::MULLW:
  case PPC::NAND:
  case PPC::NAND8:
  case PPC::NOR:
  case PPC::NOR8:
  case PPC::OR:
  case PPC::OR4To8:
  case PPC::OR8:
  case PPC::OR8To4:
  case PPC::ORC:
  case PPC::ORC8:
  case PPC::SLD:
  case PPC::SLW:
  case PPC::SRAD:
  case PPC::SRADI:
  case PPC::SRAW:
  case PPC::SRAWI:
  case PPC::SRD:
  case PPC::SRW:
  case PPC::STWUX:
  case PPC::SUBF:
  case PPC::SUBF8:
  case PPC::SUBFC:
  case PPC::SUBFC8:
  case PPC::SUBFE:
  case PPC::SUBFE8:
  case PPC::VADDCUW:
  case PPC::VADDFP:
  case PPC::VADDSBS:
  case PPC::VADDSHS:
  case PPC::VADDSWS:
  case PPC::VADDUBM:
  case PPC::VADDUBS:
  case PPC::VADDUHM:
  case PPC::VADDUHS:
  case PPC::VADDUWM:
  case PPC::VADDUWS:
  case PPC::VAND:
  case PPC::VANDC:
  case PPC::VAVGSB:
  case PPC::VAVGSH:
  case PPC::VAVGSW:
  case PPC::VAVGUB:
  case PPC::VAVGUH:
  case PPC::VAVGUW:
  case PPC::VCMPBFP:
  case PPC::VCMPBFPo:
  case PPC::VCMPEQFP:
  case PPC::VCMPEQFPo:
  case PPC::VCMPEQUB:
  case PPC::VCMPEQUBo:
  case PPC::VCMPEQUH:
  case PPC::VCMPEQUHo:
  case PPC::VCMPEQUW:
  case PPC::VCMPEQUWo:
  case PPC::VCMPGEFP:
  case PPC::VCMPGEFPo:
  case PPC::VCMPGTFP:
  case PPC::VCMPGTFPo:
  case PPC::VCMPGTSB:
  case PPC::VCMPGTSBo:
  case PPC::VCMPGTSH:
  case PPC::VCMPGTSHo:
  case PPC::VCMPGTSW:
  case PPC::VCMPGTSWo:
  case PPC::VCMPGTUB:
  case PPC::VCMPGTUBo:
  case PPC::VCMPGTUH:
  case PPC::VCMPGTUHo:
  case PPC::VCMPGTUW:
  case PPC::VCMPGTUWo:
  case PPC::VMAXFP:
  case PPC::VMAXSB:
  case PPC::VMAXSH:
  case PPC::VMAXSW:
  case PPC::VMAXUB:
  case PPC::VMAXUH:
  case PPC::VMAXUW:
  case PPC::VMINFP:
  case PPC::VMINSB:
  case PPC::VMINSH:
  case PPC::VMINSW:
  case PPC::VMINUB:
  case PPC::VMINUH:
  case PPC::VMINUW:
  case PPC::VMRGHB:
  case PPC::VMRGHH:
  case PPC::VMRGHW:
  case PPC::VMRGLB:
  case PPC::VMRGLH:
  case PPC::VMRGLW:
  case PPC::VMULESB:
  case PPC::VMULESH:
  case PPC::VMULEUB:
  case PPC::VMULEUH:
  case PPC::VMULOSB:
  case PPC::VMULOSH:
  case PPC::VMULOUB:
  case PPC::VMULOUH:
  case PPC::VNOR:
  case PPC::VOR:
  case PPC::VPKPX:
  case PPC::VPKSHSS:
  case PPC::VPKSHUS:
  case PPC::VPKSWSS:
  case PPC::VPKSWUS:
  case PPC::VPKUHUM:
  case PPC::VPKUHUS:
  case PPC::VPKUWUM:
  case PPC::VPKUWUS:
  case PPC::VRLB:
  case PPC::VRLH:
  case PPC::VRLW:
  case PPC::VSL:
  case PPC::VSLB:
  case PPC::VSLH:
  case PPC::VSLO:
  case PPC::VSLW:
  case PPC::VSR:
  case PPC::VSRAB:
  case PPC::VSRAH:
  case PPC::VSRAW:
  case PPC::VSRB:
  case PPC::VSRH:
  case PPC::VSRO:
  case PPC::VSRW:
  case PPC::VSUBCUW:
  case PPC::VSUBFP:
  case PPC::VSUBSBS:
  case PPC::VSUBSHS:
  case PPC::VSUBSWS:
  case PPC::VSUBUBM:
  case PPC::VSUBUBS:
  case PPC::VSUBUHM:
  case PPC::VSUBUHS:
  case PPC::VSUBUWM:
  case PPC::VSUBUWS:
  case PPC::VSUM2SWS:
  case PPC::VSUM4SBS:
  case PPC::VSUM4SHS:
  case PPC::VSUM4UBS:
  case PPC::VSUMSWS:
  case PPC::VXOR:
  case PPC::XOR:
  case PPC::XOR8:
    EmitComments(*MI);

    O << "\n"; 
    break;
  case PPC::FMADD:
  case PPC::FMADDS:
  case PPC::FMSUB:
  case PPC::FMSUBS:
  case PPC::FNMADD:
  case PPC::FNMADDS:
  case PPC::FNMSUB:
  case PPC::FNMSUBS:
  case PPC::FSELD:
  case PPC::FSELS:
  case PPC::RLDCL:
  case PPC::RLDICL:
  case PPC::RLDICR:
  case PPC::VMADDFP:
  case PPC::VMHADDSHS:
  case PPC::VMHRADDSHS:
  case PPC::VMLADDUHM:
  case PPC::VMSUMMBM:
  case PPC::VMSUMSHM:
  case PPC::VMSUMSHS:
  case PPC::VMSUMUBM:
  case PPC::VMSUMUHM:
  case PPC::VMSUMUHS:
  case PPC::VNMSUBFP:
  case PPC::VPERM:
  case PPC::VSEL:
  case PPC::VSLDOI:
    O << ", "; 
    switch (MI->getOpcode()) {
    case PPC::FMADD: 
    case PPC::FMADDS: 
    case PPC::FMSUB: 
    case PPC::FMSUBS: 
    case PPC::FNMADD: 
    case PPC::FNMADDS: 
    case PPC::FNMSUB: 
    case PPC::FNMSUBS: 
    case PPC::FSELD: 
    case PPC::FSELS: 
    case PPC::VMADDFP: 
    case PPC::VMHADDSHS: 
    case PPC::VMHRADDSHS: 
    case PPC::VMLADDUHM: 
    case PPC::VMSUMMBM: 
    case PPC::VMSUMSHM: 
    case PPC::VMSUMSHS: 
    case PPC::VMSUMUBM: 
    case PPC::VMSUMUHM: 
    case PPC::VMSUMUHS: 
    case PPC::VNMSUBFP: 
    case PPC::VPERM: 
    case PPC::VSEL: printOperand(MI, 3); break;
    case PPC::RLDCL: 
    case PPC::RLDICL: 
    case PPC::RLDICR: printU6ImmOperand(MI, 3); break;
    case PPC::VSLDOI: printU5ImmOperand(MI, 3); break;
    }
    EmitComments(*MI);

    O << "\n"; 
    break;
  case PPC::RLWINM:
  case PPC::RLWINMo:
  case PPC::RLWNM:
    O << ", "; 
    printU5ImmOperand(MI, 3); 
    O << ", "; 
    printU5ImmOperand(MI, 4); 
    EmitComments(*MI);

    O << "\n"; 
    break;
  }
  return;
  return;
}
