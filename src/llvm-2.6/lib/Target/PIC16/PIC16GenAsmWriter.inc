//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.  This method returns true if the
/// machine instruction was sufficiently described to print it, otherwise
/// it returns false.
void PIC16AsmPrinter::printInstruction(const MachineInstr *MI) {
  static const unsigned OpInfo[] = {
    536870914U,	// PHI
    0U,	// INLINEASM
    0U,	// DBG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// DECLARE
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1073741834U,	// ADJCALLSTACKDOWN
    1073741853U,	// ADJCALLSTACKUP
    1610612782U,	// AndFW
    2214592558U,	// AndWF
    1073741877U,	// CALL
    536870971U,	// CALLW
    536870971U,	// CALL_1
    1610612801U,	// OrFW
    2214592577U,	// OrWF
    536870984U,	// Return
    536870991U,	// SELECT_CC_Int_ICC
    1610612843U,	// XOrFW
    2214592619U,	// XOrWF
    1610612850U,	// addfw_1
    1610612850U,	// addfw_2
    1610612857U,	// addfwc
    2147483777U,	// addlw_1
    2147483777U,	// addlw_2
    2147483784U,	// addlwc
    2214592626U,	// addwf_1
    2214592626U,	// addwf_2
    2214592633U,	// addwfc
    2147483792U,	// andlw
    1073741975U,	// banksel
    1073741984U,	// br_uncond
    1207959718U,	// copy_fsr
    1207959728U,	// copy_w
    2348810424U,	// load_indirect
    2231369919U,	// movf
    2231369919U,	// movf_1
    2231369919U,	// movf_1_1
    2231369919U,	// movf_2
    2684354757U,	// movlw
    2785018060U,	// movlw_hi_1
    2785018060U,	// movlw_hi_2
    2785018072U,	// movlw_lo_1
    2785018072U,	// movlw_lo_2
    2214592739U,	// movwf
    2214592739U,	// movwf_1
    2214592739U,	// movwf_2
    2147483882U,	// orlw
    1073742065U,	// pagesel
    3221225720U,	// pic16brcond
    2281701626U,	// restore_fsr0
    2281701640U,	// restore_fsr1
    2281701654U,	// save_fsr0
    2281701665U,	// save_fsr1
    1342177507U,	// set_fsrhi
    1409286371U,	// set_fsrlo
    1073742051U,	// set_pclath
    2348810540U,	// store_indirect
    1610613043U,	// subfw_1
    1610613043U,	// subfw_2
    1610613043U,	// subfw_cc
    1610613050U,	// subfwb
    2147483970U,	// sublw_1
    2147483970U,	// sublw_2
    2147483970U,	// sublw_cc
    2214592819U,	// subwf_1
    2214592819U,	// subwf_2
    2214592819U,	// subwf_cc
    2214592826U,	// subwfb
    2147483977U,	// xorlw
    0U
  };

  const char *AsmStrs = 
    "\000\000PHINODE\000!ADJCALLSTACKDOWN \000!ADJCALLSTACKUP \000andwf \000"
    "call \000callw\000iorwf \000return\000; SELECT_CC_Int_ICC PSEUDO!\000xo"
    "rwf \000addwf \000addwfc \000addlw \000addlwc \000andlw \000banksel \000"
    "goto \000copy_fsr \000copy_w \000moviw \000movf \000movlw \000movlw HIG"
    "H(\000movlw LOW(\000movwf \000iorlw \000movlp \000b\000restore_fsr0 \000"
    "restore_fsr1 \000save_fsr0 \000save_fsr1 \000movwi \000subwf \000subwfb"
    " \000sublw \000xorlw \000";

  processDebugLoc(MI->getDebugLoc());


#ifndef NO_ASM_WRITER_BOILERPLATE
  if (MI->getOpcode() == TargetInstrInfo::INLINEASM) {
    O << "\t";
    printInlineAsm(MI);
    return;
  } else if (MI->isLabel()) {
    printLabel(MI);
    return;
  } else if (MI->getOpcode() == TargetInstrInfo::DECLARE) {
    printDeclare(MI);
    return;
  } else if (MI->getOpcode() == TargetInstrInfo::IMPLICIT_DEF) {
    printImplicitDef(MI);
    return;
  }


#endif
  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 511);


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    return;
    break;
  case 1:
    // PHI, CALLW, CALL_1, Return, SELECT_CC_Int_ICC
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, CALL, banksel, br_uncond, copy_fsr, ...
    printOperand(MI, 0); 
    break;
  case 3:
    // AndFW, OrFW, XOrFW, addfw_1, addfw_2, addfwc, subfw_1, subfw_2, subfw_...
    printOperand(MI, 3); 
    O << " + "; 
    printOperand(MI, 2); 
    O << ", W"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 4:
    // AndWF, OrWF, XOrWF, addlw_1, addlw_2, addlwc, addwf_1, addwf_2, addwfc...
    printOperand(MI, 2); 
    break;
  case 5:
    // movlw, movlw_hi_1, movlw_hi_2, movlw_lo_1, movlw_lo_2
    printOperand(MI, 1); 
    break;
  case 6:
    // pic16brcond
    printCCOperand(MI, 1); 
    O << ' '; 
    printOperand(MI, 0); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }


  // Fragment 1 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 26) & 7) {
  default:   // unreachable.
  case 0:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, CALL, addlw_1, addlw_2, addlwc, andl...
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 1:
    // AndWF, OrWF, XOrWF, addwf_1, addwf_2, addwfc, movf, movf_1, movf_1_1, ...
    O << " + "; 
    break;
  case 2:
    // copy_fsr, copy_w, restore_fsr0, restore_fsr1, save_fsr0, save_fsr1
    O << ", "; 
    printOperand(MI, 1); 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 3:
    // load_indirect, store_indirect
    O << '['; 
    printOperand(MI, 1); 
    O << ']'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 4:
    // set_fsrhi
    O << 'H'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  case 5:
    // set_fsrlo
    O << 'L'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
    break;
  }


  // Fragment 2 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 25) & 1) {
    // movlw_hi_1, movlw_hi_2, movlw_lo_1, movlw_lo_2
    printOperand(MI, 2); 
    O << ')'; 
    EmitComments(*MI);

    O << "\n"; 
    return;
  } else {
    // AndWF, OrWF, XOrWF, addwf_1, addwf_2, addwfc, movf, movf_1, movf_1_1, ...
    printOperand(MI, 1); 
  }


  // Fragment 3 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 24) & 1) {
    // movf, movf_1, movf_1_1, movf_2
    O << ", W"; 
    EmitComments(*MI);

    O << "\n"; 
    return;
  } else {
    // AndWF, OrWF, XOrWF, addwf_1, addwf_2, addwfc, movwf, movwf_1, movwf_2,...
    EmitComments(*MI);

    O << "\n"; 
    return;
  }

  return;
}
